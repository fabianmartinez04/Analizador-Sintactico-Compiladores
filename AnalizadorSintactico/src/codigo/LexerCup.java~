/* The following code was generated by JFlex 1.6.1 */

package codigo;
import java_cup.runtime.*;
/* User code */

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>Scanner.flex</tt>
 */
public class LexerCup implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0,  9, 24, 26, 24, 25,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     9, 33, 34,  0,  0, 16, 14, 13, 29, 30, 23, 27, 58,  4, 36, 15, 
     3,  8,  8,  8,  8,  8,  8,  8,  2,  2,  0, 57, 32, 28, 31,  0, 
    17, 39, 37, 42, 52, 35,  6, 54, 45, 50,  1, 41, 53,  1, 47, 46, 
     1,  1, 38, 44, 48, 51, 56, 55,  5,  1,  1,  0, 10,  0, 17,  1, 
     0, 39, 37, 42, 52, 35,  6, 54, 45, 50,  1, 41, 53,  1, 47, 46, 
     1,  1, 38, 44, 48, 51, 56, 55,  5,  1,  1,  0,  7,  0,  0,  0, 
     0,  0,  0,  0,  0, 26,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0, 20,  0,  0,  0,  0,  0, 12,  0, 12, 12, 19,  0, 12,  0,  0, 
     0, 12,  0, 12,  0,  0,  0,  0,  0,  0, 12,  0,  0,  0,  0, 19, 
     0,  0, 18, 11,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0, 18, 11,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\1\2\1\3\2\4\1\5\1\3\1\2\1\6"+
    "\1\2\2\1\1\7\1\10\1\1\1\2\1\11\1\12"+
    "\1\13\1\14\1\15\1\16\1\17\1\20\1\2\4\3"+
    "\1\2\1\3\1\2\5\3\1\21\1\22\1\3\1\0"+
    "\1\1\2\0\1\1\1\4\3\0\1\1\1\23\2\4"+
    "\1\24\1\25\1\3\1\26\2\1\2\0\1\27\1\0"+
    "\1\1\1\30\1\6\1\0\1\31\1\0\1\32\1\33"+
    "\1\34\1\35\1\36\1\37\1\40\3\0\1\27\6\3"+
    "\2\0\2\3\1\41\1\0\1\41\2\3\1\42\3\3"+
    "\1\1\2\0\1\1\2\0\1\4\1\0\1\43\2\44"+
    "\1\23\1\0\1\45\1\0\1\27\1\0\1\1\1\0"+
    "\1\27\5\0\3\3\1\0\3\3\2\0\2\3\2\46"+
    "\2\3\1\0\1\3\1\0\1\3\1\0\2\1\2\44"+
    "\2\0\1\47\2\50\2\3\2\51\1\52\1\0\2\3"+
    "\2\0\3\3\1\53\1\0\1\3\2\54\1\55\1\0"+
    "\3\55\2\56\1\3\2\57\1\0\1\3\1\60\1\0"+
    "\1\60\2\3\2\61\1\62\1\0\1\3\2\63\1\3"+
    "\1\0\1\3\1\64\2\65";

  private static int [] zzUnpackAction() {
    int [] result = new int[201];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\73\0\166\0\261\0\354\0\u0127\0\u0162\0\u019d"+
    "\0\u01d8\0\u0213\0\u024e\0\u0289\0\u02c4\0\u02ff\0\u02ff\0\u033a"+
    "\0\u0375\0\u03b0\0\u03eb\0\73\0\73\0\u0426\0\u0461\0\u049c"+
    "\0\u04d7\0\u0512\0\u054d\0\u0588\0\u05c3\0\u05fe\0\u0639\0\u0674"+
    "\0\u06af\0\u06ea\0\u0725\0\u0760\0\u079b\0\73\0\73\0\u07d6"+
    "\0\u0811\0\u084c\0\u0887\0\u08c2\0\u08fd\0\u0938\0\u0973\0\u09ae"+
    "\0\u09e9\0\u0a24\0\u0a5f\0\u0a9a\0\u0ad5\0\73\0\73\0\u0b10"+
    "\0\73\0\u0b4b\0\u0b86\0\u0bc1\0\u0bfc\0\u0b86\0\u0c37\0\u0c72"+
    "\0\u084c\0\u0cad\0\u0ce8\0\73\0\u0d23\0\73\0\73\0\73"+
    "\0\73\0\73\0\73\0\73\0\u04d7\0\u0d5e\0\u0d99\0\73"+
    "\0\u0dd4\0\u0e0f\0\u0e4a\0\u0e85\0\u0ec0\0\u0efb\0\u0f36\0\u0f71"+
    "\0\u0fac\0\u0fe7\0\73\0\u1022\0\166\0\u105d\0\u1098\0\166"+
    "\0\u10d3\0\u110e\0\u1149\0\u1184\0\u11bf\0\u11fa\0\u1235\0\u1270"+
    "\0\u12ab\0\u12e6\0\u1321\0\u135c\0\u1397\0\u13d2\0\u140d\0\u1448"+
    "\0\166\0\u1483\0\u0b4b\0\u14be\0\u14f9\0\u1534\0\u0bc1\0\u156f"+
    "\0\u15aa\0\u15e5\0\u1620\0\u165b\0\u1696\0\u16d1\0\u170c\0\u1747"+
    "\0\u1782\0\u17bd\0\u17f8\0\u1833\0\u186e\0\u18a9\0\u18e4\0\73"+
    "\0\166\0\u191f\0\u195a\0\u1995\0\u19d0\0\u1a0b\0\u1a46\0\u1a81"+
    "\0\u1abc\0\u1af7\0\u1b32\0\u1448\0\u1b6d\0\u1ba8\0\73\0\73"+
    "\0\166\0\u1be3\0\u1c1e\0\73\0\166\0\166\0\u1c59\0\u1c94"+
    "\0\u1ccf\0\u1d0a\0\u1d45\0\u1d80\0\u1dbb\0\u1df6\0\166\0\u1e31"+
    "\0\u1e6c\0\73\0\166\0\u1ea7\0\u1ea7\0\u1ee2\0\u1f1d\0\u1f58"+
    "\0\73\0\166\0\u1f93\0\73\0\166\0\u1fce\0\u2009\0\73"+
    "\0\u2044\0\166\0\u207f\0\u20ba\0\73\0\166\0\166\0\u20f5"+
    "\0\u2130\0\73\0\166\0\u216b\0\u21a6\0\u21e1\0\166\0\73"+
    "\0\166";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[201];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\3\1\7\1\10"+
    "\1\4\1\11\1\2\1\12\1\2\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\4\2\1\21\2\11\1\2\1\22"+
    "\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\1\2\1\33\1\34\1\3\1\2\1\3\1\35\1\36"+
    "\1\37\4\3\1\40\1\41\1\3\1\42\1\43\1\3"+
    "\1\44\1\45\1\46\1\47\74\0\1\3\2\50\1\0"+
    "\2\3\1\0\1\50\2\0\1\51\1\0\5\52\1\53"+
    "\20\0\1\3\1\0\3\3\1\0\2\3\1\0\5\3"+
    "\1\0\7\3\2\0\1\54\1\55\2\56\1\54\2\55"+
    "\1\54\1\56\2\54\1\57\1\54\5\55\1\60\5\54"+
    "\3\0\10\54\1\55\1\61\3\55\1\54\2\55\1\54"+
    "\5\55\1\54\7\55\3\54\1\55\2\56\1\54\1\62"+
    "\1\55\1\54\1\63\2\54\1\57\1\54\5\55\1\60"+
    "\5\54\3\0\10\54\1\55\1\61\3\55\1\54\2\55"+
    "\1\54\5\55\1\54\7\55\2\54\2\0\1\64\1\65"+
    "\1\66\3\0\1\64\23\0\1\67\37\0\1\3\2\50"+
    "\1\0\2\3\1\0\1\50\2\0\1\51\1\0\5\52"+
    "\1\53\20\0\1\3\1\0\3\3\1\0\2\3\1\0"+
    "\2\3\1\70\2\3\1\0\7\3\11\0\1\71\74\0"+
    "\1\11\16\0\2\11\55\0\1\17\7\0\1\17\1\0"+
    "\1\17\45\0\1\72\2\73\1\0\2\72\1\0\1\73"+
    "\2\74\1\75\1\0\1\76\4\73\1\77\6\0\1\74"+
    "\11\0\1\72\1\0\3\72\1\0\2\72\1\0\5\72"+
    "\1\0\7\72\3\0\1\100\2\52\1\0\2\100\1\0"+
    "\1\52\2\0\1\51\1\0\1\52\1\101\3\52\1\53"+
    "\20\0\1\100\1\0\3\100\1\0\2\100\1\0\5\100"+
    "\1\0\7\100\3\0\1\100\2\52\1\0\2\100\1\0"+
    "\1\52\2\0\1\51\1\0\2\52\1\102\2\52\1\53"+
    "\4\0\1\103\4\0\1\104\6\0\1\100\1\0\3\100"+
    "\1\0\2\100\1\0\5\100\1\0\7\100\3\0\1\100"+
    "\2\52\1\0\2\100\1\0\1\52\2\0\1\51\1\0"+
    "\5\52\1\53\20\0\1\100\1\0\3\100\1\0\2\100"+
    "\1\0\5\100\1\0\7\100\25\0\2\17\1\105\101\0"+
    "\1\106\71\0\1\107\1\110\72\0\1\111\72\0\1\112"+
    "\72\0\1\113\72\0\1\114\37\0\3\115\1\0\2\115"+
    "\1\0\3\115\1\116\1\0\5\115\1\117\6\0\1\115"+
    "\10\0\1\120\1\115\1\0\3\115\1\0\2\115\1\0"+
    "\5\115\1\0\7\115\3\0\1\3\2\50\1\0\2\3"+
    "\1\0\1\50\2\0\1\51\1\0\5\52\1\53\20\0"+
    "\1\3\1\0\3\3\1\0\2\3\1\0\5\3\1\0"+
    "\3\3\1\121\3\3\3\0\1\3\2\50\1\0\2\3"+
    "\1\0\1\50\2\0\1\51\1\0\5\52\1\53\20\0"+
    "\1\3\1\0\1\3\1\122\1\3\1\0\2\3\1\0"+
    "\5\3\1\0\7\3\3\0\1\3\2\50\1\0\2\3"+
    "\1\0\1\50\2\0\1\51\1\0\5\52\1\53\20\0"+
    "\1\123\1\0\3\3\1\0\2\3\1\0\5\3\1\0"+
    "\7\3\3\0\1\3\2\50\1\0\2\3\1\0\1\50"+
    "\2\0\1\51\1\0\5\52\1\53\20\0\1\3\1\0"+
    "\2\3\1\124\1\0\2\3\1\0\1\3\1\125\1\126"+
    "\2\3\1\0\7\3\57\0\1\127\11\0\1\130\4\0"+
    "\1\3\2\50\1\0\2\3\1\0\1\50\2\0\1\51"+
    "\1\0\5\52\1\53\20\0\1\3\1\0\3\3\1\0"+
    "\2\3\1\0\1\3\1\131\3\3\1\0\5\3\1\132"+
    "\1\3\10\0\1\133\50\0\1\134\14\0\1\3\2\50"+
    "\1\0\1\3\1\135\1\0\1\50\2\0\1\51\1\0"+
    "\5\52\1\53\20\0\1\3\1\0\3\3\1\0\2\3"+
    "\1\0\3\3\1\136\1\3\1\0\7\3\3\0\1\3"+
    "\2\50\1\0\2\3\1\0\1\50\2\0\1\51\1\0"+
    "\5\52\1\53\20\0\1\137\1\0\3\3\1\0\2\3"+
    "\1\0\2\3\1\140\2\3\1\0\7\3\3\0\1\3"+
    "\2\50\1\0\2\3\1\0\1\50\2\0\1\51\1\0"+
    "\5\52\1\53\20\0\1\3\1\0\3\3\1\0\2\3"+
    "\1\0\2\3\1\141\2\3\1\0\7\3\3\0\1\3"+
    "\2\50\1\0\2\3\1\0\1\50\2\0\1\51\1\0"+
    "\5\52\1\53\20\0\1\3\1\0\3\3\1\0\2\3"+
    "\1\0\1\3\1\142\3\3\1\0\7\3\3\0\1\3"+
    "\2\50\1\0\2\3\1\0\1\50\2\0\1\51\1\0"+
    "\5\52\1\53\20\0\1\3\1\0\3\3\1\0\2\3"+
    "\1\0\2\3\1\143\2\3\1\0\7\3\3\0\3\50"+
    "\1\0\2\50\1\0\1\50\32\0\1\50\1\0\3\50"+
    "\1\0\2\50\1\0\5\50\1\0\7\50\16\0\1\52"+
    "\7\0\1\52\1\0\1\52\45\0\1\144\2\52\1\0"+
    "\2\144\1\0\1\52\2\0\1\51\1\0\5\52\1\53"+
    "\20\0\1\144\1\0\3\144\1\0\2\144\1\0\5\144"+
    "\1\0\7\144\25\0\2\52\1\145\47\0\2\146\4\0"+
    "\1\146\63\0\1\100\2\147\1\0\2\100\1\0\1\147"+
    "\2\0\1\150\1\0\5\100\1\151\20\0\1\100\1\0"+
    "\3\100\1\0\2\100\1\0\5\100\1\0\7\100\2\0"+
    "\1\54\1\55\2\152\1\54\2\55\1\54\1\152\2\54"+
    "\1\57\1\54\5\55\1\60\5\54\3\0\10\54\1\55"+
    "\1\61\3\55\1\54\2\55\1\54\5\55\1\54\7\55"+
    "\2\54\2\0\2\146\4\0\1\146\3\0\1\100\7\0"+
    "\1\100\1\0\1\100\46\0\2\146\4\0\1\146\12\0"+
    "\2\100\1\153\47\0\2\154\4\0\1\154\63\0\1\100"+
    "\2\155\1\0\1\100\1\156\1\0\1\155\2\0\1\150"+
    "\1\0\5\100\1\151\20\0\1\156\1\0\1\156\1\100"+
    "\1\156\1\0\1\100\1\156\1\0\5\100\1\0\2\100"+
    "\1\156\4\100\2\0\1\54\1\55\2\152\1\54\2\55"+
    "\1\54\1\157\2\54\1\57\1\54\5\55\1\60\5\54"+
    "\3\0\10\54\1\55\1\61\3\55\1\54\2\55\1\54"+
    "\5\55\1\54\7\55\2\54\2\0\2\64\4\0\1\64"+
    "\64\0\2\64\1\0\1\160\2\0\1\64\63\0\1\3"+
    "\2\50\1\0\2\3\1\0\1\50\2\0\1\51\1\0"+
    "\5\52\1\53\20\0\1\3\1\0\1\3\1\161\1\3"+
    "\1\0\2\3\1\0\5\3\1\0\7\3\3\0\3\72"+
    "\1\0\2\72\1\0\1\72\2\74\1\162\1\0\1\163"+
    "\4\72\1\164\6\0\1\74\11\0\1\72\1\0\3\72"+
    "\1\0\2\72\1\0\5\72\1\0\7\72\3\0\1\165"+
    "\2\73\1\0\2\165\1\0\1\73\2\74\1\75\1\0"+
    "\1\76\4\73\1\77\6\0\1\74\11\0\1\165\1\0"+
    "\3\165\1\0\2\165\1\0\5\165\1\0\7\165\3\0"+
    "\3\74\1\0\2\74\1\0\3\74\1\166\1\0\1\167"+
    "\4\74\1\170\6\0\1\74\11\0\1\74\1\0\3\74"+
    "\1\0\2\74\1\0\5\74\1\0\7\74\16\0\1\73"+
    "\7\0\1\73\1\0\1\73\67\0\2\73\1\171\46\0"+
    "\3\100\1\0\2\100\1\0\1\100\2\0\1\150\1\0"+
    "\5\100\1\151\20\0\1\100\1\0\3\100\1\0\2\100"+
    "\1\0\5\100\1\0\7\100\2\0\30\102\3\0\40\102"+
    "\27\103\1\172\43\103\26\0\1\17\60\0\1\115\7\0"+
    "\1\115\1\0\1\115\67\0\2\115\1\173\46\0\1\3"+
    "\2\50\1\0\2\3\1\0\1\50\2\0\1\51\1\0"+
    "\5\52\1\53\20\0\1\3\1\0\3\3\1\0\2\3"+
    "\1\174\1\175\4\3\1\0\7\3\3\0\1\3\2\50"+
    "\1\0\2\3\1\0\1\50\2\0\1\51\1\0\5\52"+
    "\1\53\20\0\1\176\1\0\3\3\1\0\2\3\1\0"+
    "\5\3\1\0\7\3\3\0\1\3\2\50\1\0\2\3"+
    "\1\0\1\50\2\0\1\51\1\0\5\52\1\53\20\0"+
    "\1\3\1\0\3\3\1\0\2\3\1\0\4\3\1\177"+
    "\1\0\7\3\3\0\1\3\2\50\1\0\2\3\1\0"+
    "\1\50\2\0\1\51\1\0\5\52\1\53\20\0\1\3"+
    "\1\0\3\3\1\0\2\3\1\200\1\201\4\3\1\0"+
    "\7\3\3\0\1\3\2\50\1\0\2\3\1\0\1\50"+
    "\2\0\1\51\1\0\5\52\1\53\20\0\1\3\1\0"+
    "\2\3\1\202\1\0\2\3\1\0\5\3\1\0\7\3"+
    "\3\0\1\3\2\50\1\0\2\3\1\0\1\50\2\0"+
    "\1\51\1\0\5\52\1\53\20\0\1\3\1\0\3\3"+
    "\1\0\2\3\1\0\3\3\1\203\1\3\1\0\7\3"+
    "\60\0\1\204\75\0\2\205\11\0\1\3\2\50\1\0"+
    "\2\3\1\0\1\50\2\0\1\51\1\0\5\52\1\53"+
    "\20\0\1\3\1\0\3\3\1\0\2\3\1\0\2\3"+
    "\1\206\2\3\1\0\7\3\3\0\1\3\2\50\1\0"+
    "\2\3\1\0\1\50\2\0\1\51\1\0\5\52\1\53"+
    "\20\0\1\3\1\0\3\3\1\0\2\3\1\0\5\3"+
    "\1\205\1\207\6\3\62\0\1\210\13\0\1\3\2\50"+
    "\1\0\2\3\1\0\1\50\2\0\1\51\1\0\5\52"+
    "\1\53\20\0\1\3\1\0\3\3\1\0\2\3\1\0"+
    "\4\3\1\211\1\0\7\3\3\0\1\3\2\50\1\0"+
    "\1\3\1\212\1\0\1\50\2\0\1\51\1\0\5\52"+
    "\1\53\20\0\1\3\1\0\3\3\1\0\2\3\1\0"+
    "\5\3\1\0\7\3\3\0\1\3\2\50\1\0\2\3"+
    "\1\0\1\50\2\0\1\51\1\0\5\52\1\53\20\0"+
    "\1\3\1\0\3\3\1\0\2\3\1\0\3\3\1\213"+
    "\1\3\1\0\7\3\3\0\1\3\2\50\1\0\2\3"+
    "\1\0\1\50\2\0\1\51\1\0\5\52\1\53\20\0"+
    "\1\3\1\0\3\3\1\0\2\3\1\0\5\3\1\214"+
    "\1\215\6\3\3\0\1\3\2\50\1\0\2\3\1\0"+
    "\1\50\2\0\1\51\1\0\5\52\1\53\20\0\1\3"+
    "\1\0\3\3\1\0\2\3\1\0\5\3\1\216\1\217"+
    "\6\3\3\0\1\144\3\0\2\144\4\0\1\51\1\0"+
    "\5\52\1\53\20\0\1\144\1\0\3\144\1\0\2\144"+
    "\1\0\5\144\1\0\7\144\30\0\1\52\46\0\2\146"+
    "\4\0\1\146\32\0\1\220\30\0\1\100\2\147\1\0"+
    "\2\100\1\0\1\147\2\0\1\150\1\0\5\100\1\151"+
    "\20\0\1\221\1\0\3\100\1\0\2\100\1\0\5\100"+
    "\1\0\7\100\16\0\1\100\7\0\1\100\1\0\1\100"+
    "\67\0\2\100\1\153\45\0\1\54\1\55\2\152\1\54"+
    "\2\55\1\54\1\152\2\54\1\57\1\54\5\55\1\60"+
    "\5\54\3\0\10\54\1\222\1\61\3\55\1\54\2\55"+
    "\1\54\5\55\1\54\7\55\2\54\26\0\1\100\46\0"+
    "\2\154\4\0\1\154\32\0\1\220\30\0\1\100\2\155"+
    "\1\0\1\100\1\156\1\0\1\155\2\0\1\150\1\0"+
    "\5\100\1\151\20\0\1\223\1\0\1\156\1\100\1\156"+
    "\1\0\1\100\1\156\1\0\5\100\1\0\2\100\1\156"+
    "\4\100\3\0\1\100\2\156\1\0\1\100\1\156\1\0"+
    "\1\156\2\0\1\150\1\0\5\100\1\151\20\0\1\156"+
    "\1\0\1\156\1\100\1\156\1\0\1\100\1\156\1\0"+
    "\5\100\1\0\2\100\1\156\4\100\2\0\1\54\1\55"+
    "\2\152\1\54\2\55\1\54\1\157\2\54\1\57\1\54"+
    "\5\55\1\60\5\54\3\0\10\54\1\222\1\61\3\55"+
    "\1\54\2\55\1\54\5\55\1\54\7\55\2\54\2\0"+
    "\2\224\2\0\1\224\1\0\1\224\32\0\1\224\1\0"+
    "\1\224\1\0\1\224\2\0\1\224\11\0\1\224\22\0"+
    "\1\72\7\0\1\72\1\0\1\72\67\0\2\72\1\225"+
    "\46\0\1\165\2\74\1\0\2\165\1\0\3\74\1\75"+
    "\1\0\1\76\4\73\1\77\6\0\1\74\11\0\1\165"+
    "\1\0\3\165\1\0\2\165\1\0\5\165\1\0\7\165"+
    "\16\0\1\74\7\0\1\74\1\0\1\74\67\0\2\74"+
    "\1\226\73\0\1\73\44\0\17\103\1\227\7\103\1\172"+
    "\43\103\26\0\1\115\107\0\1\230\30\0\1\3\2\50"+
    "\1\0\2\3\1\0\1\50\2\0\1\51\1\0\5\52"+
    "\1\53\20\0\1\231\1\0\3\3\1\0\2\3\1\0"+
    "\5\3\1\0\7\3\3\0\1\3\2\50\1\0\2\3"+
    "\1\0\1\50\2\0\1\51\1\0\5\52\1\53\20\0"+
    "\1\3\1\0\2\3\1\232\1\0\2\3\1\0\5\3"+
    "\1\0\7\3\3\0\1\3\2\50\1\0\2\3\1\0"+
    "\1\50\2\0\1\51\1\0\5\52\1\53\20\0\1\3"+
    "\1\0\3\3\1\0\2\3\1\0\5\3\1\0\1\3"+
    "\1\233\5\3\45\0\1\234\30\0\1\3\2\50\1\0"+
    "\2\3\1\0\1\50\2\0\1\51\1\0\5\52\1\53"+
    "\20\0\1\235\1\0\3\3\1\0\2\3\1\0\5\3"+
    "\1\0\7\3\3\0\1\3\2\50\1\0\2\3\1\0"+
    "\1\50\2\0\1\51\1\0\5\52\1\53\20\0\1\3"+
    "\1\0\1\3\1\236\1\3\1\0\2\3\1\0\5\3"+
    "\1\0\7\3\3\0\1\3\2\50\1\0\2\3\1\0"+
    "\1\50\2\0\1\51\1\0\5\52\1\53\20\0\1\3"+
    "\1\0\3\3\1\0\2\3\1\237\1\240\3\3\1\241"+
    "\1\0\7\3\50\0\1\242\104\0\1\243\13\0\1\3"+
    "\2\50\1\0\2\3\1\0\1\50\2\0\1\51\1\0"+
    "\5\52\1\53\20\0\1\3\1\0\1\3\1\244\1\3"+
    "\1\0\2\3\1\0\5\3\1\0\7\3\3\0\1\3"+
    "\2\50\1\0\2\3\1\0\1\50\2\0\1\51\1\0"+
    "\5\52\1\53\20\0\1\3\1\0\3\3\1\0\2\3"+
    "\1\0\4\3\1\245\1\0\7\3\3\0\1\3\2\50"+
    "\1\0\2\3\1\0\1\50\2\0\1\51\1\0\5\52"+
    "\1\53\20\0\1\3\1\0\2\3\1\246\1\0\2\3"+
    "\1\0\5\3\1\0\7\3\3\0\1\3\2\50\1\0"+
    "\2\3\1\0\1\50\2\0\1\51\1\0\5\52\1\53"+
    "\20\0\1\3\1\0\3\3\1\0\2\3\1\0\5\3"+
    "\1\0\4\3\1\247\2\3\67\0\1\250\6\0\1\3"+
    "\2\50\1\0\2\3\1\0\1\50\2\0\1\51\1\0"+
    "\5\52\1\53\20\0\1\3\1\0\3\3\1\0\2\3"+
    "\1\0\5\3\1\0\3\3\1\251\3\3\66\0\1\252"+
    "\7\0\1\3\2\50\1\0\2\3\1\0\1\50\2\0"+
    "\1\51\1\0\5\52\1\53\20\0\1\3\1\0\3\3"+
    "\1\0\2\3\1\0\5\3\1\0\2\3\1\253\4\3"+
    "\4\0\2\254\1\255\3\0\1\254\63\0\1\100\2\256"+
    "\1\255\2\100\1\0\1\256\2\0\1\150\1\0\5\100"+
    "\1\151\20\0\1\100\1\0\3\100\1\0\2\100\1\0"+
    "\5\100\1\0\7\100\3\0\1\100\2\257\1\255\2\100"+
    "\1\0\1\257\2\0\1\150\1\0\5\100\1\151\20\0"+
    "\1\100\1\0\3\100\1\0\2\100\1\0\5\100\1\0"+
    "\7\100\3\0\1\100\2\260\1\255\1\100\1\156\1\0"+
    "\1\260\2\0\1\150\1\0\5\100\1\151\20\0\1\156"+
    "\1\0\1\156\1\100\1\156\1\0\1\100\1\156\1\0"+
    "\5\100\1\0\2\100\1\156\4\100\30\0\1\72\72\0"+
    "\1\74\45\0\1\3\2\50\1\0\2\3\1\0\1\50"+
    "\2\0\1\51\1\0\5\52\1\53\20\0\1\3\1\0"+
    "\3\3\1\261\1\262\1\3\1\0\5\3\1\0\7\3"+
    "\3\0\1\3\2\50\1\0\2\3\1\0\1\50\2\0"+
    "\1\51\1\0\5\52\1\53\20\0\1\3\1\0\1\3"+
    "\1\263\1\3\1\0\2\3\1\0\5\3\1\0\7\3"+
    "\62\0\1\264\13\0\1\3\2\50\1\0\2\3\1\0"+
    "\1\50\2\0\1\51\1\0\5\52\1\53\20\0\1\3"+
    "\1\0\3\3\1\0\2\3\1\0\4\3\1\265\1\0"+
    "\7\3\3\0\1\3\2\50\1\0\2\3\1\0\1\50"+
    "\2\0\1\51\1\0\5\52\1\53\20\0\1\3\1\0"+
    "\3\3\1\0\2\3\1\0\5\3\1\266\1\267\6\3"+
    "\62\0\1\270\64\0\1\271\21\0\1\3\2\50\1\0"+
    "\2\3\1\0\1\50\2\0\1\51\1\0\5\52\1\53"+
    "\20\0\1\3\1\0\3\3\1\0\2\3\1\0\4\3"+
    "\1\272\1\0\7\3\3\0\1\3\2\50\1\0\2\3"+
    "\1\0\1\50\2\0\1\51\1\0\5\52\1\53\20\0"+
    "\1\3\1\0\3\3\1\0\1\3\1\273\1\0\5\3"+
    "\1\0\7\3\3\0\1\3\2\50\1\0\2\3\1\0"+
    "\1\50\2\0\1\51\1\0\5\52\1\53\20\0\1\3"+
    "\1\0\3\3\1\0\2\3\1\0\5\3\1\0\1\3"+
    "\1\274\5\3\45\0\1\275\30\0\1\3\2\50\1\0"+
    "\2\3\1\0\1\50\2\0\1\51\1\0\5\52\1\53"+
    "\20\0\1\276\1\0\3\3\1\0\2\3\1\0\5\3"+
    "\1\0\7\3\4\0\2\254\4\0\1\254\63\0\1\100"+
    "\2\256\1\0\2\100\1\0\1\256\2\0\1\150\1\0"+
    "\5\100\1\151\20\0\1\100\1\0\3\100\1\0\2\100"+
    "\1\0\5\100\1\0\7\100\3\0\1\100\2\257\1\0"+
    "\2\100\1\0\1\257\2\0\1\150\1\0\5\100\1\151"+
    "\20\0\1\221\1\0\3\100\1\0\2\100\1\0\5\100"+
    "\1\0\7\100\3\0\1\100\2\260\1\0\1\100\1\156"+
    "\1\0\1\260\2\0\1\150\1\0\5\100\1\151\20\0"+
    "\1\156\1\0\1\156\1\100\1\156\1\0\1\100\1\156"+
    "\1\0\5\100\1\0\2\100\1\156\4\100\3\0\1\3"+
    "\2\50\1\0\2\3\1\0\1\50\2\0\1\51\1\0"+
    "\5\52\1\53\20\0\1\3\1\0\3\3\1\0\2\3"+
    "\1\0\3\3\1\277\1\3\1\0\7\3\61\0\1\300"+
    "\14\0\1\3\2\50\1\0\2\3\1\0\1\50\2\0"+
    "\1\51\1\0\5\52\1\53\20\0\1\3\1\0\3\3"+
    "\1\0\2\3\1\0\3\3\1\301\1\3\1\0\7\3"+
    "\57\0\1\302\16\0\1\3\2\50\1\0\2\3\1\0"+
    "\1\50\2\0\1\51\1\0\5\52\1\53\20\0\1\3"+
    "\1\0\3\3\1\0\2\3\1\0\1\3\1\303\3\3"+
    "\1\0\7\3\3\0\1\3\2\50\1\0\2\3\1\0"+
    "\1\50\2\0\1\51\1\0\5\52\1\53\20\0\1\3"+
    "\1\0\3\3\1\0\2\3\1\0\5\3\1\0\3\3"+
    "\1\304\3\3\65\0\1\305\10\0\1\3\2\50\1\0"+
    "\2\3\1\0\1\50\2\0\1\51\1\0\5\52\1\53"+
    "\20\0\1\3\1\0\3\3\1\0\2\3\1\0\5\3"+
    "\1\0\1\3\1\306\5\3\3\0\1\3\2\50\1\0"+
    "\2\3\1\0\1\50\2\0\1\51\1\0\5\52\1\53"+
    "\20\0\1\3\1\0\3\3\1\0\2\3\1\0\4\3"+
    "\1\307\1\0\7\3\45\0\1\310\30\0\1\3\2\50"+
    "\1\0\2\3\1\0\1\50\2\0\1\51\1\0\5\52"+
    "\1\53\20\0\1\311\1\0\3\3\1\0\2\3\1\0"+
    "\5\3\1\0\7\3\2\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[8732];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\1\1\11\21\1\2\11\20\1\2\11\1\1\1\0"+
    "\1\1\2\0\2\1\3\0\4\1\2\11\1\1\1\11"+
    "\2\1\2\0\1\1\1\0\3\1\1\0\1\11\1\0"+
    "\7\11\3\0\1\11\6\1\2\0\2\1\1\11\1\0"+
    "\10\1\2\0\1\1\2\0\1\1\1\0\4\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\1\1\5\0"+
    "\3\1\1\0\3\1\2\0\2\1\1\11\3\1\1\0"+
    "\1\1\1\0\1\1\1\0\4\1\2\0\2\11\3\1"+
    "\1\11\2\1\1\0\2\1\2\0\4\1\1\0\1\1"+
    "\1\11\2\1\1\0\3\1\1\11\2\1\1\11\1\1"+
    "\1\0\1\1\1\11\1\0\3\1\1\11\2\1\1\0"+
    "\1\1\1\11\2\1\1\0\2\1\1\11\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[201];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public LexerCup(java.io.Reader in) {
    this.zzReader = in;
  }



  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(Sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { System.out.println("ERROR: " + yytext() + " columna: " + yycolumn + " fila: " + yyline);
            }
          case 54: break;
          case 2: 
            { System.out.println("ERROR:" + yytext() + " columna: " + yycolumn + " fila: " + yyline);
            }
          case 55: break;
          case 3: 
            { return new Symbol(Sym.IDENTIFIER, yycolumn, yyline, yytext());
            }
          case 56: break;
          case 4: 
            { return new Symbol(Sym.NUMBER, yycolumn, yyline, yytext());
            }
          case 57: break;
          case 5: 
            { return new Symbol(Sym.SUB, yycolumn, yyline, yytext());
            }
          case 58: break;
          case 6: 
            { /*Ignore*/
            }
          case 59: break;
          case 7: 
            { return new Symbol(Sym.DIV, yycolumn, yyline, yytext());
            }
          case 60: break;
          case 8: 
            { return new Symbol(Sym.MOD, yycolumn, yyline, yytext());
            }
          case 61: break;
          case 9: 
            { return new Symbol(Sym.MUL, yycolumn, yyline, yytext());
            }
          case 62: break;
          case 10: 
            { return new Symbol(Sym.ADD, yycolumn, yyline, yytext());
            }
          case 63: break;
          case 11: 
            { return new Symbol(Sym.EQUAL, yycolumn, yyline, yytext());
            }
          case 64: break;
          case 12: 
            { return new Symbol(Sym.OPEN_BRACKET, yycolumn, yyline, yytext());
            }
          case 65: break;
          case 13: 
            { return new Symbol(Sym.CLOSE_BRACKET, yycolumn, yyline, yytext());
            }
          case 66: break;
          case 14: 
            { return new Symbol(Sym.LESS, yycolumn, yyline, yytext());
            }
          case 67: break;
          case 15: 
            { return new Symbol(Sym.GREATER, yycolumn, yyline, yytext());
            }
          case 68: break;
          case 16: 
            { return new Symbol(Sym.LOGICAL_NOT, yycolumn, yyline, yytext());
            }
          case 69: break;
          case 17: 
            { return new Symbol(Sym.SEMICOLON, yycolumn, yyline, yytext());
            }
          case 70: break;
          case 18: 
            { return new Symbol(Sym.COMMA, yycolumn, yyline, yytext());
            }
          case 71: break;
          case 19: 
            { return new Symbol(Sym.OCTAL_NUMBER, yycolumn, yyline, yytext());
            }
          case 72: break;
          case 20: 
            { return new Symbol(Sym.DECR, yycolumn, yyline, yytext());
            }
          case 73: break;
          case 21: 
            { return new Symbol(Sym.SUB_EQUAL, yycolumn, yyline, yytext());
            }
          case 74: break;
          case 22: 
            { return new Symbol(Sym.LOGICAL_OR, yycolumn, yyline, yytext());
            }
          case 75: break;
          case 23: 
            { return new Symbol(Sym.LITERAL_STR, yycolumn, yyline, yytext());
            }
          case 76: break;
          case 24: 
            { return new Symbol(Sym.LOGICAL_AND, yycolumn, yyline, yytext());
            }
          case 77: break;
          case 25: 
            { return new Symbol(Sym.DIV_EQUAL, yycolumn, yyline, yytext());
            }
          case 78: break;
          case 26: 
            { return new Symbol(Sym.MUL_EQUAL, yycolumn, yyline, yytext());
            }
          case 79: break;
          case 27: 
            { return new Symbol(Sym.INCR, yycolumn, yyline, yytext());
            }
          case 80: break;
          case 28: 
            { return new Symbol(Sym.ADD_EQUAL, yycolumn, yyline, yytext());
            }
          case 81: break;
          case 29: 
            { return new Symbol(Sym.EQUAL_TO, yycolumn, yyline, yytext());
            }
          case 82: break;
          case 30: 
            { return new Symbol(Sym.GREATER_EQUAL, yycolumn, yyline, yytext());
            }
          case 83: break;
          case 31: 
            { return new Symbol(Sym.LESS_EQUAL, yycolumn, yyline, yytext());
            }
          case 84: break;
          case 32: 
            { return new Symbol(Sym.NOT_EQUAL, yycolumn, yyline, yytext());
            }
          case 85: break;
          case 33: 
            { return new Symbol(Sym.I_IF, yycolumn, yyline, yytext());
            }
          case 86: break;
          case 34: 
            { return new Symbol(Sym.I_DO, yycolumn, yyline, yytext());
            }
          case 87: break;
          case 35: 
            { return new Symbol(Sym.FLOAT_NUMBER, yycolumn, yyline, yytext());
            }
          case 88: break;
          case 36: 
            { return new Symbol(Sym.HEXADECIMAL_NUMBER, yycolumn, yyline, yytext());
            }
          case 89: break;
          case 37: 
            { return new Symbol(Sym.I_FOR, yycolumn, yyline, yytext());
            }
          case 90: break;
          case 38: 
            { return new Symbol(Sym.I_INT, yycolumn, yyline, yytext());
            }
          case 91: break;
          case 39: 
            { /* Ignore */
            }
          case 92: break;
          case 40: 
            { return new Symbol(Sym.I_ELSE, yycolumn, yyline, yytext());
            }
          case 93: break;
          case 41: 
            { return new Symbol(Sym.I_CASE, yycolumn, yyline, yytext());
            }
          case 94: break;
          case 42: 
            { return new Symbol(Sym.I_CHAR, yycolumn, yyline, yytext());
            }
          case 95: break;
          case 43: 
            { return new Symbol(Sym.I_LONG, yycolumn, yyline, yytext());
            }
          case 96: break;
          case 44: 
            { return new Symbol(Sym.I_VOID, yycolumn, yyline, yytext());
            }
          case 97: break;
          case 45: 
            { return new Symbol(Sym.FLOAT_POINT_NUMBER, yycolumn, yyline, yytext());
            }
          case 98: break;
          case 46: 
            { return new Symbol(Sym.I_BREAK, yycolumn, yyline, yytext());
            }
          case 99: break;
          case 47: 
            { return new Symbol(Sym.I_CONST, yycolumn, yyline, yytext());
            }
          case 100: break;
          case 48: 
            { return new Symbol(Sym.I_SHORT, yycolumn, yyline, yytext());
            }
          case 101: break;
          case 49: 
            { return new Symbol(Sym.I_WHILE, yycolumn, yyline, yytext());
            }
          case 102: break;
          case 50: 
            { return new Symbol(Sym.I_RETURN, yycolumn, yyline, yytext());
            }
          case 103: break;
          case 51: 
            { return new Symbol(Sym.I_SWITCH, yycolumn, yyline, yytext());
            }
          case 104: break;
          case 52: 
            { return new Symbol(Sym.I_DEFAULT, yycolumn, yyline, yytext());
            }
          case 105: break;
          case 53: 
            { return new Symbol(Sym.I_CONTINUE, yycolumn, yyline, yytext());
            }
          case 106: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
