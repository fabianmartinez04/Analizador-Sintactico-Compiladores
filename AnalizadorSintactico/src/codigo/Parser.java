
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package codigo;

import java_cup.runtime.*;
import java.util.LinkedList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
<<<<<<< HEAD
    "\000\251\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\003\000\002\003\003\000\002\013\003" +
    "\000\002\013\003\000\002\013\003\000\002\013\004\000" +
    "\002\013\004\000\002\013\004\000\002\004\006\000\002" +
    "\004\010\000\002\004\004\000\002\004\006\000\002\004" +
    "\007\000\002\007\003\000\002\007\003\000\002\007\003" +
    "\000\002\007\004\000\002\010\005\000\002\010\003\000" +
    "\002\010\007\000\002\010\005\000\002\010\005\000\002" +
    "\056\003\000\002\056\003\000\002\056\003\000\002\005" +
    "\006\000\002\006\011\000\002\006\010\000\002\006\007" +
    "\000\002\006\010\000\002\006\010\000\002\006\007\000" +
    "\002\006\010\000\002\006\011\000\002\011\003\000\002" +
    "\011\004\000\002\014\005\000\002\014\003\000\002\016" +
    "\004\000\002\015\004\000\002\015\003\000\002\015\004" +
    "\000\002\015\003\000\002\015\004\000\002\015\003\000" +
    "\002\015\005\000\002\015\004\000\002\015\007\000\002" +
    "\015\006\000\002\015\010\000\002\015\007\000\002\015" +
    "\005\000\002\015\004\000\002\015\005\000\002\015\003" +
    "\000\002\015\004\000\002\015\003\000\002\015\004\000" +
    "\002\015\003\000\002\015\005\000\002\015\004\000\002" +
    "\015\004\000\002\015\003\000\002\055\004\000\002\055" +
    "\003\000\002\055\005\000\002\055\004\000\002\055\007" +
    "\000\002\055\006\000\002\055\010\000\002\055\007\000" +
    "\002\055\005\000\002\055\003\000\002\055\005\000\002" +
    "\055\003\000\002\055\004\000\002\055\003\000\002\055" +
    "\004\000\002\055\003\000\002\055\005\000\002\055\004" +
    "\000\002\055\004\000\002\055\003\000\002\057\005\000" +
    "\002\057\006\000\002\042\007\000\002\042\005\000\002" +
    "\061\007\000\002\060\005\000\002\060\003\000\002\017" +
    "\006\000\002\017\003\000\002\017\003\000\002\020\006" +
    "\000\002\020\006\000\002\021\003\000\002\021\003\000" +
    "\002\036\004\000\002\036\003\000\002\037\011\000\002" +
    "\040\006\000\002\031\011\000\002\054\004\000\002\054" +
    "\003\000\002\032\004\000\002\032\003\000\002\053\006" +
    "\000\002\053\005\000\002\053\007\000\002\033\007\000" +
    "\002\033\006\000\002\033\010\000\002\033\006\000\002" +
    "\033\007\000\002\033\005\000\002\034\004\000\002\034" +
    "\004\000\002\035\005\000\002\035\004\000\002\026\003" +
    "\000\002\026\003\000\002\023\005\000\002\022\010\000" +
    "\002\045\004\000\002\025\003\000\002\025\003\000\002" +
    "\025\003\000\002\025\003\000\002\025\003\000\002\025" +
    "\003\000\002\025\003\000\002\025\003\000\002\024\003" +
    "\000\002\024\003\000\002\024\004\000\002\041\005\000" +
    "\002\044\003\000\002\044\003\000\002\044\003\000\002" +
    "\044\003\000\002\051\003\000\002\050\006\000\002\050" +
    "\005\000\002\050\004\000\002\050\003\000\002\047\005" +
    "\000\002\047\004\000\002\047\005\000\002\047\004\000" +
    "\002\047\005\000\002\047\004\000\002\047\005\000\002" +
    "\047\004\000\002\047\005\000\002\047\004\000\002\052" +
    "\003\000\002\052\003\000\002\052\003\000\002\052\003" +
    "\000\002\052\003\000\002\012\003\000\002\012\003\000" +
=======
    "\000\234\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\003\000\002\003\003\000\002\013\003" +
    "\000\002\013\003\000\002\013\003\000\002\013\004\000" +
    "\002\013\004\000\002\013\004\000\002\013\004\000\002" +
    "\013\004\000\002\013\004\000\002\004\006\000\002\004" +
    "\010\000\002\004\004\000\002\004\006\000\002\004\007" +
    "\000\002\007\003\000\002\007\003\000\002\007\003\000" +
    "\002\007\004\000\002\010\005\000\002\010\003\000\002" +
    "\010\007\000\002\010\005\000\002\056\003\000\002\056" +
    "\003\000\002\056\003\000\002\005\006\000\002\006\011" +
    "\000\002\006\010\000\002\006\007\000\002\006\010\000" +
    "\002\011\003\000\002\011\004\000\002\014\005\000\002" +
    "\014\003\000\002\016\004\000\002\015\004\000\002\015" +
    "\003\000\002\015\004\000\002\015\003\000\002\015\004" +
    "\000\002\015\003\000\002\015\005\000\002\015\004\000" +
    "\002\015\005\000\002\015\003\000\002\015\005\000\002" +
    "\015\003\000\002\015\004\000\002\015\003\000\002\015" +
    "\004\000\002\015\003\000\002\015\005\000\002\015\004" +
    "\000\002\015\004\000\002\015\003\000\002\055\004\000" +
    "\002\055\003\000\002\055\005\000\002\055\004\000\002" +
    "\055\007\000\002\055\006\000\002\055\005\000\002\055" +
    "\003\000\002\055\005\000\002\055\003\000\002\055\004" +
    "\000\002\055\003\000\002\055\004\000\002\055\003\000" +
    "\002\055\005\000\002\055\004\000\002\055\004\000\002" +
    "\055\003\000\002\057\005\000\002\057\006\000\002\042" +
    "\007\000\002\042\005\000\002\060\005\000\002\060\003" +
    "\000\002\017\006\000\002\017\003\000\002\017\003\000" +
    "\002\020\006\000\002\020\006\000\002\021\003\000\002" +
    "\021\003\000\002\036\004\000\002\036\003\000\002\037" +
    "\011\000\002\040\006\000\002\031\011\000\002\054\004" +
    "\000\002\054\003\000\002\032\004\000\002\032\003\000" +
    "\002\053\006\000\002\053\005\000\002\053\007\000\002" +
    "\033\007\000\002\033\006\000\002\033\010\000\002\033" +
    "\006\000\002\033\007\000\002\033\005\000\002\034\004" +
    "\000\002\034\004\000\002\035\005\000\002\035\004\000" +
    "\002\026\003\000\002\026\003\000\002\023\005\000\002" +
    "\022\010\000\002\045\004\000\002\025\003\000\002\025" +
    "\003\000\002\025\003\000\002\025\003\000\002\025\003" +
    "\000\002\025\003\000\002\024\003\000\002\024\003\000" +
    "\002\041\005\000\002\044\003\000\002\044\003\000\002" +
    "\044\003\000\002\044\003\000\002\051\003\000\002\050" +
    "\004\000\002\050\003\000\002\050\007\000\002\050\006" +
    "\000\002\050\006\000\002\050\005\000\002\050\005\000" +
    "\002\050\004\000\002\050\003\000\002\047\004\000\002" +
    "\047\004\000\002\047\004\000\002\047\004\000\002\047" +
    "\004\000\002\052\003\000\002\052\003\000\002\052\003" +
    "\000\002\052\003\000\002\052\003\000\002\012\003\000" +
>>>>>>> parent of e8d340d... version 3.2
    "\002\012\003\000\002\012\003\000\002\012\003\000\002" +
    "\012\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
<<<<<<< HEAD
    "\000\u0121\000\022\003\022\047\016\050\017\057\012\060" +
    "\014\062\021\064\011\072\010\001\002\000\024\002\ufffe" +
    "\003\022\047\016\050\017\057\012\060\014\062\021\064" +
    "\011\072\010\001\002\000\004\014\150\001\002\000\024" +
    "\002\ufffa\003\ufffa\047\ufffa\050\ufffa\057\ufffa\060\ufffa\062" +
    "\ufffa\064\ufffa\072\ufffa\001\002\000\024\002\ufffc\003\ufffc" +
    "\047\ufffc\050\ufffc\057\ufffc\060\ufffc\062\ufffc\064\ufffc\072" +
    "\ufffc\001\002\000\012\016\136\017\142\020\141\021\137" +
    "\001\002\000\004\072\135\001\002\000\004\072\uffef\001" +
    "\002\000\004\002\134\001\002\000\004\072\ufff0\001\002" +
    "\000\004\072\133\001\002\000\006\011\124\072\127\001" +
    "\002\000\012\047\123\057\012\060\014\062\021\001\002" +
    "\000\012\006\033\014\uffdc\070\032\071\031\001\002\000" +
    "\004\072\ufff1\001\002\000\010\015\030\023\026\070\027" +
    "\001\002\000\004\002\ufffd\001\002\000\004\002\000\001" +
    "\002\000\024\002\ufffb\003\ufffb\047\ufffb\050\ufffb\057\ufffb" +
    "\060\ufffb\062\ufffb\064\ufffb\072\ufffb\001\002\000\024\002" +
    "\ufff8\003\ufff8\047\ufff8\050\ufff8\057\ufff8\060\ufff8\062\ufff8" +
    "\064\ufff8\072\ufff8\001\002\000\024\002\ufff9\003\ufff9\047" +
    "\ufff9\050\ufff9\057\ufff9\060\ufff9\062\ufff9\064\ufff9\072\ufff9" +
    "\001\002\000\024\002\ufff7\003\ufff7\047\ufff7\050\ufff7\057" +
    "\ufff7\060\ufff7\062\ufff7\064\ufff7\072\ufff7\001\002\000\004" +
    "\072\105\001\002\000\070\002\ufff4\003\ufff4\007\ufff4\010" +
    "\ufff4\011\ufff4\012\ufff4\013\ufff4\014\ufff4\023\ufff4\041\ufff4" +
    "\042\ufff4\043\ufff4\044\ufff4\047\ufff4\050\ufff4\055\ufff4\056" +
    "\ufff4\057\ufff4\060\ufff4\061\ufff4\062\ufff4\063\ufff4\064\ufff4" +
    "\065\ufff4\066\ufff4\067\ufff4\072\ufff4\001\002\000\032\007" +
    "\046\010\050\011\054\012\051\013\042\014\047\035\036" +
    "\041\035\042\040\043\034\044\041\072\052\001\002\000" +
    "\034\007\uff5b\010\uff5b\011\uff5b\012\uff5b\013\uff5b\015\uff5b" +
    "\023\uff5b\045\uff5b\046\uff5b\051\uff5b\052\uff5b\070\uff5b\071" +
    "\uff5b\001\002\000\034\007\uff5c\010\uff5c\011\uff5c\012\uff5c" +
    "\013\uff5c\015\uff5c\023\uff5c\045\uff5c\046\uff5c\051\uff5c\052" +
    "\uff5c\070\uff5c\071\uff5c\001\002\000\010\015\uffe8\070\uffe8" +
    "\071\uffe8\001\002\000\006\070\104\071\103\001\002\000" +
    "\034\007\uff5e\010\uff5e\011\uff5e\012\uff5e\013\uff5e\015\uff5e" +
    "\023\uff5e\045\uff5e\046\uff5e\051\uff5e\052\uff5e\070\uff5e\071" +
    "\uff5e\001\002\000\034\007\uff5a\010\uff5a\011\uff5a\012\uff5a" +
    "\013\uff5a\015\uff5a\023\uff5a\045\uff5a\046\uff5a\051\uff5a\052" +
    "\uff5a\070\uff5a\071\uff5a\001\002\000\014\041\035\042\040" +
    "\043\034\044\041\072\052\001\002\000\022\015\uff6e\023" +
    "\uff6e\045\uff6e\046\uff6e\051\uff6e\052\uff6e\070\uff6e\071\uff6e" +
    "\001\002\000\034\007\uff59\010\uff59\011\uff59\012\uff59\013" +
    "\uff59\015\uff59\023\uff59\045\uff59\046\uff59\051\uff59\052\uff59" +
    "\070\uff59\071\uff59\001\002\000\010\015\uffe7\070\uffe7\071" +
    "\uffe7\001\002\000\014\041\035\042\040\043\034\044\041" +
    "\072\052\001\002\000\030\007\046\010\050\011\054\012" +
    "\051\013\042\014\047\041\035\042\040\043\034\044\041" +
    "\072\052\001\002\000\014\041\035\042\040\043\034\044" +
    "\041\072\052\001\002\000\014\041\035\042\040\043\034" +
    "\044\041\072\052\001\002\000\036\007\uff5d\010\uff5d\011" +
    "\uff5d\012\uff5d\013\uff5d\014\060\015\uff5d\023\uff5d\045\uff5d" +
    "\046\uff5d\051\uff5d\052\uff5d\070\uff5d\071\uff5d\001\002\000" +
    "\022\007\046\010\050\011\054\012\051\013\042\015\uffe6" +
    "\070\uffe6\071\uffe6\001\002\000\014\041\035\042\040\043" +
    "\034\044\041\072\052\001\002\000\034\007\046\010\050" +
    "\011\054\012\051\013\042\015\uff68\023\uff68\045\uff68\046" +
    "\uff68\051\uff68\052\uff68\070\uff68\071\uff68\001\002\000\022" +
    "\015\uff69\023\uff69\045\uff69\046\uff69\051\uff69\052\uff69\070" +
    "\uff69\071\uff69\001\002\000\022\015\uff6f\023\uff6f\045\uff6f" +
    "\046\uff6f\051\uff6f\052\uff6f\070\uff6f\071\uff6f\001\002\000" +
    "\034\007\046\010\050\011\054\012\051\013\042\014\047" +
    "\015\061\035\036\041\035\042\040\043\034\044\041\072" +
    "\052\001\002\000\034\007\uffab\010\uffab\011\uffab\012\uffab" +
    "\013\uffab\015\uffab\023\uffab\045\uffab\046\uffab\051\uffab\052" +
    "\uffab\070\uffab\071\uffab\001\002\000\004\015\066\001\002" +
    "\000\006\015\uffa5\071\064\001\002\000\032\007\046\010" +
    "\050\011\054\012\051\013\042\014\047\035\036\041\035" +
    "\042\040\043\034\044\041\072\052\001\002\000\004\015" +
    "\uffa6\001\002\000\034\007\uffaa\010\uffaa\011\uffaa\012\uffaa" +
    "\013\uffaa\015\uffaa\023\uffaa\045\uffaa\046\uffaa\051\uffaa\052" +
    "\uffaa\070\uffaa\071\uffaa\001\002\000\034\007\046\010\050" +
    "\011\054\012\051\013\042\015\uff66\023\uff66\045\uff66\046" +
    "\uff66\051\uff66\052\uff66\070\uff66\071\uff66\001\002\000\022" +
    "\015\uff67\023\uff67\045\uff67\046\uff67\051\uff67\052\uff67\070" +
    "\uff67\071\uff67\001\002\000\034\007\046\010\050\011\054" +
    "\012\051\013\042\015\uff6a\023\uff6a\045\uff6a\046\uff6a\051" +
    "\uff6a\052\uff6a\070\uff6a\071\uff6a\001\002\000\022\015\uff6b" +
    "\023\uff6b\045\uff6b\046\uff6b\051\uff6b\052\uff6b\070\uff6b\071" +
    "\uff6b\001\002\000\004\015\075\001\002\000\014\007\046" +
    "\010\050\011\054\012\051\013\042\001\002\000\050\007" +
    "\046\010\050\011\054\012\051\013\042\014\047\015\uff70" +
    "\023\uff70\041\035\042\040\043\034\044\041\045\uff70\046" +
    "\uff70\051\uff70\052\uff70\070\uff70\071\uff70\072\052\001\002" +
    "\000\022\015\uff71\023\uff71\045\uff71\046\uff71\051\uff71\052" +
    "\uff71\070\uff71\071\uff71\001\002\000\034\007\046\010\050" +
    "\011\054\012\051\013\042\015\uff6c\023\uff6c\045\uff6c\046" +
    "\uff6c\051\uff6c\052\uff6c\070\uff6c\071\uff6c\001\002\000\022" +
    "\015\uff6d\023\uff6d\045\uff6d\046\uff6d\051\uff6d\052\uff6d\070" +
    "\uff6d\071\uff6d\001\002\000\034\007\046\010\050\011\054" +
    "\012\051\013\042\015\uff64\023\uff64\045\uff64\046\uff64\051" +
    "\uff64\052\uff64\070\uff64\071\uff64\001\002\000\022\015\uff65" +
    "\023\uff65\045\uff65\046\uff65\051\uff65\052\uff65\070\uff65\071" +
    "\uff65\001\002\000\004\072\105\001\002\000\070\002\ufff3" +
    "\003\ufff3\007\ufff3\010\ufff3\011\ufff3\012\ufff3\013\ufff3\014" +
    "\ufff3\023\ufff3\041\ufff3\042\ufff3\043\ufff3\044\ufff3\047\ufff3" +
    "\050\ufff3\055\ufff3\056\ufff3\057\ufff3\060\ufff3\061\ufff3\062" +
    "\ufff3\063\ufff3\064\ufff3\065\ufff3\066\ufff3\067\ufff3\072\ufff3" +
    "\001\002\000\012\003\111\006\112\070\uffec\071\110\001" +
    "\002\000\004\070\107\001\002\000\070\002\ufff5\003\ufff5" +
    "\007\ufff5\010\ufff5\011\ufff5\012\ufff5\013\ufff5\014\ufff5\023" +
    "\ufff5\041\ufff5\042\ufff5\043\ufff5\044\ufff5\047\ufff5\050\ufff5" +
    "\055\ufff5\056\ufff5\057\ufff5\060\ufff5\061\ufff5\062\ufff5\063" +
    "\ufff5\064\ufff5\065\ufff5\066\ufff5\067\ufff5\072\ufff5\001\002" +
    "\000\004\072\105\001\002\000\004\072\105\001\002\000" +
    "\032\007\046\010\050\011\054\012\051\013\042\014\047" +
    "\035\036\041\035\042\040\043\034\044\041\072\052\001" +
    "\002\000\006\070\uffed\071\114\001\002\000\004\072\105" +
    "\001\002\000\004\070\uffeb\001\002\000\004\070\uffe9\001" +
    "\002\000\004\070\uffea\001\002\000\004\070\121\001\002" +
    "\000\070\002\ufff6\003\ufff6\007\ufff6\010\ufff6\011\ufff6\012" +
    "\ufff6\013\ufff6\014\ufff6\023\ufff6\041\ufff6\042\ufff6\043\ufff6" +
    "\044\ufff6\047\ufff6\050\ufff6\055\ufff6\056\ufff6\057\ufff6\060" +
    "\ufff6\061\ufff6\062\ufff6\063\ufff6\064\ufff6\065\ufff6\066\ufff6" +
    "\067\ufff6\072\ufff6\001\002\000\004\072\105\001\002\000" +
    "\004\011\124\001\002\000\004\072\uffee\001\002\000\004" +
    "\070\126\001\002\000\070\002\uffe5\003\uffe5\007\uffe5\010" +
    "\uffe5\011\uffe5\012\uffe5\013\uffe5\014\uffe5\023\uffe5\041\uffe5" +
    "\042\uffe5\043\uffe5\044\uffe5\047\uffe5\050\uffe5\055\uffe5\056" +
    "\uffe5\057\uffe5\060\uffe5\061\uffe5\062\uffe5\063\uffe5\064\uffe5" +
    "\065\uffe5\066\uffe5\067\uffe5\072\uffe5\001\002\000\004\006" +
    "\130\001\002\000\004\040\131\001\002\000\004\070\132" +
    "\001\002\000\070\002\ufff2\003\ufff2\007\ufff2\010\ufff2\011" +
    "\ufff2\012\ufff2\013\ufff2\014\ufff2\023\ufff2\041\ufff2\042\ufff2" +
    "\043\ufff2\044\ufff2\047\ufff2\050\ufff2\055\ufff2\056\ufff2\057" +
    "\ufff2\060\ufff2\061\ufff2\062\ufff2\063\ufff2\064\ufff2\065\ufff2" +
    "\066\ufff2\067\ufff2\072\ufff2\001\002\000\014\006\uffd8\014" +
    "\uffd8\015\uffd8\070\uffd8\071\uffd8\001\002\000\004\002\001" +
    "\001\002\000\004\014\uffdb\001\002\000\010\034\uff76\042" +
    "\uff76\072\uff76\001\002\000\010\034\uff73\042\uff73\072\uff73" +
    "\001\002\000\010\034\143\042\145\072\146\001\002\000" +
    "\010\034\uff74\042\uff74\072\uff74\001\002\000\010\034\uff75" +
    "\042\uff75\072\uff75\001\002\000\004\072\147\001\002\000" +
    "\006\002\uff77\070\uff77\001\002\000\030\002\uff7a\015\uff7a" +
    "\024\uff7a\025\uff7a\026\uff7a\027\uff7a\030\uff7a\031\uff7a\032" +
    "\uff7a\033\uff7a\070\uff7a\001\002\000\030\002\uff79\015\uff79" +
    "\024\uff79\025\uff79\026\uff79\027\uff79\030\uff79\031\uff79\032" +
    "\uff79\033\uff79\070\uff79\001\002\000\030\002\uff78\015\uff78" +
    "\024\uff78\025\uff78\026\uff78\027\uff78\030\uff78\031\uff78\032" +
    "\uff78\033\uff78\070\uff78\001\002\000\016\003\152\015\151" +
    "\047\123\057\012\060\014\062\021\001\002\000\006\003" +
    "\u011c\022\u011d\001\002\000\006\015\u0117\022\u0118\001\002" +
    "\000\006\015\uffd9\071\u0115\001\002\000\004\015\155\001" +
    "\002\000\006\003\156\022\157\001\002\000\060\007\046" +
    "\010\050\011\204\012\051\013\042\014\206\041\035\042" +
    "\040\043\034\044\041\047\016\050\017\055\166\056\173" +
    "\057\012\060\014\061\175\062\021\063\205\065\212\066" +
    "\174\067\200\072\213\001\002\000\062\007\046\010\050" +
    "\011\204\012\051\013\042\014\206\023\203\041\035\042" +
    "\040\043\034\044\041\047\016\050\017\055\166\056\173" +
    "\057\012\060\014\061\175\062\021\063\205\065\212\066" +
    "\174\067\200\072\213\001\002\000\016\007\uff59\010\uff59" +
    "\011\uff59\012\uff59\013\uff59\070\u0111\001\002\000\072\007" +
    "\uffa3\010\uffa3\011\uffa3\012\uffa3\013\uffa3\014\uffa3\023\uffa3" +
    "\041\uffa3\042\uffa3\043\uffa3\044\uffa3\045\uffa3\046\uffa3\047" +
    "\uffa3\050\uffa3\051\uffa3\052\uffa3\055\uffa3\056\uffa3\057\uffa3" +
    "\060\uffa3\061\uffa3\062\uffa3\063\uffa3\065\uffa3\066\uffa3\067" +
    "\uffa3\072\uffa3\001\002\000\004\022\u010e\001\002\000\006" +
    "\023\uffc8\070\u010c\001\002\000\004\014\u0100\001\002\000" +
    "\062\007\046\010\050\011\204\012\051\013\042\014\206" +
    "\023\uffd4\041\035\042\040\043\034\044\041\047\016\050" +
    "\017\055\166\056\173\057\012\060\014\061\175\062\021" +
    "\063\205\065\212\066\174\067\200\072\213\001\002\000" +
    "\004\014\uff9f\001\002\000\004\070\375\001\002\000\072" +
    "\007\uffa2\010\uffa2\011\uffa2\012\uffa2\013\uffa2\014\uffa2\023" +
    "\uffa2\041\uffa2\042\uffa2\043\uffa2\044\uffa2\045\uffa2\046\uffa2" +
    "\047\uffa2\050\uffa2\051\uffa2\052\uffa2\055\uffa2\056\uffa2\057" +
    "\uffa2\060\uffa2\061\uffa2\062\uffa2\063\uffa2\065\uffa2\066\uffa2" +
    "\067\uffa2\072\uffa2\001\002\000\062\007\046\010\050\011" +
    "\204\012\051\013\042\014\206\023\uffc4\041\035\042\040" +
    "\043\034\044\041\047\016\050\017\055\166\056\173\057" +
    "\012\060\014\061\175\062\021\063\205\065\212\066\174" +
    "\067\200\072\213\001\002\000\010\006\033\070\032\071" +
    "\031\001\002\000\004\014\353\001\002\000\004\014\347" +
    "\001\002\000\012\034\143\042\145\070\344\072\146\001" +
    "\002\000\004\023\343\001\002\000\062\007\046\010\050" +
    "\011\204\012\051\013\042\014\206\023\uffd2\041\035\042" +
    "\040\043\034\044\041\047\016\050\017\055\166\056\173" +
    "\057\012\060\014\061\175\062\021\063\205\065\212\066" +
    "\174\067\200\072\213\001\002\000\004\014\336\001\002" +
    "\000\062\007\046\010\050\011\204\012\051\013\042\014" +
    "\206\023\uffd6\041\035\042\040\043\034\044\041\047\016" +
    "\050\017\055\166\056\173\057\012\060\014\061\175\062" +
    "\021\063\205\065\212\066\174\067\200\072\213\001\002" +
    "\000\074\007\uff9c\010\uff9c\011\uff9c\012\uff9c\013\uff9c\014" +
    "\uff9c\023\uff9c\041\uff9c\042\uff9c\043\uff9c\044\uff9c\045\uff9c" +
    "\046\uff9c\047\uff9c\050\uff9c\051\uff9c\052\uff9c\054\331\055" +
    "\uff9c\056\uff9c\057\uff9c\060\uff9c\061\uff9c\062\uff9c\063\uff9c" +
    "\065\uff9c\066\uff9c\067\uff9c\072\uff9c\001\002\000\024\002" +
    "\uffe1\003\uffe1\047\uffe1\050\uffe1\057\uffe1\060\uffe1\062\uffe1" +
    "\064\uffe1\072\uffe1\001\002\000\014\041\035\042\040\043" +
    "\034\044\041\072\323\001\002\000\004\014\231\001\002" +
    "\000\032\007\046\010\050\011\054\012\051\013\042\014" +
    "\047\015\227\041\035\042\040\043\034\044\041\072\052" +
    "\001\002\000\062\007\046\010\050\011\204\012\051\013" +
    "\042\014\206\023\uffc6\041\035\042\040\043\034\044\041" +
    "\047\016\050\017\055\166\056\173\057\012\060\014\061" +
    "\175\062\021\063\205\065\212\066\174\067\200\072\213" +
    "\001\002\000\004\070\224\001\002\000\062\007\046\010" +
    "\050\011\204\012\051\013\042\014\206\023\uffc0\041\035" +
    "\042\040\043\034\044\041\047\016\050\017\055\166\056" +
    "\173\057\012\060\014\061\175\062\021\063\205\065\212" +
    "\066\174\067\200\072\213\001\002\000\004\014\uff9e\001" +
    "\002\000\034\004\214\005\216\006\217\007\uff5d\010\uff5d" +
    "\011\uff5d\012\uff5d\013\uff5d\014\060\016\136\017\142\020" +
    "\141\021\137\001\002\000\020\015\uff87\023\uff87\045\uff87" +
    "\046\uff87\051\uff87\052\uff87\070\uff87\001\002\000\020\015" +
    "\uff83\023\uff83\045\uff83\046\uff83\051\uff83\052\uff83\070\uff83" +
    "\001\002\000\020\015\uff86\023\uff86\045\uff86\046\uff86\051" +
    "\uff86\052\uff86\070\uff86\001\002\000\032\007\046\010\050" +
    "\011\054\012\051\013\042\014\047\035\036\041\035\042" +
    "\040\043\034\044\041\072\052\001\002\000\004\070\221" +
    "\001\002\000\062\007\046\010\050\011\204\012\051\013" +
    "\042\014\206\023\uffce\041\035\042\040\043\034\044\041" +
    "\047\016\050\017\055\166\056\173\057\012\060\014\061" +
    "\175\062\021\063\205\065\212\066\174\067\200\072\213" +
    "\001\002\000\004\023\uffcf\001\002\000\004\023\uffc1\001" +
    "\002\000\062\007\046\010\050\011\204\012\051\013\042" +
    "\014\206\023\uffd0\041\035\042\040\043\034\044\041\047" +
    "\016\050\017\055\166\056\173\057\012\060\014\061\175" +
    "\062\021\063\205\065\212\066\174\067\200\072\213\001" +
    "\002\000\004\023\uffd1\001\002\000\004\023\uffc7\001\002" +
    "\000\004\070\230\001\002\000\072\007\uffa8\010\uffa8\011" +
    "\uffa8\012\uffa8\013\uffa8\014\uffa8\023\uffa8\041\uffa8\042\uffa8" +
    "\043\uffa8\044\uffa8\045\uffa8\046\uffa8\047\uffa8\050\uffa8\051" +
    "\uffa8\052\uffa8\055\uffa8\056\uffa8\057\uffa8\060\uffa8\061\uffa8" +
    "\062\uffa8\063\uffa8\065\uffa8\066\uffa8\067\uffa8\072\uffa8\001" +
    "\002\000\010\034\143\042\145\072\146\001\002\000\004" +
    "\015\233\001\002\000\004\022\234\001\002\000\004\046" +
    "\236\001\002\000\006\023\uff97\052\315\001\002\000\004" +
    "\042\243\001\002\000\004\023\242\001\002\000\010\023" +
    "\uff95\046\236\052\uff95\001\002\000\006\023\uff96\052\uff96" +
    "\001\002\000\072\007\uff99\010\uff99\011\uff99\012\uff99\013" +
    "\uff99\014\uff99\023\uff99\041\uff99\042\uff99\043\uff99\044\uff99" +
    "\045\uff99\046\uff99\047\uff99\050\uff99\051\uff99\052\uff99\055" +
    "\uff99\056\uff99\057\uff99\060\uff99\061\uff99\062\uff99\063\uff99" +
    "\065\uff99\066\uff99\067\uff99\072\uff99\001\002\000\004\073" +
    "\244\001\002\000\060\007\046\010\050\011\253\012\051" +
    "\013\042\014\206\023\uff8c\041\035\042\040\043\034\044" +
    "\041\045\257\046\uff8c\051\256\052\uff8c\055\166\056\173" +
    "\061\175\063\205\065\212\066\174\067\200\072\262\001" +
    "\002\000\016\007\uff59\010\uff59\011\uff59\012\uff59\013\uff59" +
    "\070\313\001\002\000\016\023\uffb4\045\uffb4\046\uffb4\051" +
    "\uffb4\052\uffb4\070\311\001\002\000\016\023\uffb6\045\uffb6" +
    "\046\uffb6\051\uffb6\052\uffb6\070\307\001\002\000\060\007" +
    "\046\010\050\011\253\012\051\013\042\014\206\023\uffb0" +
    "\041\035\042\040\043\034\044\041\045\uffb0\046\uffb0\051" +
    "\uffb0\052\uffb0\055\166\056\173\061\175\063\205\065\212" +
    "\066\174\067\200\072\262\001\002\000\060\007\046\010" +
    "\050\011\253\012\051\013\042\014\206\023\uffbe\041\035" +
    "\042\040\043\034\044\041\045\uffbe\046\uffbe\051\uffbe\052" +
    "\uffbe\055\166\056\173\061\175\063\205\065\212\066\174" +
    "\067\200\072\262\001\002\000\012\023\uff8e\046\uff8e\052" +
    "\uff8e\061\175\001\002\000\014\041\035\042\040\043\034" +
    "\044\041\072\277\001\002\000\060\007\046\010\050\011" +
    "\253\012\051\013\042\014\206\023\uffb2\041\035\042\040" +
    "\043\034\044\041\045\uffb2\046\uffb2\051\uffb2\052\uffb2\055" +
    "\166\056\173\061\175\063\205\065\212\066\174\067\200" +
    "\072\262\001\002\000\004\070\274\001\002\000\004\070" +
    "\273\001\002\000\004\070\272\001\002\000\060\007\046" +
    "\010\050\011\253\012\051\013\042\014\206\023\uffac\041" +
    "\035\042\040\043\034\044\041\045\uffac\046\uffac\051\uffac" +
    "\052\uffac\055\166\056\173\061\175\063\205\065\212\066" +
    "\174\067\200\072\262\001\002\000\014\023\uff90\045\257" +
    "\046\uff90\051\256\052\uff90\001\002\000\034\004\214\005" +
    "\216\006\263\007\uff5d\010\uff5d\011\uff5d\012\uff5d\013\uff5d" +
    "\014\060\016\136\017\142\020\141\021\137\001\002\000" +
    "\032\007\046\010\050\011\054\012\051\013\042\014\047" +
    "\035\036\041\035\042\040\043\034\044\041\072\052\001" +
    "\002\000\004\070\265\001\002\000\060\007\046\010\050" +
    "\011\253\012\051\013\042\014\206\023\uffba\041\035\042" +
    "\040\043\034\044\041\045\uffba\046\uffba\051\uffba\052\uffba" +
    "\055\166\056\173\061\175\063\205\065\212\066\174\067" +
    "\200\072\262\001\002\000\014\023\uffbb\045\uffbb\046\uffbb" +
    "\051\uffbb\052\uffbb\001\002\000\012\023\uff91\046\uff91\052" +
    "\uff91\061\175\001\002\000\010\023\uff8f\046\uff8f\052\uff8f" +
    "\001\002\000\014\023\uffad\045\uffad\046\uffad\051\uffad\052" +
    "\uffad\001\002\000\012\023\uff8b\046\uff8b\052\uff8b\061\uff8b" +
    "\001\002\000\012\023\uff8a\046\uff8a\052\uff8a\061\uff8a\001" +
    "\002\000\060\007\046\010\050\011\253\012\051\013\042" +
    "\014\206\023\uffbc\041\035\042\040\043\034\044\041\045" +
    "\uffbc\046\uffbc\051\uffbc\052\uffbc\055\166\056\173\061\175" +
    "\063\205\065\212\066\174\067\200\072\262\001\002\000" +
    "\014\023\uffbd\045\uffbd\046\uffbd\051\uffbd\052\uffbd\001\002" +
    "\000\014\023\uffb3\045\uffb3\046\uffb3\051\uffb3\052\uffb3\001" +
    "\002\000\034\006\300\007\uff5d\010\uff5d\011\uff5d\012\uff5d" +
    "\013\uff5d\014\060\023\uff5d\045\uff5d\046\uff5d\051\uff5d\052" +
    "\uff5d\070\uff5d\001\002\000\032\007\046\010\050\011\054" +
    "\012\051\013\042\014\047\035\036\041\035\042\040\043" +
    "\034\044\041\072\052\001\002\000\004\070\302\001\002" +
    "\000\060\007\046\010\050\011\253\012\051\013\042\014" +
    "\206\023\uffb8\041\035\042\040\043\034\044\041\045\uffb8" +
    "\046\uffb8\051\uffb8\052\uffb8\055\166\056\173\061\175\063" +
    "\205\065\212\066\174\067\200\072\262\001\002\000\014" +
    "\023\uffb9\045\uffb9\046\uffb9\051\uffb9\052\uffb9\001\002\000" +
    "\010\023\uff8d\046\uff8d\052\uff8d\001\002\000\014\023\uffbf" +
    "\045\uffbf\046\uffbf\051\uffbf\052\uffbf\001\002\000\014\023" +
    "\uffb1\045\uffb1\046\uffb1\051\uffb1\052\uffb1\001\002\000\046" +
    "\007\046\010\050\011\253\012\051\013\042\014\206\041" +
    "\035\042\040\043\034\044\041\055\166\056\173\061\175" +
    "\063\205\065\212\066\174\067\200\072\262\001\002\000" +
    "\014\023\uffb7\045\uffb7\046\uffb7\051\uffb7\052\uffb7\001\002" +
    "\000\046\007\046\010\050\011\253\012\051\013\042\014" +
    "\206\041\035\042\040\043\034\044\041\055\166\056\173" +
    "\061\175\063\205\065\212\066\174\067\200\072\262\001" +
    "\002\000\014\023\uffb5\045\uffb5\046\uffb5\051\uffb5\052\uffb5" +
    "\001\002\000\060\007\046\010\050\011\253\012\051\013" +
    "\042\014\206\023\uffae\041\035\042\040\043\034\044\041" +
    "\045\uffae\046\uffae\051\uffae\052\uffae\055\166\056\173\061" +
    "\175\063\205\065\212\066\174\067\200\072\262\001\002" +
    "\000\014\023\uffaf\045\uffaf\046\uffaf\051\uffaf\052\uffaf\001" +
    "\002\000\004\073\317\001\002\000\004\023\uff98\001\002" +
    "\000\046\007\046\010\050\011\253\012\051\013\042\014" +
    "\206\041\035\042\040\043\034\044\041\055\166\056\173" +
    "\061\175\063\205\065\212\066\174\067\200\072\262\001" +
    "\002\000\010\023\uff93\045\257\051\256\001\002\000\006" +
    "\023\uff94\061\175\001\002\000\004\023\uff92\001\002\000" +
    "\024\006\324\007\uff5d\010\uff5d\011\uff5d\012\uff5d\013\uff5d" +
    "\014\060\023\uff5d\070\uff5d\001\002\000\032\007\046\010" +
    "\050\011\054\012\051\013\042\014\047\035\036\041\035" +
    "\042\040\043\034\044\041\072\052\001\002\000\004\070" +
    "\326\001\002\000\062\007\046\010\050\011\204\012\051" +
    "\013\042\014\206\023\uffcc\041\035\042\040\043\034\044" +
    "\041\047\016\050\017\055\166\056\173\057\012\060\014" +
    "\061\175\062\021\063\205\065\212\066\174\067\200\072" +
    "\213\001\002\000\004\023\uffcd\001\002\000\072\007\uff9d" +
    "\010\uff9d\011\uff9d\012\uff9d\013\uff9d\014\uff9d\023\uff9d\041" +
    "\uff9d\042\uff9d\043\uff9d\044\uff9d\045\uff9d\046\uff9d\047\uff9d" +
    "\050\uff9d\051\uff9d\052\uff9d\055\uff9d\056\uff9d\057\uff9d\060" +
    "\uff9d\061\uff9d\062\uff9d\063\uff9d\065\uff9d\066\uff9d\067\uff9d" +
    "\072\uff9d\001\002\000\004\022\332\001\002\000\060\007" +
    "\046\010\050\011\204\012\051\013\042\014\206\041\035" +
    "\042\040\043\034\044\041\047\016\050\017\055\166\056" +
    "\173\057\012\060\014\061\175\062\021\063\205\065\212" +
    "\066\174\067\200\072\213\001\002\000\004\023\334\001" +
    "\002\000\072\007\uff9a\010\uff9a\011\uff9a\012\uff9a\013\uff9a" +
    "\014\uff9a\023\uff9a\041\uff9a\042\uff9a\043\uff9a\044\uff9a\045" +
    "\uff9a\046\uff9a\047\uff9a\050\uff9a\051\uff9a\052\uff9a\055\uff9a" +
    "\056\uff9a\057\uff9a\060\uff9a\061\uff9a\062\uff9a\063\uff9a\065" +
    "\uff9a\066\uff9a\067\uff9a\072\uff9a\001\002\000\004\023\uffd7" +
    "\001\002\000\032\007\046\010\050\011\054\012\051\013" +
    "\042\014\047\035\036\041\035\042\040\043\034\044\041" +
    "\072\052\001\002\000\004\015\340\001\002\000\004\070" +
    "\341\001\002\000\072\007\uffa7\010\uffa7\011\uffa7\012\uffa7" +
    "\013\uffa7\014\uffa7\023\uffa7\041\uffa7\042\uffa7\043\uffa7\044" +
    "\uffa7\045\uffa7\046\uffa7\047\uffa7\050\uffa7\051\uffa7\052\uffa7" +
    "\055\uffa7\056\uffa7\057\uffa7\060\uffa7\061\uffa7\062\uffa7\063" +
    "\uffa7\065\uffa7\066\uffa7\067\uffa7\072\uffa7\001\002\000\004" +
    "\023\uffd3\001\002\000\024\002\uffe4\003\uffe4\047\uffe4\050" +
    "\uffe4\057\uffe4\060\uffe4\062\uffe4\064\uffe4\072\uffe4\001\002" +
    "\000\072\007\uff88\010\uff88\011\uff88\012\uff88\013\uff88\014" +
    "\uff88\023\uff88\041\uff88\042\uff88\043\uff88\044\uff88\045\uff88" +
    "\046\uff88\047\uff88\050\uff88\051\uff88\052\uff88\055\uff88\056" +
    "\uff88\057\uff88\060\uff88\061\uff88\062\uff88\063\uff88\065\uff88" +
    "\066\uff88\067\uff88\072\uff88\001\002\000\004\070\346\001" +
    "\002\000\072\007\uff89\010\uff89\011\uff89\012\uff89\013\uff89" +
    "\014\uff89\023\uff89\041\uff89\042\uff89\043\uff89\044\uff89\045" +
    "\uff89\046\uff89\047\uff89\050\uff89\051\uff89\052\uff89\055\uff89" +
    "\056\uff89\057\uff89\060\uff89\061\uff89\062\uff89\063\uff89\065" +
    "\uff89\066\uff89\067\uff89\072\uff89\001\002\000\004\072\350" +
    "\001\002\000\004\015\351\001\002\000\004\070\352\001" +
    "\002\000\072\007\uffa9\010\uffa9\011\uffa9\012\uffa9\013\uffa9" +
    "\014\uffa9\023\uffa9\041\uffa9\042\uffa9\043\uffa9\044\uffa9\045" +
    "\uffa9\046\uffa9\047\uffa9\050\uffa9\051\uffa9\052\uffa9\055\uffa9" +
    "\056\uffa9\057\uffa9\060\uffa9\061\uffa9\062\uffa9\063\uffa9\065" +
    "\uffa9\066\uffa9\067\uffa9\072\uffa9\001\002\000\010\034\143" +
    "\042\145\072\146\001\002\000\022\024\363\025\371\026" +
    "\367\027\366\030\365\031\370\032\372\033\364\001\002" +
    "\000\004\015\356\001\002\000\004\022\357\001\002\000" +
    "\060\007\046\010\050\011\204\012\051\013\042\014\206" +
    "\041\035\042\040\043\034\044\041\047\016\050\017\055" +
    "\166\056\173\057\012\060\014\061\175\062\021\063\205" +
    "\065\212\066\174\067\200\072\213\001\002\000\004\023" +
    "\361\001\002\000\074\007\uff9b\010\uff9b\011\uff9b\012\uff9b" +
    "\013\uff9b\014\uff9b\023\uff9b\041\uff9b\042\uff9b\043\uff9b\044" +
    "\uff9b\045\uff9b\046\uff9b\047\uff9b\050\uff9b\051\uff9b\052\uff9b" +
    "\054\uff9b\055\uff9b\056\uff9b\057\uff9b\060\uff9b\061\uff9b\062" +
    "\uff9b\063\uff9b\065\uff9b\066\uff9b\067\uff9b\072\uff9b\001\002" +
    "\000\010\034\143\042\145\072\146\001\002\000\010\034" +
    "\uff82\042\uff82\072\uff82\001\002\000\010\034\uff7c\042\uff7c" +
    "\072\uff7c\001\002\000\010\034\uff7e\042\uff7e\072\uff7e\001" +
    "\002\000\010\034\uff7f\042\uff7f\072\uff7f\001\002\000\010" +
    "\034\uff80\042\uff80\072\uff80\001\002\000\010\034\uff7d\042" +
    "\uff7d\072\uff7d\001\002\000\010\034\uff81\042\uff81\072\uff81" +
    "\001\002\000\010\034\uff7b\042\uff7b\072\uff7b\001\002\000" +
    "\006\015\uff85\070\uff85\001\002\000\004\023\uffc5\001\002" +
    "\000\062\007\046\010\050\011\204\012\051\013\042\014" +
    "\206\023\uffca\041\035\042\040\043\034\044\041\047\016" +
    "\050\017\055\166\056\173\057\012\060\014\061\175\062" +
    "\021\063\205\065\212\066\174\067\200\072\213\001\002" +
    "\000\004\023\uffcb\001\002\000\004\023\uffd5\001\002\000" +
    "\020\034\143\042\145\047\123\057\012\060\014\062\021" +
    "\072\146\001\002\000\004\015\u010b\001\002\000\004\015" +
    "\u010a\001\002\000\004\072\105\001\002\000\004\070\u0105" +
    "\001\002\000\010\034\143\042\145\072\146\001\002\000" +
    "\004\070\u0107\001\002\000\004\072\u0109\001\002\000\004" +
    "\015\uff84\001\002\000\006\004\214\005\216\001\002\000" +
    "\004\022\uffa1\001\002\000\004\022\uffa0\001\002\000\060" +
    "\007\046\010\050\011\204\012\051\013\042\014\206\041" +
    "\035\042\040\043\034\044\041\047\016\050\017\055\166" +
    "\056\173\057\012\060\014\061\175\062\021\063\205\065" +
    "\212\066\174\067\200\072\213\001\002\000\004\023\uffc9" +
    "\001\002\000\060\007\046\010\050\011\204\012\051\013" +
    "\042\014\206\041\035\042\040\043\034\044\041\047\016" +
    "\050\017\055\166\056\173\057\012\060\014\061\175\062" +
    "\021\063\205\065\212\066\174\067\200\072\213\001\002" +
    "\000\004\023\u0110\001\002\000\072\007\uffa4\010\uffa4\011" +
    "\uffa4\012\uffa4\013\uffa4\014\uffa4\023\uffa4\041\uffa4\042\uffa4" +
    "\043\uffa4\044\uffa4\045\uffa4\046\uffa4\047\uffa4\050\uffa4\051" +
    "\uffa4\052\uffa4\055\uffa4\056\uffa4\057\uffa4\060\uffa4\061\uffa4" +
    "\062\uffa4\063\uffa4\065\uffa4\066\uffa4\067\uffa4\072\uffa4\001" +
    "\002\000\062\007\046\010\050\011\204\012\051\013\042" +
    "\014\206\023\uffc2\041\035\042\040\043\034\044\041\047" +
    "\016\050\017\055\166\056\173\057\012\060\014\061\175" +
    "\062\021\063\205\065\212\066\174\067\200\072\213\001" +
    "\002\000\004\023\uffc3\001\002\000\004\023\u0114\001\002" +
    "\000\024\002\uffdd\003\uffdd\047\uffdd\050\uffdd\057\uffdd\060" +
    "\uffdd\062\uffdd\064\uffdd\072\uffdd\001\002\000\012\047\123" +
    "\057\012\060\014\062\021\001\002\000\004\015\uffda\001" +
    "\002\000\004\022\u011a\001\002\000\004\023\u0119\001\002" +
    "\000\024\002\uffdf\003\uffdf\047\uffdf\050\uffdf\057\uffdf\060" +
    "\uffdf\062\uffdf\064\uffdf\072\uffdf\001\002\000\004\023\u011b" +
    "\001\002\000\024\002\uffe0\003\uffe0\047\uffe0\050\uffe0\057" +
    "\uffe0\060\uffe0\062\uffe0\064\uffe0\072\uffe0\001\002\000\060" +
    "\007\046\010\050\011\204\012\051\013\042\014\206\041" +
    "\035\042\040\043\034\044\041\047\016\050\017\055\166" +
    "\056\173\057\012\060\014\061\175\062\021\063\205\065" +
    "\212\066\174\067\200\072\213\001\002\000\062\007\046" +
    "\010\050\011\204\012\051\013\042\014\206\023\u011f\041" +
    "\035\042\040\043\034\044\041\047\016\050\017\055\166" +
    "\056\173\057\012\060\014\061\175\062\021\063\205\065" +
    "\212\066\174\067\200\072\213\001\002\000\004\023\u0120" +
    "\001\002\000\024\002\uffe2\003\uffe2\047\uffe2\050\uffe2\057" +
    "\uffe2\060\uffe2\062\uffe2\064\uffe2\072\uffe2\001\002\000\024" +
    "\002\uffe3\003\uffe3\047\uffe3\050\uffe3\057\uffe3\060\uffe3\062" +
    "\uffe3\064\uffe3\072\uffe3\001\002\000\004\023\u0122\001\002" +
    "\000\024\002\uffde\003\uffde\047\uffde\050\uffde\057\uffde\060" +
    "\uffde\062\uffde\064\uffde\072\uffde\001\002\000\004\002\uffff" +
    "\001\002" });
=======
    "\000\u0104\000\022\003\022\047\016\050\017\057\012\060" +
    "\014\062\021\064\011\072\010\001\002\000\024\002\ufffe" +
    "\003\022\047\016\050\017\057\012\060\014\062\021\064" +
    "\011\072\010\001\002\000\004\014\156\001\002\000\024" +
    "\002\ufffa\003\ufffa\047\ufffa\050\ufffa\057\ufffa\060\ufffa\062" +
    "\ufffa\064\ufffa\072\ufffa\001\002\000\024\002\ufffc\003\ufffc" +
    "\047\ufffc\050\ufffc\057\ufffc\060\ufffc\062\ufffc\064\ufffc\072" +
    "\ufffc\001\002\000\012\016\146\017\152\020\151\021\147" +
    "\001\002\000\004\072\145\001\002\000\004\072\uffec\001" +
    "\002\000\004\002\144\001\002\000\004\072\uffed\001\002" +
    "\000\004\072\143\001\002\000\006\011\134\072\137\001" +
    "\002\000\012\047\133\057\012\060\014\062\021\001\002" +
    "\000\012\006\036\014\uffde\070\035\071\034\001\002\000" +
    "\004\072\uffee\001\002\000\016\014\030\015\031\022\032" +
    "\023\026\070\027\072\033\001\002\000\004\002\ufffd\001" +
    "\002\000\004\002\000\001\002\000\024\002\ufffb\003\ufffb" +
    "\047\ufffb\050\ufffb\057\ufffb\060\ufffb\062\ufffb\064\ufffb\072" +
    "\ufffb\001\002\000\024\002\ufff7\003\ufff7\047\ufff7\050\ufff7" +
    "\057\ufff7\060\ufff7\062\ufff7\064\ufff7\072\ufff7\001\002\000" +
    "\024\002\ufff9\003\ufff9\047\ufff9\050\ufff9\057\ufff9\060\ufff9" +
    "\062\ufff9\064\ufff9\072\ufff9\001\002\000\024\002\ufff6\003" +
    "\ufff6\047\ufff6\050\ufff6\057\ufff6\060\ufff6\062\ufff6\064\ufff6" +
    "\072\ufff6\001\002\000\024\002\ufff5\003\ufff5\047\ufff5\050" +
    "\ufff5\057\ufff5\060\ufff5\062\ufff5\064\ufff5\072\ufff5\001\002" +
    "\000\024\002\ufff8\003\ufff8\047\ufff8\050\ufff8\057\ufff8\060" +
    "\ufff8\062\ufff8\064\ufff8\072\ufff8\001\002\000\024\002\ufff4" +
    "\003\ufff4\047\ufff4\050\ufff4\057\ufff4\060\ufff4\062\ufff4\064" +
    "\ufff4\072\ufff4\001\002\000\004\072\104\001\002\000\066" +
    "\002\ufff1\003\ufff1\007\ufff1\010\ufff1\011\ufff1\012\ufff1\013" +
    "\ufff1\014\ufff1\023\ufff1\041\ufff1\042\ufff1\043\ufff1\044\ufff1" +
    "\047\ufff1\050\ufff1\055\ufff1\056\ufff1\057\ufff1\060\ufff1\061" +
    "\ufff1\062\ufff1\063\ufff1\064\ufff1\065\ufff1\066\ufff1\072\ufff1" +
    "\001\002\000\032\007\053\010\044\011\057\012\051\013" +
    "\040\014\045\035\043\041\060\042\047\043\056\044\050" +
    "\072\041\001\002\000\010\015\uffe5\070\uffe5\071\uffe5\001" +
    "\002\000\016\014\uff6b\041\060\042\047\043\056\044\050" +
    "\072\062\001\002\000\024\007\uff69\010\uff69\011\uff69\012" +
    "\uff69\013\uff69\014\121\015\uff69\070\uff69\071\uff69\001\002" +
    "\000\050\007\053\010\044\011\057\012\051\013\040\014" +
    "\045\015\uff7c\023\uff7c\041\060\042\047\043\056\044\050" +
    "\045\uff7c\046\uff7c\051\uff7c\052\uff7c\070\uff7c\071\uff7c\072" +
    "\062\001\002\000\010\015\uffe6\070\uffe6\071\uffe6\001\002" +
    "\000\016\014\uff6e\041\060\042\047\043\056\044\050\072" +
    "\062\001\002\000\030\007\053\010\044\011\057\012\051" +
    "\013\040\014\045\041\060\042\047\043\056\044\050\072" +
    "\062\001\002\000\006\070\103\071\102\001\002\000\050" +
    "\007\uff6a\010\uff6a\011\uff6a\012\uff6a\013\uff6a\014\uff6a\015" +
    "\uff6a\023\uff6a\041\uff6a\042\uff6a\043\uff6a\044\uff6a\045\uff6a" +
    "\046\uff6a\051\uff6a\052\uff6a\070\uff6a\071\uff6a\072\uff6a\001" +
    "\002\000\050\007\uff66\010\uff66\011\uff66\012\uff66\013\uff66" +
    "\014\uff66\015\uff66\023\uff66\041\uff66\042\uff66\043\uff66\044" +
    "\uff66\045\uff66\046\uff66\051\uff66\052\uff66\070\uff66\071\uff66" +
    "\072\uff66\001\002\000\016\014\uff6c\041\060\042\047\043" +
    "\056\044\050\072\062\001\002\000\010\015\uffe4\070\uffe4" +
    "\071\uffe4\001\002\000\016\014\uff6f\041\060\042\047\043" +
    "\056\044\050\072\062\001\002\000\004\014\076\001\002" +
    "\000\034\007\066\010\064\011\065\012\070\013\063\015" +
    "\uff75\023\uff75\045\uff75\046\uff75\051\uff75\052\uff75\070\uff75" +
    "\071\uff75\001\002\000\050\007\uff67\010\uff67\011\uff67\012" +
    "\uff67\013\uff67\014\uff67\015\uff67\023\uff67\041\uff67\042\uff67" +
    "\043\uff67\044\uff67\045\uff67\046\uff67\051\uff67\052\uff67\070" +
    "\uff67\071\uff67\072\uff67\001\002\000\016\014\uff6d\041\060" +
    "\042\047\043\056\044\050\072\062\001\002\000\050\007" +
    "\uff68\010\uff68\011\uff68\012\uff68\013\uff68\014\uff68\015\uff68" +
    "\023\uff68\041\uff68\042\uff68\043\uff68\044\uff68\045\uff68\046" +
    "\uff68\051\uff68\052\uff68\070\uff68\071\uff68\072\uff68\001\002" +
    "\000\050\007\uff72\010\uff72\011\uff72\012\uff72\013\uff72\014" +
    "\uff72\015\uff72\023\uff72\041\uff72\042\uff72\043\uff72\044\uff72" +
    "\045\uff72\046\uff72\051\uff72\052\uff72\070\uff72\071\uff72\072" +
    "\uff72\001\002\000\050\007\uff69\010\uff69\011\uff69\012\uff69" +
    "\013\uff69\014\uff69\015\uff69\023\uff69\041\uff69\042\uff69\043" +
    "\uff69\044\uff69\045\uff69\046\uff69\051\uff69\052\uff69\070\uff69" +
    "\071\uff69\072\uff69\001\002\000\014\041\060\042\047\043" +
    "\056\044\050\072\062\001\002\000\014\041\060\042\047" +
    "\043\056\044\050\072\062\001\002\000\014\041\060\042" +
    "\047\043\056\044\050\072\062\001\002\000\014\041\060" +
    "\042\047\043\056\044\050\072\062\001\002\000\050\007" +
    "\053\010\044\011\057\012\051\013\040\014\045\015\uff76" +
    "\023\uff76\041\060\042\047\043\056\044\050\045\uff76\046" +
    "\uff76\051\uff76\052\uff76\070\uff76\071\uff76\072\062\001\002" +
    "\000\014\041\060\042\047\043\056\044\050\072\062\001" +
    "\002\000\050\007\uff71\010\uff71\011\uff71\012\uff71\013\uff71" +
    "\014\uff71\015\uff71\023\uff71\041\uff71\042\uff71\043\uff71\044" +
    "\uff71\045\uff71\046\uff71\051\uff71\052\uff71\070\uff71\071\uff71" +
    "\072\uff71\001\002\000\022\015\uff77\023\uff77\045\uff77\046" +
    "\uff77\051\uff77\052\uff77\070\uff77\071\uff77\001\002\000\050" +
    "\007\uff74\010\uff74\011\uff74\012\uff74\013\uff74\014\uff74\015" +
    "\uff74\023\uff74\041\uff74\042\uff74\043\uff74\044\uff74\045\uff74" +
    "\046\uff74\051\uff74\052\uff74\070\uff74\071\uff74\072\uff74\001" +
    "\002\000\050\007\uff73\010\uff73\011\uff73\012\uff73\013\uff73" +
    "\014\uff73\015\uff73\023\uff73\041\uff73\042\uff73\043\uff73\044" +
    "\uff73\045\uff73\046\uff73\051\uff73\052\uff73\070\uff73\071\uff73" +
    "\072\uff73\001\002\000\050\007\uff70\010\uff70\011\uff70\012" +
    "\uff70\013\uff70\014\uff70\015\uff70\023\uff70\041\uff70\042\uff70" +
    "\043\uff70\044\uff70\045\uff70\046\uff70\051\uff70\052\uff70\070" +
    "\uff70\071\uff70\072\uff70\001\002\000\030\007\053\010\044" +
    "\011\057\012\051\013\040\014\045\041\060\042\047\043" +
    "\056\044\050\072\062\001\002\000\004\015\100\001\002" +
    "\000\050\007\053\010\044\011\057\012\051\013\040\014" +
    "\045\015\uff7a\023\uff7a\041\060\042\047\043\056\044\050" +
    "\045\uff7a\046\uff7a\051\uff7a\052\uff7a\070\uff7a\071\uff7a\072" +
    "\062\001\002\000\022\015\uff7b\023\uff7b\045\uff7b\046\uff7b" +
    "\051\uff7b\052\uff7b\070\uff7b\071\uff7b\001\002\000\004\072" +
    "\104\001\002\000\066\002\ufff0\003\ufff0\007\ufff0\010\ufff0" +
    "\011\ufff0\012\ufff0\013\ufff0\014\ufff0\023\ufff0\041\ufff0\042" +
    "\ufff0\043\ufff0\044\ufff0\047\ufff0\050\ufff0\055\ufff0\056\ufff0" +
    "\057\ufff0\060\ufff0\061\ufff0\062\ufff0\063\ufff0\064\ufff0\065" +
    "\ufff0\066\ufff0\072\ufff0\001\002\000\010\006\110\070\uffe9" +
    "\071\107\001\002\000\004\070\106\001\002\000\066\002" +
    "\ufff2\003\ufff2\007\ufff2\010\ufff2\011\ufff2\012\ufff2\013\ufff2" +
    "\014\ufff2\023\ufff2\041\ufff2\042\ufff2\043\ufff2\044\ufff2\047" +
    "\ufff2\050\ufff2\055\ufff2\056\ufff2\057\ufff2\060\ufff2\061\ufff2" +
    "\062\ufff2\063\ufff2\064\ufff2\065\ufff2\066\ufff2\072\ufff2\001" +
    "\002\000\004\072\104\001\002\000\032\007\053\010\044" +
    "\011\057\012\051\013\040\014\045\035\043\041\060\042" +
    "\047\043\056\044\050\072\041\001\002\000\006\070\uffea" +
    "\071\112\001\002\000\004\072\104\001\002\000\004\070" +
    "\uffe8\001\002\000\004\070\uffe7\001\002\000\004\015\116" +
    "\001\002\000\050\007\053\010\044\011\057\012\051\013" +
    "\040\014\045\015\uff78\023\uff78\041\060\042\047\043\056" +
    "\044\050\045\uff78\046\uff78\051\uff78\052\uff78\070\uff78\071" +
    "\uff78\072\062\001\002\000\022\015\uff79\023\uff79\045\uff79" +
    "\046\uff79\051\uff79\052\uff79\070\uff79\071\uff79\001\002\000" +
    "\022\015\uff7d\023\uff7d\045\uff7d\046\uff7d\051\uff7d\052\uff7d" +
    "\070\uff7d\071\uff7d\001\002\000\034\007\053\010\044\011" +
    "\057\012\051\013\040\014\045\015\122\035\043\041\060" +
    "\042\047\043\056\044\050\072\041\001\002\000\010\015" +
    "\uffb3\070\uffb3\071\uffb3\001\002\000\004\015\127\001\002" +
    "\000\006\015\uffae\071\125\001\002\000\032\007\053\010" +
    "\044\011\057\012\051\013\040\014\045\035\043\041\060" +
    "\042\047\043\056\044\050\072\041\001\002\000\004\015" +
    "\uffaf\001\002\000\010\015\uffb2\070\uffb2\071\uffb2\001\002" +
    "\000\004\070\131\001\002\000\066\002\ufff3\003\ufff3\007" +
    "\ufff3\010\ufff3\011\ufff3\012\ufff3\013\ufff3\014\ufff3\023\ufff3" +
    "\041\ufff3\042\ufff3\043\ufff3\044\ufff3\047\ufff3\050\ufff3\055" +
    "\ufff3\056\ufff3\057\ufff3\060\ufff3\061\ufff3\062\ufff3\063\ufff3" +
    "\064\ufff3\065\ufff3\066\ufff3\072\ufff3\001\002\000\004\072" +
    "\104\001\002\000\004\011\134\001\002\000\004\072\uffeb" +
    "\001\002\000\004\070\136\001\002\000\066\002\uffe3\003" +
    "\uffe3\007\uffe3\010\uffe3\011\uffe3\012\uffe3\013\uffe3\014\uffe3" +
    "\023\uffe3\041\uffe3\042\uffe3\043\uffe3\044\uffe3\047\uffe3\050" +
    "\uffe3\055\uffe3\056\uffe3\057\uffe3\060\uffe3\061\uffe3\062\uffe3" +
    "\063\uffe3\064\uffe3\065\uffe3\066\uffe3\072\uffe3\001\002\000" +
    "\004\006\140\001\002\000\004\040\141\001\002\000\004" +
    "\070\142\001\002\000\066\002\uffef\003\uffef\007\uffef\010" +
    "\uffef\011\uffef\012\uffef\013\uffef\014\uffef\023\uffef\041\uffef" +
    "\042\uffef\043\uffef\044\uffef\047\uffef\050\uffef\055\uffef\056" +
    "\uffef\057\uffef\060\uffef\061\uffef\062\uffef\063\uffef\064\uffef" +
    "\065\uffef\066\uffef\072\uffef\001\002\000\014\006\uffda\014" +
    "\uffda\015\uffda\070\uffda\071\uffda\001\002\000\004\002\001" +
    "\001\002\000\004\014\uffdd\001\002\000\006\042\uff82\072" +
    "\uff82\001\002\000\006\042\uff7f\072\uff7f\001\002\000\006" +
    "\042\154\072\155\001\002\000\006\042\uff80\072\uff80\001" +
    "\002\000\006\042\uff81\072\uff81\001\002\000\006\002\uff83" +
    "\070\uff83\001\002\000\024\002\uff85\015\uff85\024\uff85\025" +
    "\uff85\026\uff85\027\uff85\030\uff85\031\uff85\070\uff85\001\002" +
    "\000\024\002\uff84\015\uff84\024\uff84\025\uff84\026\uff84\027" +
    "\uff84\030\uff84\031\uff84\070\uff84\001\002\000\014\015\160" +
    "\047\133\057\012\060\014\062\021\001\002\000\006\015" +
    "\uffdb\071\u0104\001\002\000\004\022\u0100\001\002\000\004" +
    "\015\162\001\002\000\004\022\163\001\002\000\060\007" +
    "\053\010\044\011\057\012\051\013\040\014\207\023\203" +
    "\041\060\042\047\043\056\044\050\047\016\050\017\055" +
    "\172\056\176\057\012\060\014\061\200\062\021\063\206" +
    "\065\214\066\177\072\215\001\002\000\004\070\376\001" +
    "\002\000\070\007\uffac\010\uffac\011\uffac\012\uffac\013\uffac" +
    "\014\uffac\023\uffac\041\uffac\042\uffac\043\uffac\044\uffac\045" +
    "\uffac\046\uffac\047\uffac\050\uffac\051\uffac\052\uffac\055\uffac" +
    "\056\uffac\057\uffac\060\uffac\061\uffac\062\uffac\063\uffac\065" +
    "\uffac\066\uffac\072\uffac\001\002\000\004\022\373\001\002" +
    "\000\006\023\uffce\070\371\001\002\000\004\014\355\001" +
    "\002\000\060\007\053\010\044\011\057\012\051\013\040" +
    "\014\207\023\uffd6\041\060\042\047\043\056\044\050\047" +
    "\016\050\017\055\172\056\176\057\012\060\014\061\200" +
    "\062\021\063\206\065\214\066\177\072\215\001\002\000" +
    "\004\014\uffa8\001\002\000\006\023\uffd0\070\352\001\002" +
    "\000\070\007\uffab\010\uffab\011\uffab\012\uffab\013\uffab\014" +
    "\uffab\023\uffab\041\uffab\042\uffab\043\uffab\044\uffab\045\uffab" +
    "\046\uffab\047\uffab\050\uffab\051\uffab\052\uffab\055\uffab\056" +
    "\uffab\057\uffab\060\uffab\061\uffab\062\uffab\063\uffab\065\uffab" +
    "\066\uffab\072\uffab\001\002\000\010\006\036\070\035\071" +
    "\034\001\002\000\004\014\333\001\002\000\004\014\327" +
    "\001\002\000\010\042\154\070\324\072\155\001\002\000" +
    "\004\023\323\001\002\000\060\007\053\010\044\011\057" +
    "\012\051\013\040\014\207\023\uffd4\041\060\042\047\043" +
    "\056\044\050\047\016\050\017\055\172\056\176\057\012" +
    "\060\014\061\200\062\021\063\206\065\214\066\177\072" +
    "\215\001\002\000\024\002\uffdf\003\uffdf\047\uffdf\050\uffdf" +
    "\057\uffdf\060\uffdf\062\uffdf\064\uffdf\072\uffdf\001\002\000" +
    "\072\007\uffa5\010\uffa5\011\uffa5\012\uffa5\013\uffa5\014\uffa5" +
    "\023\uffa5\041\uffa5\042\uffa5\043\uffa5\044\uffa5\045\uffa5\046" +
    "\uffa5\047\uffa5\050\uffa5\051\uffa5\052\uffa5\054\316\055\uffa5" +
    "\056\uffa5\057\uffa5\060\uffa5\061\uffa5\062\uffa5\063\uffa5\065" +
    "\uffa5\066\uffa5\072\uffa5\001\002\000\060\007\053\010\044" +
    "\011\057\012\051\013\040\014\207\023\uffd8\041\060\042" +
    "\047\043\056\044\050\047\016\050\017\055\172\056\176" +
    "\057\012\060\014\061\200\062\021\063\206\065\214\066" +
    "\177\072\215\001\002\000\004\014\230\001\002\000\032" +
    "\007\053\010\044\011\057\012\051\013\040\014\045\015" +
    "\226\041\060\042\047\043\056\044\050\072\062\001\002" +
    "\000\060\007\053\010\044\011\057\012\051\013\040\014" +
    "\207\023\uffcc\041\060\042\047\043\056\044\050\047\016" +
    "\050\017\055\172\056\176\057\012\060\014\061\200\062" +
    "\021\063\206\065\214\066\177\072\215\001\002\000\004" +
    "\070\223\001\002\000\060\007\053\010\044\011\057\012" +
    "\051\013\040\014\207\023\uffc6\041\060\042\047\043\056" +
    "\044\050\047\016\050\017\055\172\056\176\057\012\060" +
    "\014\061\200\062\021\063\206\065\214\066\177\072\215" +
    "\001\002\000\060\007\053\010\044\011\057\012\051\013" +
    "\040\014\207\023\uffca\041\060\042\047\043\056\044\050" +
    "\047\016\050\017\055\172\056\176\057\012\060\014\061" +
    "\200\062\021\063\206\065\214\066\177\072\215\001\002" +
    "\000\004\014\uffa7\001\002\000\036\004\216\005\220\007" +
    "\uff69\010\uff69\011\uff69\012\uff69\013\uff69\014\121\016\146" +
    "\017\152\020\151\021\147\023\uff69\070\uff69\001\002\000" +
    "\020\015\uff90\023\uff90\045\uff90\046\uff90\051\uff90\052\uff90" +
    "\070\uff90\001\002\000\020\015\uff8c\023\uff8c\045\uff8c\046" +
    "\uff8c\051\uff8c\052\uff8c\070\uff8c\001\002\000\020\015\uff8f" +
    "\023\uff8f\045\uff8f\046\uff8f\051\uff8f\052\uff8f\070\uff8f\001" +
    "\002\000\004\023\uffcb\001\002\000\004\023\uffc7\001\002" +
    "\000\060\007\053\010\044\011\057\012\051\013\040\014" +
    "\207\023\uffd2\041\060\042\047\043\056\044\050\047\016" +
    "\050\017\055\172\056\176\057\012\060\014\061\200\062" +
    "\021\063\206\065\214\066\177\072\215\001\002\000\004" +
    "\023\uffd3\001\002\000\004\023\uffcd\001\002\000\004\070" +
    "\227\001\002\000\070\007\uffb0\010\uffb0\011\uffb0\012\uffb0" +
    "\013\uffb0\014\uffb0\023\uffb0\041\uffb0\042\uffb0\043\uffb0\044" +
    "\uffb0\045\uffb0\046\uffb0\047\uffb0\050\uffb0\051\uffb0\052\uffb0" +
    "\055\uffb0\056\uffb0\057\uffb0\060\uffb0\061\uffb0\062\uffb0\063" +
    "\uffb0\065\uffb0\066\uffb0\072\uffb0\001\002\000\006\042\154" +
    "\072\155\001\002\000\004\015\232\001\002\000\004\022" +
    "\233\001\002\000\004\046\235\001\002\000\006\023\uffa0" +
    "\052\306\001\002\000\004\042\242\001\002\000\004\023" +
    "\241\001\002\000\010\023\uff9e\046\235\052\uff9e\001\002" +
    "\000\006\023\uff9f\052\uff9f\001\002\000\070\007\uffa2\010" +
    "\uffa2\011\uffa2\012\uffa2\013\uffa2\014\uffa2\023\uffa2\041\uffa2" +
    "\042\uffa2\043\uffa2\044\uffa2\045\uffa2\046\uffa2\047\uffa2\050" +
    "\uffa2\051\uffa2\052\uffa2\055\uffa2\056\uffa2\057\uffa2\060\uffa2" +
    "\061\uffa2\062\uffa2\063\uffa2\065\uffa2\066\uffa2\072\uffa2\001" +
    "\002\000\004\073\243\001\002\000\056\007\053\010\044" +
    "\011\057\012\051\013\040\014\207\023\uff95\041\060\042" +
    "\047\043\056\044\050\045\254\046\uff95\051\253\052\uff95" +
    "\055\172\056\176\061\200\063\206\065\214\066\177\072" +
    "\260\001\002\000\004\070\304\001\002\000\016\023\uffbc" +
    "\045\uffbc\046\uffbc\051\uffbc\052\uffbc\070\302\001\002\000" +
    "\016\023\uffbe\045\uffbe\046\uffbe\051\uffbe\052\uffbe\070\300" +
    "\001\002\000\056\007\053\010\044\011\057\012\051\013" +
    "\040\014\207\023\uffc4\041\060\042\047\043\056\044\050" +
    "\045\uffc4\046\uffc4\051\uffc4\052\uffc4\055\172\056\176\061" +
    "\200\063\206\065\214\066\177\072\260\001\002\000\012" +
    "\023\uff97\046\uff97\052\uff97\061\200\001\002\000\056\007" +
    "\053\010\044\011\057\012\051\013\040\014\207\023\uffba" +
    "\041\060\042\047\043\056\044\050\045\uffba\046\uffba\051" +
    "\uffba\052\uffba\055\172\056\176\061\200\063\206\065\214" +
    "\066\177\072\260\001\002\000\004\070\273\001\002\000" +
    "\004\070\272\001\002\000\004\070\271\001\002\000\056" +
    "\007\053\010\044\011\057\012\051\013\040\014\207\023" +
    "\uffb4\041\060\042\047\043\056\044\050\045\uffb4\046\uffb4" +
    "\051\uffb4\052\uffb4\055\172\056\176\061\200\063\206\065" +
    "\214\066\177\072\260\001\002\000\014\023\uff99\045\254" +
    "\046\uff99\051\253\052\uff99\001\002\000\056\007\053\010" +
    "\044\011\057\012\051\013\040\014\207\023\uffb8\041\060" +
    "\042\047\043\056\044\050\045\uffb8\046\uffb8\051\uffb8\052" +
    "\uffb8\055\172\056\176\061\200\063\206\065\214\066\177" +
    "\072\260\001\002\000\050\004\216\005\220\006\261\007" +
    "\uff69\010\uff69\011\uff69\012\uff69\013\uff69\014\121\016\146" +
    "\017\152\020\151\021\147\023\uff69\045\uff69\046\uff69\051" +
    "\uff69\052\uff69\070\uff69\001\002\000\032\007\053\010\044" +
    "\011\057\012\051\013\040\014\045\035\043\041\060\042" +
    "\047\043\056\044\050\072\041\001\002\000\004\070\263" +
    "\001\002\000\056\007\053\010\044\011\057\012\051\013" +
    "\040\014\207\023\uffc0\041\060\042\047\043\056\044\050" +
    "\045\uffc0\046\uffc0\051\uffc0\052\uffc0\055\172\056\176\061" +
    "\200\063\206\065\214\066\177\072\260\001\002\000\014" +
    "\023\uffc1\045\uffc1\046\uffc1\051\uffc1\052\uffc1\001\002\000" +
    "\014\023\uffb9\045\uffb9\046\uffb9\051\uffb9\052\uffb9\001\002" +
    "\000\012\023\uff9a\046\uff9a\052\uff9a\061\200\001\002\000" +
    "\010\023\uff98\046\uff98\052\uff98\001\002\000\014\023\uffb5" +
    "\045\uffb5\046\uffb5\051\uffb5\052\uffb5\001\002\000\012\023" +
    "\uff94\046\uff94\052\uff94\061\uff94\001\002\000\012\023\uff93" +
    "\046\uff93\052\uff93\061\uff93\001\002\000\056\007\053\010" +
    "\044\011\057\012\051\013\040\014\207\023\uffc2\041\060" +
    "\042\047\043\056\044\050\045\uffc2\046\uffc2\051\uffc2\052" +
    "\uffc2\055\172\056\176\061\200\063\206\065\214\066\177" +
    "\072\260\001\002\000\014\023\uffc3\045\uffc3\046\uffc3\051" +
    "\uffc3\052\uffc3\001\002\000\014\023\uffbb\045\uffbb\046\uffbb" +
    "\051\uffbb\052\uffbb\001\002\000\010\023\uff96\046\uff96\052" +
    "\uff96\001\002\000\014\023\uffc5\045\uffc5\046\uffc5\051\uffc5" +
    "\052\uffc5\001\002\000\044\007\053\010\044\011\057\012" +
    "\051\013\040\014\207\041\060\042\047\043\056\044\050" +
    "\055\172\056\176\061\200\063\206\065\214\066\177\072" +
    "\260\001\002\000\014\023\uffbf\045\uffbf\046\uffbf\051\uffbf" +
    "\052\uffbf\001\002\000\044\007\053\010\044\011\057\012" +
    "\051\013\040\014\207\041\060\042\047\043\056\044\050" +
    "\055\172\056\176\061\200\063\206\065\214\066\177\072" +
    "\260\001\002\000\014\023\uffbd\045\uffbd\046\uffbd\051\uffbd" +
    "\052\uffbd\001\002\000\056\007\053\010\044\011\057\012" +
    "\051\013\040\014\207\023\uffb6\041\060\042\047\043\056" +
    "\044\050\045\uffb6\046\uffb6\051\uffb6\052\uffb6\055\172\056" +
    "\176\061\200\063\206\065\214\066\177\072\260\001\002" +
    "\000\014\023\uffb7\045\uffb7\046\uffb7\051\uffb7\052\uffb7\001" +
    "\002\000\004\073\310\001\002\000\004\023\uffa1\001\002" +
    "\000\044\007\053\010\044\011\057\012\051\013\040\014" +
    "\207\041\060\042\047\043\056\044\050\055\172\056\176" +
    "\061\200\063\206\065\214\066\177\072\260\001\002\000" +
    "\010\023\uff9c\045\254\051\253\001\002\000\006\023\uff9d" +
    "\061\200\001\002\000\004\023\uff9b\001\002\000\004\023" +
    "\uffd9\001\002\000\070\007\uffa6\010\uffa6\011\uffa6\012\uffa6" +
    "\013\uffa6\014\uffa6\023\uffa6\041\uffa6\042\uffa6\043\uffa6\044" +
    "\uffa6\045\uffa6\046\uffa6\047\uffa6\050\uffa6\051\uffa6\052\uffa6" +
    "\055\uffa6\056\uffa6\057\uffa6\060\uffa6\061\uffa6\062\uffa6\063" +
    "\uffa6\065\uffa6\066\uffa6\072\uffa6\001\002\000\004\022\317" +
    "\001\002\000\056\007\053\010\044\011\057\012\051\013" +
    "\040\014\207\041\060\042\047\043\056\044\050\047\016" +
    "\050\017\055\172\056\176\057\012\060\014\061\200\062" +
    "\021\063\206\065\214\066\177\072\215\001\002\000\004" +
    "\023\321\001\002\000\070\007\uffa3\010\uffa3\011\uffa3\012" +
    "\uffa3\013\uffa3\014\uffa3\023\uffa3\041\uffa3\042\uffa3\043\uffa3" +
    "\044\uffa3\045\uffa3\046\uffa3\047\uffa3\050\uffa3\051\uffa3\052" +
    "\uffa3\055\uffa3\056\uffa3\057\uffa3\060\uffa3\061\uffa3\062\uffa3" +
    "\063\uffa3\065\uffa3\066\uffa3\072\uffa3\001\002\000\004\023" +
    "\uffd5\001\002\000\024\002\uffe2\003\uffe2\047\uffe2\050\uffe2" +
    "\057\uffe2\060\uffe2\062\uffe2\064\uffe2\072\uffe2\001\002\000" +
    "\070\007\uff91\010\uff91\011\uff91\012\uff91\013\uff91\014\uff91" +
    "\023\uff91\041\uff91\042\uff91\043\uff91\044\uff91\045\uff91\046" +
    "\uff91\047\uff91\050\uff91\051\uff91\052\uff91\055\uff91\056\uff91" +
    "\057\uff91\060\uff91\061\uff91\062\uff91\063\uff91\065\uff91\066" +
    "\uff91\072\uff91\001\002\000\004\070\326\001\002\000\070" +
    "\007\uff92\010\uff92\011\uff92\012\uff92\013\uff92\014\uff92\023" +
    "\uff92\041\uff92\042\uff92\043\uff92\044\uff92\045\uff92\046\uff92" +
    "\047\uff92\050\uff92\051\uff92\052\uff92\055\uff92\056\uff92\057" +
    "\uff92\060\uff92\061\uff92\062\uff92\063\uff92\065\uff92\066\uff92" +
    "\072\uff92\001\002\000\004\072\330\001\002\000\004\015" +
    "\331\001\002\000\004\070\332\001\002\000\070\007\uffb1" +
    "\010\uffb1\011\uffb1\012\uffb1\013\uffb1\014\uffb1\023\uffb1\041" +
    "\uffb1\042\uffb1\043\uffb1\044\uffb1\045\uffb1\046\uffb1\047\uffb1" +
    "\050\uffb1\051\uffb1\052\uffb1\055\uffb1\056\uffb1\057\uffb1\060" +
    "\uffb1\061\uffb1\062\uffb1\063\uffb1\065\uffb1\066\uffb1\072\uffb1" +
    "\001\002\000\006\042\154\072\155\001\002\000\016\024" +
    "\343\025\346\026\347\027\350\030\345\031\342\001\002" +
    "\000\004\015\336\001\002\000\004\022\337\001\002\000" +
    "\056\007\053\010\044\011\057\012\051\013\040\014\207" +
    "\041\060\042\047\043\056\044\050\047\016\050\017\055" +
    "\172\056\176\057\012\060\014\061\200\062\021\063\206" +
    "\065\214\066\177\072\215\001\002\000\004\023\341\001" +
    "\002\000\072\007\uffa4\010\uffa4\011\uffa4\012\uffa4\013\uffa4" +
    "\014\uffa4\023\uffa4\041\uffa4\042\uffa4\043\uffa4\044\uffa4\045" +
    "\uffa4\046\uffa4\047\uffa4\050\uffa4\051\uffa4\052\uffa4\054\uffa4" +
    "\055\uffa4\056\uffa4\057\uffa4\060\uffa4\061\uffa4\062\uffa4\063" +
    "\uffa4\065\uffa4\066\uffa4\072\uffa4\001\002\000\006\042\uff86" +
    "\072\uff86\001\002\000\006\042\uff8b\072\uff8b\001\002\000" +
    "\006\042\154\072\155\001\002\000\006\042\uff87\072\uff87" +
    "\001\002\000\006\042\uff8a\072\uff8a\001\002\000\006\042" +
    "\uff89\072\uff89\001\002\000\006\042\uff88\072\uff88\001\002" +
    "\000\006\015\uff8e\070\uff8e\001\002\000\056\007\053\010" +
    "\044\011\057\012\051\013\040\014\207\041\060\042\047" +
    "\043\056\044\050\047\016\050\017\055\172\056\176\057" +
    "\012\060\014\061\200\062\021\063\206\065\214\066\177" +
    "\072\215\001\002\000\004\023\uffd1\001\002\000\004\023" +
    "\uffd7\001\002\000\016\042\154\047\133\057\012\060\014" +
    "\062\021\072\155\001\002\000\004\015\370\001\002\000" +
    "\004\015\367\001\002\000\004\072\104\001\002\000\004" +
    "\070\362\001\002\000\006\042\154\072\155\001\002\000" +
    "\004\070\364\001\002\000\004\072\366\001\002\000\004" +
    "\015\uff8d\001\002\000\006\004\216\005\220\001\002\000" +
    "\004\022\uffaa\001\002\000\004\022\uffa9\001\002\000\056" +
    "\007\053\010\044\011\057\012\051\013\040\014\207\041" +
    "\060\042\047\043\056\044\050\047\016\050\017\055\172" +
    "\056\176\057\012\060\014\061\200\062\021\063\206\065" +
    "\214\066\177\072\215\001\002\000\004\023\uffcf\001\002" +
    "\000\056\007\053\010\044\011\057\012\051\013\040\014" +
    "\207\041\060\042\047\043\056\044\050\047\016\050\017" +
    "\055\172\056\176\057\012\060\014\061\200\062\021\063" +
    "\206\065\214\066\177\072\215\001\002\000\004\023\375" +
    "\001\002\000\070\007\uffad\010\uffad\011\uffad\012\uffad\013" +
    "\uffad\014\uffad\023\uffad\041\uffad\042\uffad\043\uffad\044\uffad" +
    "\045\uffad\046\uffad\047\uffad\050\uffad\051\uffad\052\uffad\055" +
    "\uffad\056\uffad\057\uffad\060\uffad\061\uffad\062\uffad\063\uffad" +
    "\065\uffad\066\uffad\072\uffad\001\002\000\060\007\053\010" +
    "\044\011\057\012\051\013\040\014\207\023\uffc8\041\060" +
    "\042\047\043\056\044\050\047\016\050\017\055\172\056" +
    "\176\057\012\060\014\061\200\062\021\063\206\065\214" +
    "\066\177\072\215\001\002\000\004\023\uffc9\001\002\000" +
    "\060\007\053\010\044\011\057\012\051\013\040\014\207" +
    "\023\u0102\041\060\042\047\043\056\044\050\047\016\050" +
    "\017\055\172\056\176\057\012\060\014\061\200\062\021" +
    "\063\206\065\214\066\177\072\215\001\002\000\004\023" +
    "\u0103\001\002\000\024\002\uffe0\003\uffe0\047\uffe0\050\uffe0" +
    "\057\uffe0\060\uffe0\062\uffe0\064\uffe0\072\uffe0\001\002\000" +
    "\024\002\uffe1\003\uffe1\047\uffe1\050\uffe1\057\uffe1\060\uffe1" +
    "\062\uffe1\064\uffe1\072\uffe1\001\002\000\012\047\133\057" +
    "\012\060\014\062\021\001\002\000\004\015\uffdc\001\002" +
    "\000\004\002\uffff\001\002" });
>>>>>>> parent of e8d340d... version 3.2

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
<<<<<<< HEAD
    "\000\u0121\000\026\002\012\003\023\004\006\005\024\006" +
    "\005\007\014\011\004\013\003\016\017\041\022\001\001" +
    "\000\024\003\u0122\004\006\005\024\006\005\007\014\011" +
    "\004\013\003\016\017\041\022\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\044\137\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\007\121\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\010\117\001\001\000\002\001\001\000" +
    "\014\012\052\047\042\050\044\056\036\057\043\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\012\100\057\043\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\012\076\057\043\001\001" +
    "\000\012\012\073\047\042\050\072\057\043\001\001\000" +
    "\006\012\070\057\043\001\001\000\006\012\066\057\043" +
    "\001\001\000\002\001\001\000\004\047\056\001\001\000" +
    "\006\012\054\057\043\001\001\000\004\047\055\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\012\052\047" +
    "\042\050\044\056\062\057\043\060\061\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\012" +
    "\052\047\042\050\044\056\062\057\043\060\064\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\047\067\001" +
    "\001\000\002\001\001\000\004\047\071\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\047\056\001\001\000" +
    "\012\012\073\047\042\050\075\057\043\001\001\000\002" +
    "\001\001\000\004\047\077\001\001\000\002\001\001\000" +
    "\004\047\101\001\001\000\002\001\001\000\004\010\105" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\010\116\001\001\000\004" +
    "\010\115\001\001\000\014\012\052\047\042\050\044\056" +
    "\112\057\043\001\001\000\002\001\001\000\004\010\114" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\010\124" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
=======
    "\000\u0104\000\026\002\012\003\023\004\006\005\024\006" +
    "\005\007\014\011\004\013\003\016\017\041\022\001\001" +
    "\000\024\003\u0105\004\006\005\024\006\005\007\014\011" +
    "\004\013\003\016\017\041\022\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\044\147\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\007\131\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\010\127\001\001\000\002\001\001\000\016" +
    "\012\054\047\041\050\036\052\053\056\045\057\051\001" +
    "\001\000\002\001\001\000\004\012\074\001\001\000\002" +
    "\001\001\000\012\012\054\047\041\050\117\052\053\001" +
    "\001\000\002\001\001\000\004\012\073\001\001\000\012" +
    "\012\054\047\041\050\114\052\053\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\012\070" +
    "\001\001\000\002\001\001\000\004\012\072\001\001\000" +
    "\002\001\001\000\004\047\066\001\001\000\002\001\001" +
    "\000\004\012\060\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\012\074\001\001\000\004" +
    "\012\073\001\001\000\004\012\060\001\001\000\004\012" +
    "\072\001\001\000\012\012\054\047\041\050\071\052\053" +
    "\001\001\000\004\012\070\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\012\054\047\041\050\076\052\053\001" +
    "\001\000\002\001\001\000\012\012\054\047\041\050\100" +
    "\052\053\001\001\000\002\001\001\000\004\010\104\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\010\113\001\001\000\016\012" +
    "\054\047\041\050\036\052\053\056\110\057\051\001\001" +
    "\000\002\001\001\000\004\010\112\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\012\054" +
    "\047\041\050\116\052\053\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\012\054\047\041\050\036\052\053" +
    "\056\123\057\051\060\122\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\012\054\047\041" +
    "\050\036\052\053\056\123\057\051\060\125\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\010\134\001\001\000\002\001\001\000" +
>>>>>>> parent of e8d340d... version 3.2
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\024\143\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\007" +
    "\014\014\153\016\152\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
<<<<<<< HEAD
    "\001\000\052\004\164\005\200\007\014\012\073\015\u0112" +
    "\016\171\017\176\020\161\021\163\031\160\035\210\036" +
    "\167\037\201\041\207\042\206\045\166\047\042\050\162" +
    "\057\157\061\170\001\001\000\052\004\164\005\200\007" +
    "\014\012\073\015\175\016\171\017\176\020\161\021\163" +
    "\031\160\035\210\036\167\037\201\041\207\042\206\045" +
    "\166\047\042\050\162\057\157\061\170\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\052\004\164\005\200\007\014" +
    "\012\073\015\376\016\171\017\176\020\161\021\163\031" +
    "\160\035\210\036\167\037\201\041\207\042\206\045\166" +
    "\047\042\050\162\057\157\061\170\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\052\004\164" +
    "\005\200\007\014\012\073\015\373\016\171\017\176\020" +
    "\161\021\163\031\160\035\210\036\167\037\201\041\207" +
    "\042\206\045\166\047\042\050\162\057\157\061\170\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\024\344\001\001\000\002\001\001\000\052\004" +
    "\164\005\200\007\014\012\073\015\341\016\171\017\176" +
    "\020\161\021\163\031\160\035\210\036\167\037\201\041" +
    "\207\042\206\045\166\047\042\050\162\057\157\061\170" +
    "\001\001\000\002\001\001\000\052\004\164\005\200\007" +
    "\014\012\073\015\334\016\171\017\176\020\161\021\163" +
    "\031\160\035\210\036\167\037\201\041\207\042\206\045" +
    "\166\047\042\050\162\057\157\061\170\001\001\000\004" +
    "\040\327\001\001\000\002\001\001\000\006\012\054\057" +
    "\043\001\001\000\002\001\001\000\012\012\073\047\042" +
    "\050\072\057\043\001\001\000\052\004\164\005\200\007" +
    "\014\012\073\015\225\016\171\017\176\020\161\021\163" +
    "\031\160\035\210\036\167\037\201\041\207\042\206\045" +
    "\166\047\042\050\162\057\157\061\170\001\001\000\002" +
    "\001\001\000\052\004\164\005\200\007\014\012\073\015" +
    "\222\016\171\017\176\020\161\021\163\031\160\035\210" +
    "\036\167\037\201\041\207\042\206\045\166\047\042\050" +
    "\162\057\157\061\170\001\001\000\002\001\001\000\006" +
    "\026\214\044\137\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\012\052\047\042\050\044" +
    "\056\217\057\043\001\001\000\002\001\001\000\052\004" +
    "\164\005\200\007\014\012\073\015\221\016\171\017\176" +
    "\020\161\021\163\031\160\035\210\036\167\037\201\041" +
    "\207\042\206\045\166\047\042\050\162\057\157\061\170" +
    "\001\001\000\002\001\001\000\002\001\001\000\052\004" +
    "\164\005\200\007\014\012\073\015\224\016\171\017\176" +
    "\020\161\021\163\031\160\035\210\036\167\037\201\041" +
    "\207\042\206\045\166\047\042\050\162\057\157\061\170" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\024\231\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\032\234\033\237\054" +
    "\236\001\001\000\004\053\315\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\032\240\033\237\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\044" +
    "\012\073\017\250\020\161\021\163\031\160\034\251\035" +
    "\257\036\167\037\201\041\254\042\253\045\246\047\042" +
    "\050\245\055\260\057\244\061\247\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\042\012\073" +
    "\017\250\020\161\021\163\031\160\035\257\036\167\037" +
    "\201\041\254\042\253\045\246\047\042\050\245\055\305" +
    "\057\244\061\247\001\001\000\042\012\073\017\250\020" +
    "\161\021\163\031\160\035\257\036\167\037\201\041\254" +
    "\042\253\045\246\047\042\050\245\055\304\057\244\061" +
    "\247\001\001\000\004\035\303\001\001\000\006\012\054" +
    "\057\043\001\001\000\042\012\073\017\250\020\161\021" +
    "\163\031\160\035\257\036\167\037\201\041\254\042\253" +
    "\045\246\047\042\050\245\055\275\057\244\061\247\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\042\012\073\017\250\020\161\021\163\031\160\035" +
    "\257\036\167\037\201\041\254\042\253\045\246\047\042" +
    "\050\245\055\270\057\244\061\247\001\001\000\004\034" +
    "\266\001\001\000\006\026\214\044\137\001\001\000\014" +
    "\012\052\047\042\050\044\056\263\057\043\001\001\000" +
    "\002\001\001\000\042\012\073\017\250\020\161\021\163" +
    "\031\160\035\257\036\167\037\201\041\254\042\253\045" +
    "\246\047\042\050\245\055\265\057\244\061\247\001\001" +
    "\000\002\001\001\000\004\035\267\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\042\012\073\017\250\020\161\021\163\031\160\035" +
    "\257\036\167\037\201\041\254\042\253\045\246\047\042" +
    "\050\245\055\274\057\244\061\247\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\012\052" +
    "\047\042\050\044\056\300\057\043\001\001\000\002\001" +
    "\001\000\042\012\073\017\250\020\161\021\163\031\160" +
    "\035\257\036\167\037\201\041\254\042\253\045\246\047" +
    "\042\050\245\055\302\057\244\061\247\001\001\000\002" +
=======
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\024\152\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\007\014\014" +
    "\160\016\156\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\054\004\170\005" +
    "\204\007\014\012\054\015\200\016\174\017\201\020\165" +
    "\021\167\031\164\035\211\036\173\037\203\041\210\042" +
    "\207\043\212\045\172\047\041\050\166\052\053\057\163" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\054\004\170" +
    "\005\204\007\014\012\054\015\353\016\174\017\201\020" +
    "\165\021\167\031\164\035\211\036\173\037\203\041\210" +
    "\042\207\043\212\045\172\047\041\050\166\052\053\057" +
    "\163\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\024\324\001\001\000\002\001\001\000\054" +
    "\004\170\005\204\007\014\012\054\015\321\016\174\017" +
    "\201\020\165\021\167\031\164\035\211\036\173\037\203" +
    "\041\210\042\207\043\212\045\172\047\041\050\166\052" +
    "\053\057\163\001\001\000\002\001\001\000\004\040\314" +
    "\001\001\000\054\004\170\005\204\007\014\012\054\015" +
    "\313\016\174\017\201\020\165\021\167\031\164\035\211" +
    "\036\173\037\203\041\210\042\207\043\212\045\172\047" +
    "\041\050\166\052\053\057\163\001\001\000\002\001\001" +
    "\000\012\012\054\047\041\050\114\052\053\001\001\000" +
    "\054\004\170\005\204\007\014\012\054\015\224\016\174" +
    "\017\201\020\165\021\167\031\164\035\211\036\173\037" +
    "\203\041\210\042\207\043\212\045\172\047\041\050\166" +
    "\052\053\057\163\001\001\000\002\001\001\000\054\004" +
    "\170\005\204\007\014\012\054\015\221\016\174\017\201" +
    "\020\165\021\167\031\164\035\211\036\173\037\203\041" +
    "\210\042\207\043\212\045\172\047\041\050\166\052\053" +
    "\057\163\001\001\000\054\004\170\005\204\007\014\012" +
    "\054\015\220\016\174\017\201\020\165\021\167\031\164" +
    "\035\211\036\173\037\203\041\210\042\207\043\212\045" +
    "\172\047\041\050\166\052\053\057\163\001\001\000\002" +
    "\001\001\000\006\026\216\044\147\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\054\004\170\005\204\007\014\012" +
    "\054\015\223\016\174\017\201\020\165\021\167\031\164" +
    "\035\211\036\173\037\203\041\210\042\207\043\212\045" +
    "\172\047\041\050\166\052\053\057\163\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\024\230\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\032\233\033\236\054\235\001\001\000" +
    "\004\053\306\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\032\237\033\236\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\046\012\054\017\246" +
    "\020\165\021\167\031\164\034\247\035\254\036\173\037" +
    "\203\041\251\042\250\043\256\045\245\047\041\050\244" +
    "\052\053\055\255\057\243\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\044\012\054\017\246" +
    "\020\165\021\167\031\164\035\254\036\173\037\203\041" +
    "\251\042\250\043\256\045\245\047\041\050\244\052\053" +
    "\055\276\057\243\001\001\000\004\035\275\001\001\000" +
    "\044\012\054\017\246\020\165\021\167\031\164\035\254" +
    "\036\173\037\203\041\251\042\250\043\256\045\245\047" +
    "\041\050\244\052\053\055\274\057\243\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\044\012" +
    "\054\017\246\020\165\021\167\031\164\035\254\036\173" +
    "\037\203\041\251\042\250\043\256\045\245\047\041\050" +
    "\244\052\053\055\267\057\243\001\001\000\004\034\265" +
    "\001\001\000\044\012\054\017\246\020\165\021\167\031" +
    "\164\035\254\036\173\037\203\041\251\042\250\043\256" +
    "\045\245\047\041\050\244\052\053\055\264\057\243\001" +
    "\001\000\006\026\216\044\147\001\001\000\016\012\054" +
    "\047\041\050\036\052\053\056\261\057\051\001\001\000" +
    "\002\001\001\000\044\012\054\017\246\020\165\021\167" +
    "\031\164\035\254\036\173\037\203\041\251\042\250\043" +
    "\256\045\245\047\041\050\244\052\053\055\263\057\243" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\035" +
    "\266\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\044\012\054\017\246\020" +
    "\165\021\167\031\164\035\254\036\173\037\203\041\251" +
    "\042\250\043\256\045\245\047\041\050\244\052\053\055" +
    "\273\057\243\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\044\012\054\017" +
    "\246\020\165\021\167\031\164\035\254\036\173\037\203" +
    "\041\251\042\250\043\256\045\245\047\041\050\244\052" +
    "\053\055\300\057\243\001\001\000\002\001\001\000\044" +
    "\012\054\017\246\020\165\021\167\031\164\035\254\036" +
    "\173\037\203\041\251\042\250\043\256\045\245\047\041" +
    "\050\244\052\053\055\302\057\243\001\001\000\002\001" +
    "\001\000\044\012\054\017\246\020\165\021\167\031\164" +
    "\035\254\036\173\037\203\041\251\042\250\043\256\045" +
    "\245\047\041\050\244\052\053\055\304\057\243\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\044\012\054\017\246\020\165\021\167\031\164\035\254" +
    "\036\173\037\203\041\251\042\250\043\256\045\245\047" +
    "\041\050\244\052\053\055\310\057\243\001\001\000\004" +
    "\034\311\001\001\000\004\035\312\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\054\004\170\005\204\007\014\012\054\015\317\016" +
    "\174\017\201\020\165\021\167\031\164\035\211\036\173" +
    "\037\203\041\210\042\207\043\212\045\172\047\041\050" +
    "\166\052\053\057\163\001\001\000\002\001\001\000\002" +
>>>>>>> parent of e8d340d... version 3.2
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\042\012\073\017\250\020\161\021\163\031\160" +
    "\035\257\036\167\037\201\041\254\042\253\045\246\047" +
    "\042\050\245\055\307\057\244\061\247\001\001\000\002" +
    "\001\001\000\042\012\073\017\250\020\161\021\163\031" +
    "\160\035\257\036\167\037\201\041\254\042\253\045\246" +
    "\047\042\050\245\055\311\057\244\061\247\001\001\000" +
    "\002\001\001\000\042\012\073\017\250\020\161\021\163" +
    "\031\160\035\257\036\167\037\201\041\254\042\253\045" +
    "\246\047\042\050\245\055\313\057\244\061\247\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\042\012\073\017\250\020\161\021\163\031\160\035\257" +
    "\036\167\037\201\041\254\042\253\045\246\047\042\050" +
    "\245\055\317\057\244\061\247\001\001\000\004\034\320" +
    "\001\001\000\004\035\321\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\012\052\047\042\050\044\056\324" +
    "\057\043\001\001\000\002\001\001\000\052\004\164\005" +
    "\200\007\014\012\073\015\326\016\171\017\176\020\161" +
    "\021\163\031\160\035\210\036\167\037\201\041\207\042" +
    "\206\045\166\047\042\050\162\057\157\061\170\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\052\004\164\005\200\007\014\012\073\015\332\016\171" +
    "\017\176\020\161\021\163\031\160\035\210\036\167\037" +
    "\201\041\207\042\206\045\166\047\042\050\162\057\157" +
    "\061\170\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\012\052\047\042\050\044\056\062" +
    "\057\043\060\336\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
<<<<<<< HEAD
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\023\354\024\353\001\001\000\004\025" +
    "\361\001\001\000\002\001\001\000\002\001\001\000\052" +
    "\004\164\005\200\007\014\012\073\015\357\016\171\017" +
    "\176\020\161\021\163\031\160\035\210\036\167\037\201" +
    "\041\207\042\206\045\166\047\042\050\162\057\157\061" +
    "\170\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\024\372\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\052\004\164\005\200\007\014" +
    "\012\073\015\375\016\171\017\176\020\161\021\163\031" +
    "\160\035\210\036\167\037\201\041\207\042\206\045\166" +
    "\047\042\050\162\057\157\061\170\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\007\u0102\022\u0100\023\u0101" +
    "\024\353\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\010\u0103\001\001\000\002\001\001\000\006\023\u0105" +
    "\024\353\001\001\000\002\001\001\000\004\045\u0107\001" +
    "\001\000\002\001\001\000\004\026\214\001\001\000\002" +
    "\001\001\000\002\001\001\000\052\004\164\005\200\007" +
    "\014\012\073\015\u010c\016\171\017\176\020\161\021\163" +
    "\031\160\035\210\036\167\037\201\041\207\042\206\045" +
    "\166\047\042\050\162\057\157\061\170\001\001\000\002" +
    "\001\001\000\052\004\164\005\200\007\014\012\073\015" +
    "\u010e\016\171\017\176\020\161\021\163\031\160\035\210" +
    "\036\167\037\201\041\207\042\206\045\166\047\042\050" +
    "\162\057\157\061\170\001\001\000\002\001\001\000\002" +
    "\001\001\000\052\004\164\005\200\007\014\012\073\015" +
    "\u0111\016\171\017\176\020\161\021\163\031\160\035\210" +
    "\036\167\037\201\041\207\042\206\045\166\047\042\050" +
    "\162\057\157\061\170\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\007\014\014\u0115\016" +
    "\152\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\052\004\164\005\200\007\014\012\073\015\u0120" +
    "\016\171\017\176\020\161\021\163\031\160\035\210\036" +
    "\167\037\201\041\207\042\206\045\166\047\042\050\162" +
    "\057\157\061\170\001\001\000\052\004\164\005\200\007" +
    "\014\012\073\015\u011d\016\171\017\176\020\161\021\163" +
    "\031\160\035\210\036\167\037\201\041\207\042\206\045" +
    "\166\047\042\050\162\057\157\061\170\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001" });
=======
    "\006\023\334\024\333\001\001\000\004\025\343\001\001" +
    "\000\002\001\001\000\002\001\001\000\054\004\170\005" +
    "\204\007\014\012\054\015\337\016\174\017\201\020\165" +
    "\021\167\031\164\035\211\036\173\037\203\041\210\042" +
    "\207\043\212\045\172\047\041\050\166\052\053\057\163" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\024\350\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\054\004\170\005\204\007\014" +
    "\012\054\015\352\016\174\017\201\020\165\021\167\031" +
    "\164\035\211\036\173\037\203\041\210\042\207\043\212" +
    "\045\172\047\041\050\166\052\053\057\163\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\007\357\022\355" +
    "\023\356\024\333\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\010\360\001\001\000\002\001\001\000\006" +
    "\023\362\024\333\001\001\000\002\001\001\000\004\045" +
    "\364\001\001\000\002\001\001\000\004\026\216\001\001" +
    "\000\002\001\001\000\002\001\001\000\054\004\170\005" +
    "\204\007\014\012\054\015\371\016\174\017\201\020\165" +
    "\021\167\031\164\035\211\036\173\037\203\041\210\042" +
    "\207\043\212\045\172\047\041\050\166\052\053\057\163" +
    "\001\001\000\002\001\001\000\054\004\170\005\204\007" +
    "\014\012\054\015\373\016\174\017\201\020\165\021\167" +
    "\031\164\035\211\036\173\037\203\041\210\042\207\043" +
    "\212\045\172\047\041\050\166\052\053\057\163\001\001" +
    "\000\002\001\001\000\002\001\001\000\054\004\170\005" +
    "\204\007\014\012\054\015\376\016\174\017\201\020\165" +
    "\021\167\031\164\035\211\036\173\037\203\041\210\042" +
    "\207\043\212\045\172\047\041\050\166\052\053\057\163" +
    "\001\001\000\002\001\001\000\054\004\170\005\204\007" +
    "\014\012\054\015\u0100\016\174\017\201\020\165\021\167" +
    "\031\164\035\211\036\173\037\203\041\210\042\207\043" +
    "\212\045\172\047\041\050\166\052\053\057\163\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\007\014\014\u0104\016\156\001\001\000\002\001\001" +
    "\000\002\001\001" });
>>>>>>> parent of e8d340d... version 3.2

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public LinkedList<ErrorMsg> errorList = new LinkedList<ErrorMsg>();
    private Integer row, column;

    public void syntax_error(Symbol s) 
    {
        String lexeme = s.value.toString();
        int row =  s.right + 1;
        int column = s.left + 1;
        this.row = row;
        this.column = column;
        System.out.println("Sintax error at: " + lexeme + " row: " + row + " column: " + column);
        ErrorMsg error =  new ErrorMsg(lexeme, "Syntax error: " + s, row, column);
        //errorList.add(error);
    }

    public void addSintaxError(String s, String msg) 
    {
        ErrorMsg error =  new ErrorMsg(s, "Syntax error: " + msg, row, column);
        errorList.add(error);
    }

    public void unrecovered_syntax_error(Symbol s)
    {        
        String lexeme = s.value.toString();
        int row = s.right + 1;
        int column = s.left + 1;
        this.row = row;
        this.column = column;
        System.out.println("Unrecovered Sintax error: " + lexeme + " row: " + row + " column: " + column);
        ErrorMsg error =  new ErrorMsg(lexeme, "Syntax error: " + s, row, column);
        //errorList.add(error);
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= decl_list 
            {
              String RESULT =null;
		int dlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String dl = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // decl_list ::= declaration decl_list 
            {
              String RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int dlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String dl = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decl_list",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // decl_list ::= declaration 
            {
              String RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decl_list",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // decl_list ::= asign_equal 
            {
              String RESULT =null;
		int aeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String ae = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decl_list",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // declaration ::= global_decl 
            {
              String RESULT =null;
		int glleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int glright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String gl = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // declaration ::= const_decl 
            {
              String RESULT =null;
		int clleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int clright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String cl = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // declaration ::= funct_decl 
            {
              String RESULT =null;
		int flleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int flright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String fl = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // declaration ::= error SEMICOLON 
            {
              String RESULT =null;
		addSintaxError(";","Unkown error");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // declaration ::= error OPEN_KEY 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // declaration ::= error CLOSE_KEY 
            {
              String RESULT =null;
		addSintaxError("}","Unkown error");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 10: // declaration ::= error CLOSE_BRACKET 
            {
              String RESULT =null;
		addSintaxError(")","Unknown error");
=======
          case 11: // declaration ::= error OPEN_BRACKET 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // declaration ::= error CLOSE_BRACKET 
            {
              String RESULT =null;

>>>>>>> parent of e8d340d... version 3.2
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 11: // global_decl ::= var_func_decl COMMA var_decl SEMICOLON 
=======
          case 13: // declaration ::= error IDENTIFIER 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // global_decl ::= var_func_decl COMMA var_decl SEMICOLON 
>>>>>>> parent of e8d340d... version 3.2
            {
              String RESULT =null;
		int vdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String vd = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("global_decl",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 12: // global_decl ::= var_func_decl EQUAL assigment_type COMMA var_decl SEMICOLON 
=======
          case 15: // global_decl ::= var_func_decl EQUAL assigment_type COMMA var_decl SEMICOLON 
>>>>>>> parent of e8d340d... version 3.2
            {
              String RESULT =null;
		int atleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int atright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String at = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int vdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String vd = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("global_decl",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 13: // global_decl ::= var_func_decl SEMICOLON 
=======
          case 16: // global_decl ::= var_func_decl SEMICOLON 
>>>>>>> parent of e8d340d... version 3.2
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("global_decl",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 14: // global_decl ::= var_func_decl EQUAL assigment_type SEMICOLON 
=======
          case 17: // global_decl ::= var_func_decl EQUAL assigment_type SEMICOLON 
>>>>>>> parent of e8d340d... version 3.2
            {
              String RESULT =null;
		int atleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int atright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String at = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("global_decl",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 15: // global_decl ::= I_CHAR IDENTIFIER EQUAL LITERAL_CHAR SEMICOLON 
=======
          case 18: // global_decl ::= I_CHAR IDENTIFIER EQUAL LITERAL_CHAR SEMICOLON 
>>>>>>> parent of e8d340d... version 3.2
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int i1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String i1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("global_decl",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 16: // var_type ::= I_SHORT 
=======
          case 19: // var_type ::= I_SHORT 
>>>>>>> parent of e8d340d... version 3.2
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_type",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 17: // var_type ::= I_LONG 
=======
          case 20: // var_type ::= I_LONG 
>>>>>>> parent of e8d340d... version 3.2
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_type",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 18: // var_type ::= I_INT 
=======
          case 21: // var_type ::= I_INT 
>>>>>>> parent of e8d340d... version 3.2
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_type",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 19: // var_type ::= I_CHAR MUL 
=======
          case 22: // var_type ::= I_CHAR MUL 
>>>>>>> parent of e8d340d... version 3.2
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String m = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_type",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 20: // var_decl ::= IDENTIFIER EQUAL assigment_type 
=======
          case 23: // var_decl ::= IDENTIFIER EQUAL assigment_type 
>>>>>>> parent of e8d340d... version 3.2
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int atleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int atright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String at = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_decl",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 21: // var_decl ::= IDENTIFIER 
=======
          case 24: // var_decl ::= IDENTIFIER 
>>>>>>> parent of e8d340d... version 3.2
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_decl",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 22: // var_decl ::= IDENTIFIER EQUAL assigment_type COMMA var_decl 
=======
          case 25: // var_decl ::= IDENTIFIER EQUAL assigment_type COMMA var_decl 
>>>>>>> parent of e8d340d... version 3.2
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int atleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int atright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String at = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int vdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String vd = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_decl",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 23: // var_decl ::= IDENTIFIER COMMA var_decl 
=======
          case 26: // var_decl ::= IDENTIFIER COMMA var_decl 
>>>>>>> parent of e8d340d... version 3.2
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int vdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String vd = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_decl",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 24: // var_decl ::= IDENTIFIER error var_decl 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int vdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String vd = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		addSintaxError(i," Token missing");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_decl",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // assigment_type ::= LITERAL_STR 
=======
          case 27: // assigment_type ::= LITERAL_STR 
>>>>>>> parent of e8d340d... version 3.2
            {
              String RESULT =null;
		int lsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String ls = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assigment_type",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // assigment_type ::= expr_math 
            {
              String RESULT =null;
		int emleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int emright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String em = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assigment_type",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 27: // assigment_type ::= literal 
=======
          case 29: // assigment_type ::= call_fun 
>>>>>>> parent of e8d340d... version 3.2
            {
              String RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assigment_type",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // const_decl ::= I_CONST var_type var_decl SEMICOLON 
            {
              String RESULT =null;
		int vtleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int vtright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String vt = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int vdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String vd = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("const_decl",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // funct_decl ::= functin_init OPEN_BRACKET var_func_decl_list CLOSE_BRACKET OPEN_KEY stmts CLOSE_KEY 
            {
              String RESULT =null;
		int fileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int firight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String fi = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int obleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int obright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String ob = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int vfdlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int vfdlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String vfdl = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int cbleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int cbright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String cb = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int okleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int okright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String ok = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ckleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ckright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String ck = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funct_decl",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // funct_decl ::= functin_init OPEN_BRACKET CLOSE_BRACKET OPEN_KEY stmts CLOSE_KEY 
            {
              String RESULT =null;
		int fileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int firight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String fi = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int obleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int obright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String ob = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int cbleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int cbright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String cb = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int okleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int okright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String ok = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ckleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ckright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String ck = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funct_decl",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // funct_decl ::= functin_init OPEN_BRACKET CLOSE_BRACKET OPEN_KEY CLOSE_KEY 
            {
              String RESULT =null;
		int fileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int firight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String fi = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int obleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int obright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String ob = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int cbleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cbright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String cb = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int okleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int okright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String ok = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ckleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ckright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String ck = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funct_decl",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // funct_decl ::= functin_init OPEN_BRACKET var_func_decl_list CLOSE_BRACKET OPEN_KEY CLOSE_KEY 
            {
              String RESULT =null;
		int fileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int firight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String fi = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int obleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int obright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String ob = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int vfdlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int vfdlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String vfdl = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int cbleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cbright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String cb = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int okleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int okright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String ok = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ckleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ckright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String ck = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funct_decl",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 33: // funct_decl ::= functin_init OPEN_BRACKET error CLOSE_BRACKET OPEN_KEY CLOSE_KEY 
            {
              String RESULT =null;
		int fileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int firight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String fi = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int obleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int obright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String ob = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int cbleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cbright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String cb = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int okleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int okright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String ok = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ckleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ckright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String ck = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		addSintaxError(cb,"Function param invalid");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funct_decl",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // funct_decl ::= functin_init OPEN_BRACKET error OPEN_KEY CLOSE_KEY 
            {
              String RESULT =null;
		int fileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int firight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String fi = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int obleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int obright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String ob = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int okleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int okright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String ok = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ckleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ckright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String ck = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		addSintaxError(ok," Token missing ) ");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funct_decl",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // funct_decl ::= functin_init OPEN_BRACKET CLOSE_BRACKET error stmts CLOSE_KEY 
            {
              String RESULT =null;
		int fileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int firight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String fi = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int obleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int obright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String ob = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int cbleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int cbright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String cb = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ckleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ckright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String ck = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		addSintaxError(cb," Token missing { ");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funct_decl",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // funct_decl ::= functin_init OPEN_BRACKET var_func_decl_list CLOSE_BRACKET error stmts CLOSE_KEY 
            {
              String RESULT =null;
		int fileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int firight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String fi = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int obleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int obright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String ob = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int vfdlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int vfdlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String vfdl = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int cbleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int cbright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String cb = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ckleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ckright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String ck = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		addSintaxError(ck," Token missing { ");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funct_decl",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // functin_init ::= var_func_decl 
=======
          case 35: // functin_init ::= var_func_decl 
>>>>>>> parent of e8d340d... version 3.2
            {
              String RESULT =null;
		int cfdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cfdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String cfd = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("functin_init",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 38: // functin_init ::= I_VOID IDENTIFIER 
=======
          case 36: // functin_init ::= I_VOID IDENTIFIER 
>>>>>>> parent of e8d340d... version 3.2
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("functin_init",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 39: // var_func_decl_list ::= var_func_decl COMMA var_func_decl_list 
=======
          case 37: // var_func_decl_list ::= var_func_decl COMMA var_func_decl_list 
>>>>>>> parent of e8d340d... version 3.2
            {
              String RESULT =null;
		int vfdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int vfdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String vfd = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int vfdlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vfdlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String vfdl = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_func_decl_list",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 40: // var_func_decl_list ::= var_func_decl 
=======
          case 38: // var_func_decl_list ::= var_func_decl 
>>>>>>> parent of e8d340d... version 3.2
            {
              String RESULT =null;
		int vfdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vfdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String vfd = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_func_decl_list",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 41: // var_func_decl ::= var_type IDENTIFIER 
=======
          case 39: // var_func_decl ::= var_type IDENTIFIER 
>>>>>>> parent of e8d340d... version 3.2
            {
              String RESULT =null;
		int vtleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vtright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String vt = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_func_decl",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 42: // stmts ::= const_decl stmts 
=======
          case 40: // stmts ::= const_decl stmts 
>>>>>>> parent of e8d340d... version 3.2
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmts",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 43: // stmts ::= const_decl 
=======
          case 41: // stmts ::= const_decl 
>>>>>>> parent of e8d340d... version 3.2
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmts",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 44: // stmts ::= global_decl stmts 
=======
          case 42: // stmts ::= global_decl stmts 
>>>>>>> parent of e8d340d... version 3.2
            {
              String RESULT =null;
		int glleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int glright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String gl = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmts",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 45: // stmts ::= global_decl 
=======
          case 43: // stmts ::= global_decl 
>>>>>>> parent of e8d340d... version 3.2
            {
              String RESULT =null;
		int glleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int glright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String gl = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmts",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 46: // stmts ::= structs stmts 
=======
          case 44: // stmts ::= structs stmts 
>>>>>>> parent of e8d340d... version 3.2
            {
              String RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int stright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String st = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int smleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int smright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String sm = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmts",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 47: // stmts ::= structs 
=======
          case 45: // stmts ::= structs 
>>>>>>> parent of e8d340d... version 3.2
            {
              String RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String st = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmts",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 48: // stmts ::= asign_equal SEMICOLON stmts 
=======
          case 46: // stmts ::= asign_equal SEMICOLON stmts 
>>>>>>> parent of e8d340d... version 3.2
            {
              String RESULT =null;
		int aeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String ae = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int scleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int scright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String sc = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int smleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int smright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String sm = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmts",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 49: // stmts ::= asign_equal SEMICOLON 
=======
          case 47: // stmts ::= asign_equal SEMICOLON 
>>>>>>> parent of e8d340d... version 3.2
            {
              String RESULT =null;
		int aeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String ae = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int scleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int scright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String sc = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmts",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 50: // stmts ::= IDENTIFIER EQUAL assigment_type SEMICOLON stmts 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int atleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int atright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String at = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int smleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int smright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String sm = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmts",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // stmts ::= IDENTIFIER EQUAL assigment_type SEMICOLON 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int atleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int atright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String at = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmts",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // stmts ::= MUL IDENTIFIER EQUAL assigment_type SEMICOLON stmts 
            {
              String RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String m = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int atleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int atright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String at = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int smleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int smright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String sm = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmts",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // stmts ::= MUL IDENTIFIER EQUAL assigment_type SEMICOLON 
            {
              String RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String m = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int atleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int atright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String at = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmts",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // stmts ::= incr_decr SEMICOLON stmts 
=======
          case 48: // stmts ::= incr_decr SEMICOLON stmts 
>>>>>>> parent of e8d340d... version 3.2
            {
              String RESULT =null;
		int scleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int scright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String sc = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int smleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int smright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String sm = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmts",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 55: // stmts ::= incr_decr SEMICOLON 
=======
          case 49: // stmts ::= incr_decr 
>>>>>>> parent of e8d340d... version 3.2
            {
              String RESULT =null;
		int scleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int scright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String sc = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmts",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 56: // stmts ::= expr_math SEMICOLON stmts 
=======
          case 50: // stmts ::= expr_math SEMICOLON stmts 
>>>>>>> parent of e8d340d... version 3.2
            {
              String RESULT =null;
		int scleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int scright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String sc = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int smleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int smright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String sm = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmts",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 57: // stmts ::= expr_math 
=======
          case 51: // stmts ::= expr_math 
>>>>>>> parent of e8d340d... version 3.2
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmts",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 58: // stmts ::= read_func stmts 
=======
          case 52: // stmts ::= read_func stmts 
>>>>>>> parent of e8d340d... version 3.2
            {
              String RESULT =null;
		int rfleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int rfright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String rf = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmts",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 59: // stmts ::= read_func 
=======
          case 53: // stmts ::= read_func 
>>>>>>> parent of e8d340d... version 3.2
            {
              String RESULT =null;
		int rfleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rfright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String rf = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmts",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 60: // stmts ::= write_func stmts 
=======
          case 54: // stmts ::= write_fun stmts 
>>>>>>> parent of e8d340d... version 3.2
            {
              String RESULT =null;
		int wfleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int wfright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String wf = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmts",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 61: // stmts ::= write_func 
=======
          case 55: // stmts ::= write_fun 
>>>>>>> parent of e8d340d... version 3.2
            {
              String RESULT =null;
		int wfleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int wfright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String wf = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmts",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 62: // stmts ::= call_fun SEMICOLON stmts 
=======
          case 56: // stmts ::= call_fun SEMICOLON stmts 
>>>>>>> parent of e8d340d... version 3.2
            {
              String RESULT =null;
		int cfleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String cf = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int scleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int scright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String sc = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmts",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 63: // stmts ::= call_fun SEMICOLON 
=======
          case 57: // stmts ::= call_fun SEMICOLON 
>>>>>>> parent of e8d340d... version 3.2
            {
              String RESULT =null;
		int cfleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String cf = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int scleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int scright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String sc = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmts",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 64: // stmts ::= return stmts 
=======
          case 58: // stmts ::= return stmts 
>>>>>>> parent of e8d340d... version 3.2
            {
              String RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmts",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 65: // stmts ::= return 
=======
          case 59: // stmts ::= return 
>>>>>>> parent of e8d340d... version 3.2
            {
              String RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmts",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 66: // stmts_switch ::= structs stmts_switch 
=======
          case 60: // stmts_switch ::= structs stmts_switch 
>>>>>>> parent of e8d340d... version 3.2
            {
              String RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int stright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String st = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int swleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int swright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String sw = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmts_switch",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 67: // stmts_switch ::= structs 
=======
          case 61: // stmts_switch ::= structs 
>>>>>>> parent of e8d340d... version 3.2
            {
              String RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String st = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmts_switch",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 68: // stmts_switch ::= asign_equal SEMICOLON stmts_switch 
=======
          case 62: // stmts_switch ::= asign_equal SEMICOLON stmts_switch 
>>>>>>> parent of e8d340d... version 3.2
            {
              String RESULT =null;
		int aeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String ae = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int scleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int scright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String sc = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int swleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int swright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String sw = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmts_switch",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 69: // stmts_switch ::= asign_equal SEMICOLON 
=======
          case 63: // stmts_switch ::= asign_equal SEMICOLON 
>>>>>>> parent of e8d340d... version 3.2
            {
              String RESULT =null;
		int aeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String ae = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int scleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int scright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String sc = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmts_switch",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 70: // stmts_switch ::= IDENTIFIER EQUAL assigment_type SEMICOLON stmts_switch 
=======
          case 64: // stmts_switch ::= IDENTIFIER EQUAL assigment_type SEMICOLON stmts_switch 
>>>>>>> parent of e8d340d... version 3.2
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int atleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int atright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String at = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int swleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int swright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String sw = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmts_switch",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 71: // stmts_switch ::= IDENTIFIER EQUAL assigment_type SEMICOLON 
=======
          case 65: // stmts_switch ::= IDENTIFIER EQUAL assigment_type SEMICOLON 
>>>>>>> parent of e8d340d... version 3.2
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int atleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int atright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String at = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmts_switch",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 72: // stmts_switch ::= MUL IDENTIFIER EQUAL assigment_type SEMICOLON stmts_switch 
            {
              String RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String m = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int atleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int atright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String at = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int swleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int swright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String sw = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmts_switch",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // stmts_switch ::= MUL IDENTIFIER EQUAL assigment_type SEMICOLON 
            {
              String RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String m = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int atleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int atright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String at = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmts_switch",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // stmts_switch ::= incr_decr SEMICOLON stmts_switch 
=======
          case 66: // stmts_switch ::= incr_decr SEMICOLON stmts_switch 
>>>>>>> parent of e8d340d... version 3.2
            {
              String RESULT =null;
		int scleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int scright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String sc = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int swleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int swright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String sw = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmts_switch",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 75: // stmts_switch ::= incr_decr 
=======
          case 67: // stmts_switch ::= incr_decr 
>>>>>>> parent of e8d340d... version 3.2
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmts_switch",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 76: // stmts_switch ::= expr_math SEMICOLON stmts_switch 
=======
          case 68: // stmts_switch ::= expr_math SEMICOLON stmts_switch 
>>>>>>> parent of e8d340d... version 3.2
            {
              String RESULT =null;
		int scleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int scright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String sc = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int swleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int swright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String sw = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmts_switch",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 77: // stmts_switch ::= expr_math 
=======
          case 69: // stmts_switch ::= expr_math 
>>>>>>> parent of e8d340d... version 3.2
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmts_switch",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 78: // stmts_switch ::= read_func stmts_switch 
=======
          case 70: // stmts_switch ::= read_func stmts_switch 
>>>>>>> parent of e8d340d... version 3.2
            {
              String RESULT =null;
		int rfleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int rfright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String rf = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ssleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String ss = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmts_switch",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 79: // stmts_switch ::= read_func 
=======
          case 71: // stmts_switch ::= read_func 
>>>>>>> parent of e8d340d... version 3.2
            {
              String RESULT =null;
		int rfleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rfright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String rf = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmts_switch",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 80: // stmts_switch ::= write_func stmts_switch 
=======
          case 72: // stmts_switch ::= write_fun stmts_switch 
>>>>>>> parent of e8d340d... version 3.2
            {
              String RESULT =null;
		int wfleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int wfright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String wf = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ssleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String ss = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmts_switch",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 81: // stmts_switch ::= write_func 
=======
          case 73: // stmts_switch ::= write_fun 
>>>>>>> parent of e8d340d... version 3.2
            {
              String RESULT =null;
		int wfleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int wfright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String wf = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmts_switch",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 82: // stmts_switch ::= call_fun SEMICOLON stmts_switch 
=======
          case 74: // stmts_switch ::= call_fun SEMICOLON stmts_switch 
>>>>>>> parent of e8d340d... version 3.2
            {
              String RESULT =null;
		int cfleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String cf = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int scleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int scright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String sc = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int swleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int swright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String sw = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmts_switch",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 83: // stmts_switch ::= call_fun SEMICOLON 
=======
          case 75: // stmts_switch ::= call_fun SEMICOLON 
>>>>>>> parent of e8d340d... version 3.2
            {
              String RESULT =null;
		int cfleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String cf = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int scleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int scright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String sc = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmts_switch",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 84: // stmts_switch ::= return stmts_switch 
=======
          case 76: // stmts_switch ::= return stmts_switch 
>>>>>>> parent of e8d340d... version 3.2
            {
              String RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmts_switch",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 85: // stmts_switch ::= return 
=======
          case 77: // stmts_switch ::= return 
>>>>>>> parent of e8d340d... version 3.2
            {
              String RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmts_switch",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 86: // call_fun ::= IDENTIFIER OPEN_BRACKET CLOSE_BRACKET 
=======
          case 78: // call_fun ::= IDENTIFIER OPEN_BRACKET CLOSE_BRACKET 
>>>>>>> parent of e8d340d... version 3.2
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int obleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int obright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String ob = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cbleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cbright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String cb = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("call_fun",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 87: // call_fun ::= IDENTIFIER OPEN_BRACKET var_list CLOSE_BRACKET 
=======
          case 79: // call_fun ::= IDENTIFIER OPEN_BRACKET var_list CLOSE_BRACKET 
>>>>>>> parent of e8d340d... version 3.2
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int obleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int obright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String ob = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int vlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String vl = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cbleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cbright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String cb = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("call_fun",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 88: // read_func ::= I_READ OPEN_BRACKET IDENTIFIER CLOSE_BRACKET SEMICOLON 
=======
          case 80: // read_func ::= I_READ OPEN_BRACKET IDENTIFIER CLOSE_BRACKET SEMICOLON 
>>>>>>> parent of e8d340d... version 3.2
            {
              String RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int obleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int obright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String ob = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cbleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cbright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String cb = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("read_func",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 89: // read_func ::= OPEN_BRACKET CLOSE_BRACKET SEMICOLON 
=======
          case 81: // read_func ::= OPEN_BRACKET CLOSE_BRACKET SEMICOLON 
>>>>>>> parent of e8d340d... version 3.2
            {
              String RESULT =null;
		int obleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int obright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String ob = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cbleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cbright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String cb = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("read_func",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 90: // write_func ::= I_WRITE OPEN_BRACKET var_list CLOSE_BRACKET SEMICOLON 
            {
              String RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String w = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int obleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int obright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String ob = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int vlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int vlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String vl = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cbleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cbright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String cb = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("write_func",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // var_list ::= assigment_type COMMA var_list 
=======
          case 82: // var_list ::= assigment_type COMMA var_list 
>>>>>>> parent of e8d340d... version 3.2
            {
              String RESULT =null;
		int atleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int atright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String at = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int vlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String vl = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_list",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 92: // var_list ::= assigment_type 
=======
          case 83: // var_list ::= assigment_type 
>>>>>>> parent of e8d340d... version 3.2
            {
              String RESULT =null;
		int atleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int atright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String at = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_list",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 93: // structs ::= struct_decl OPEN_KEY stmts CLOSE_KEY 
=======
          case 84: // structs ::= struct_decl OPEN_KEY stmts CLOSE_KEY 
>>>>>>> parent of e8d340d... version 3.2
            {
              String RESULT =null;
		int okleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int okright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String ok = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ckleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ckright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String ck = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("structs",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 94: // structs ::= switch_sent 
=======
          case 85: // structs ::= switch_sent 
>>>>>>> parent of e8d340d... version 3.2
            {
              String RESULT =null;
		int ssleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String ss = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("structs",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 95: // structs ::= if_sent 
=======
          case 86: // structs ::= if_sent 
>>>>>>> parent of e8d340d... version 3.2
            {
              String RESULT =null;
		int isleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int isright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String is = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("structs",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 96: // struct_decl ::= struct_type OPEN_BRACKET condition CLOSE_BRACKET 
=======
          case 87: // struct_decl ::= struct_type OPEN_BRACKET condition CLOSE_BRACKET 
>>>>>>> parent of e8d340d... version 3.2
            {
              String RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int stright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String st = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int obleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int obright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String ob = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cbleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cbright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String cb = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("struct_decl",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 97: // struct_decl ::= struct_type OPEN_BRACKET condition_for CLOSE_BRACKET 
=======
          case 88: // struct_decl ::= struct_type OPEN_BRACKET condition_for CLOSE_BRACKET 
>>>>>>> parent of e8d340d... version 3.2
            {
              String RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int stright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String st = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int obleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int obright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String ob = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cfleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String cf = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cbleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cbright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String cb = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("struct_decl",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 98: // struct_type ::= I_FOR 
=======
          case 89: // struct_type ::= I_FOR 
>>>>>>> parent of e8d340d... version 3.2
            {
              String RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("struct_type",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 99: // struct_type ::= I_WHILE 
=======
          case 90: // struct_type ::= I_WHILE 
>>>>>>> parent of e8d340d... version 3.2
            {
              String RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String w = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("struct_type",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 100: // if_sent ::= if_inst else_inst 
=======
          case 91: // if_sent ::= if_inst else_inst 
>>>>>>> parent of e8d340d... version 3.2
            {
              String RESULT =null;
		int isleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int isright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String is = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int esleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int esright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String es = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_sent",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 101: // if_sent ::= if_inst 
=======
          case 92: // if_sent ::= if_inst 
>>>>>>> parent of e8d340d... version 3.2
            {
              String RESULT =null;
		int isleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int isright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String is = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_sent",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 102: // if_inst ::= I_IF OPEN_BRACKET condition CLOSE_BRACKET OPEN_KEY stmts CLOSE_KEY 
=======
          case 93: // if_inst ::= I_IF OPEN_BRACKET condition CLOSE_BRACKET OPEN_KEY stmts CLOSE_KEY 
>>>>>>> parent of e8d340d... version 3.2
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int obleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int obright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String ob = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int cbleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int cbright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String cb = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int okleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int okright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String ok = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ckleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ckright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String ck = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_inst",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 103: // else_inst ::= I_ELSE OPEN_KEY stmts CLOSE_KEY 
=======
          case 94: // else_inst ::= I_ELSE OPEN_KEY stmts CLOSE_KEY 
>>>>>>> parent of e8d340d... version 3.2
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int okleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int okright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String ok = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ckleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ckright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String ck = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("else_inst",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 104: // switch_sent ::= I_SWITCH OPEN_BRACKET var CLOSE_BRACKET OPEN_KEY cases_switch CLOSE_KEY 
=======
          case 95: // switch_sent ::= I_SWITCH OPEN_BRACKET var CLOSE_BRACKET OPEN_KEY cases_switch CLOSE_KEY 
>>>>>>> parent of e8d340d... version 3.2
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int okleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int okright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String ok = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int csleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int csright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String cs = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ckleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ckright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String ck = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("switch_sent",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 105: // cases_switch ::= mult_case_stmt case_default 
=======
          case 96: // cases_switch ::= mult_case_stmt case_default 
>>>>>>> parent of e8d340d... version 3.2
            {
              String RESULT =null;
		int mcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int mcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String mc = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String cd = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cases_switch",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 106: // cases_switch ::= mult_case_stmt 
=======
          case 97: // cases_switch ::= mult_case_stmt 
>>>>>>> parent of e8d340d... version 3.2
            {
              String RESULT =null;
		int mcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int mcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String mc = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cases_switch",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 107: // mult_case_stmt ::= case_stmt mult_case_stmt 
=======
          case 98: // mult_case_stmt ::= case_stmt mult_case_stmt 
>>>>>>> parent of e8d340d... version 3.2
            {
              String RESULT =null;
		int csleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int csright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String cs = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int mcsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int mcsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String mcs = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("mult_case_stmt",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 108: // mult_case_stmt ::= case_stmt 
=======
          case 99: // mult_case_stmt ::= case_stmt 
>>>>>>> parent of e8d340d... version 3.2
            {
              String RESULT =null;
		int csleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int csright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String cs = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("mult_case_stmt",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 109: // case_default ::= I_DEFAULT COLON stmts_switch case_fin 
=======
          case 100: // case_default ::= I_DEFAULT COLON stmts_switch case_fin 
>>>>>>> parent of e8d340d... version 3.2
            {
              String RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cfleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String cf = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("case_default",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 110: // case_default ::= I_DEFAULT COLON stmts_switch 
=======
          case 101: // case_default ::= I_DEFAULT COLON stmts_switch 
>>>>>>> parent of e8d340d... version 3.2
            {
              String RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("case_default",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 111: // case_default ::= I_DEFAULT COLON stmts_switch case_fin return 
=======
          case 102: // case_default ::= I_DEFAULT COLON stmts_switch case_fin return 
>>>>>>> parent of e8d340d... version 3.2
            {
              String RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cfleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String cf = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("case_default",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 112: // case_stmt ::= I_CASE NUMBER COLON stmts_switch case_fin 
=======
          case 103: // case_stmt ::= I_CASE NUMBER COLON stmts_switch case_fin 
>>>>>>> parent of e8d340d... version 3.2
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cfleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String cf = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("case_stmt",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 113: // case_stmt ::= I_CASE NUMBER COLON stmts_switch 
=======
          case 104: // case_stmt ::= I_CASE NUMBER COLON stmts_switch 
>>>>>>> parent of e8d340d... version 3.2
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("case_stmt",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 114: // case_stmt ::= I_CASE NUMBER COLON stmts_switch case_fin return 
=======
          case 105: // case_stmt ::= I_CASE NUMBER COLON stmts_switch case_fin return 
>>>>>>> parent of e8d340d... version 3.2
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cfleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String cf = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("case_stmt",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 115: // case_stmt ::= I_CASE NUMBER COLON case_fin 
=======
          case 106: // case_stmt ::= I_CASE NUMBER COLON case_fin 
>>>>>>> parent of e8d340d... version 3.2
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cfleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String cf = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("case_stmt",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 116: // case_stmt ::= I_CASE NUMBER COLON case_fin return 
=======
          case 107: // case_stmt ::= I_CASE NUMBER COLON case_fin return 
>>>>>>> parent of e8d340d... version 3.2
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int cfleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String cf = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("case_stmt",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 117: // case_stmt ::= I_CASE NUMBER COLON 
=======
          case 108: // case_stmt ::= I_CASE NUMBER COLON 
>>>>>>> parent of e8d340d... version 3.2
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("case_stmt",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 118: // case_fin ::= I_BREAK SEMICOLON 
=======
          case 109: // case_fin ::= I_BREAK SEMICOLON 
>>>>>>> parent of e8d340d... version 3.2
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("case_fin",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 119: // case_fin ::= I_CONTINUE SEMICOLON 
=======
          case 110: // case_fin ::= I_CONTINUE SEMICOLON 
>>>>>>> parent of e8d340d... version 3.2
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("case_fin",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 120: // return ::= I_RETURN var SEMICOLON 
=======
          case 111: // return ::= I_RETURN var SEMICOLON 
>>>>>>> parent of e8d340d... version 3.2
            {
              String RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("return",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 121: // return ::= I_RETURN SEMICOLON 
=======
          case 112: // return ::= I_RETURN SEMICOLON 
>>>>>>> parent of e8d340d... version 3.2
            {
              String RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("return",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 122: // change_var ::= INCR 
=======
          case 113: // change_var ::= INCR 
>>>>>>> parent of e8d340d... version 3.2
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("change_var",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 123: // change_var ::= DECR 
=======
          case 114: // change_var ::= DECR 
>>>>>>> parent of e8d340d... version 3.2
            {
              String RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("change_var",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 124: // condition ::= var comparator var 
=======
          case 115: // condition ::= var comparator var 
>>>>>>> parent of e8d340d... version 3.2
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condition",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 125: // condition_for ::= var_type var_decl SEMICOLON condition SEMICOLON incr_decr 
=======
          case 116: // condition_for ::= var_type var_decl SEMICOLON condition SEMICOLON incr_decr 
>>>>>>> parent of e8d340d... version 3.2
            {
              String RESULT =null;
		int vtleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int vtright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String vt = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int vdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String vd = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int scleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int scright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String sc = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sc1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sc1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String sc1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condition_for",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 126: // incr_decr ::= IDENTIFIER change_var 
=======
          case 117: // incr_decr ::= IDENTIFIER change_var 
>>>>>>> parent of e8d340d... version 3.2
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cvleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cvright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String cv = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("incr_decr",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 127: // comparator ::= EQUAL_TO 
=======
          case 118: // comparator ::= EQUAL_TO 
>>>>>>> parent of e8d340d... version 3.2
            {
              String RESULT =null;
		int etleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int etright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String et = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparator",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 128: // comparator ::= GREATER_EQUAL 
=======
          case 119: // comparator ::= GREATER_EQUAL 
>>>>>>> parent of e8d340d... version 3.2
            {
              String RESULT =null;
		int geleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int geright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String ge = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparator",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 129: // comparator ::= LESS 
=======
          case 120: // comparator ::= LESS 
>>>>>>> parent of e8d340d... version 3.2
            {
              String RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparator",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 130: // comparator ::= LESS_EQUAL 
=======
          case 121: // comparator ::= LESS_EQUAL 
>>>>>>> parent of e8d340d... version 3.2
            {
              String RESULT =null;
		int leleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int leright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String le = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparator",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 131: // comparator ::= GREATER 
=======
          case 122: // comparator ::= GREATER 
>>>>>>> parent of e8d340d... version 3.2
            {
              String RESULT =null;
		int grleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int grright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String gr = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparator",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 132: // comparator ::= NOT_EQUAL 
=======
          case 123: // comparator ::= NOT_EQUAL 
>>>>>>> parent of e8d340d... version 3.2
            {
              String RESULT =null;
		int neleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int neright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String ne = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparator",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 133: // comparator ::= LOGICAL_AND 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparator",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // comparator ::= LOGICAL_OR 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparator",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // var ::= NUMBER 
=======
          case 124: // var ::= NUMBER 
>>>>>>> parent of e8d340d... version 3.2
            {
              String RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 136: // var ::= IDENTIFIER 
=======
          case 125: // var ::= IDENTIFIER 
>>>>>>> parent of e8d340d... version 3.2
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 137: // var ::= LOGICAL_NOT IDENTIFIER 
            {
              String RESULT =null;
		int lnleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lnright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String ln = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // asign_equal ::= IDENTIFIER equals var 
=======
          case 126: // asign_equal ::= IDENTIFIER equals var 
>>>>>>> parent of e8d340d... version 3.2
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asign_equal",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 139: // equals ::= ADD_EQUAL 
=======
          case 127: // equals ::= ADD_EQUAL 
>>>>>>> parent of e8d340d... version 3.2
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("equals",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 140: // equals ::= SUB_EQUAL 
=======
          case 128: // equals ::= SUB_EQUAL 
>>>>>>> parent of e8d340d... version 3.2
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("equals",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 141: // equals ::= MUL_EQUAL 
=======
          case 129: // equals ::= MUL_EQUAL 
>>>>>>> parent of e8d340d... version 3.2
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("equals",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 142: // equals ::= DIV_EQUAL 
=======
          case 130: // equals ::= DIV_EQUAL 
>>>>>>> parent of e8d340d... version 3.2
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("equals",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 143: // expr ::= expr_math 
=======
          case 131: // expr ::= expr_math 
>>>>>>> parent of e8d340d... version 3.2
            {
              String RESULT =null;
		int emleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int emright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String em = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 144: // expr_math ::= OPEN_BRACKET expr_math CLOSE_BRACKET expr_math 
=======
          case 132: // expr_math ::= expr_uni expr_math 
            {
              String RESULT =null;
		int euleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int euright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String eu = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int emleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int emright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String em = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_math",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // expr_math ::= expr_uni 
            {
              String RESULT =null;
		int euleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int euright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String eu = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_math",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // expr_math ::= symbol OPEN_BRACKET expr_math CLOSE_BRACKET expr_math 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int emleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int emright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String em = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int em1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int em1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String em1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_math",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // expr_math ::= symbol OPEN_BRACKET expr_math CLOSE_BRACKET 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int emleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int emright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String em = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_math",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // expr_math ::= OPEN_BRACKET expr_math CLOSE_BRACKET expr_math 
>>>>>>> parent of e8d340d... version 3.2
            {
              String RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int emleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int emright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String em = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int em1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int em1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String em1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_math",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 145: // expr_math ::= OPEN_BRACKET expr_math CLOSE_BRACKET 
=======
          case 137: // expr_math ::= OPEN_BRACKET expr_math CLOSE_BRACKET 
>>>>>>> parent of e8d340d... version 3.2
            {
              String RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int emleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int emright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String em = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_math",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 146: // expr_math ::= literal expr_uni 
=======
          case 138: // expr_math ::= literal expr_uni expr_math 
>>>>>>> parent of e8d340d... version 3.2
            {
              String RESULT =null;
		int uleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String u = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int euleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int euright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String eu = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_math",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 147: // expr_math ::= expr_uni 
=======
          case 139: // expr_math ::= literal expr_uni 
>>>>>>> parent of e8d340d... version 3.2
            {
              String RESULT =null;
		int euleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int euright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String eu = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_math",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 148: // expr_uni ::= ADD literal expr_uni 
=======
          case 140: // expr_math ::= literal 
>>>>>>> parent of e8d340d... version 3.2
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int euleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int euright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String eu = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_uni",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 149: // expr_uni ::= ADD literal 
=======
          case 141: // expr_uni ::= ADD literal 
>>>>>>> parent of e8d340d... version 3.2
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_uni",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 150: // expr_uni ::= SUB literal expr_uni 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int euleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int euright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String eu = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_uni",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // expr_uni ::= SUB literal 
=======
          case 142: // expr_uni ::= SUB literal 
>>>>>>> parent of e8d340d... version 3.2
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_uni",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 152: // expr_uni ::= MUL literal expr_uni 
            {
              String RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String m = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int euleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int euright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String eu = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_uni",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // expr_uni ::= MUL literal 
=======
          case 143: // expr_uni ::= MUL literal 
>>>>>>> parent of e8d340d... version 3.2
            {
              String RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String m = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_uni",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 154: // expr_uni ::= DIV literal expr_uni 
            {
              String RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int euleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int euright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String eu = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_uni",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // expr_uni ::= DIV literal 
=======
          case 144: // expr_uni ::= DIV literal 
>>>>>>> parent of e8d340d... version 3.2
            {
              String RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_uni",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 156: // expr_uni ::= MOD literal expr_uni 
            {
              String RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int euleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int euright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String eu = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_uni",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // expr_uni ::= MOD literal 
=======
          case 145: // expr_uni ::= MOD literal 
>>>>>>> parent of e8d340d... version 3.2
            {
              String RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_uni",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 158: // symbol ::= ADD 
=======
          case 146: // symbol ::= ADD 
>>>>>>> parent of e8d340d... version 3.2
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("symbol",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 159: // symbol ::= SUB 
=======
          case 147: // symbol ::= SUB 
>>>>>>> parent of e8d340d... version 3.2
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("symbol",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 160: // symbol ::= MUL 
=======
          case 148: // symbol ::= MUL 
>>>>>>> parent of e8d340d... version 3.2
            {
              String RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String m = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("symbol",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 161: // symbol ::= DIV 
=======
          case 149: // symbol ::= DIV 
>>>>>>> parent of e8d340d... version 3.2
            {
              String RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("symbol",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 162: // symbol ::= MOD 
=======
          case 150: // symbol ::= MOD 
>>>>>>> parent of e8d340d... version 3.2
            {
              String RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("symbol",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 163: // literal ::= NUMBER 
=======
          case 151: // literal ::= NUMBER 
>>>>>>> parent of e8d340d... version 3.2
            {
              String RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 164: // literal ::= IDENTIFIER 
=======
          case 152: // literal ::= IDENTIFIER 
>>>>>>> parent of e8d340d... version 3.2
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 165: // literal ::= OCTAL_NUMBER 
=======
          case 153: // literal ::= OCTAL_NUMBER 
>>>>>>> parent of e8d340d... version 3.2
            {
              String RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 166: // literal ::= HEXADECIMAL_NUMBER 
=======
          case 154: // literal ::= HEXADECIMAL_NUMBER 
>>>>>>> parent of e8d340d... version 3.2
            {
              String RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 167: // literal ::= BINARY_NUMBER 
=======
          case 155: // literal ::= BINARY_NUMBER 
>>>>>>> parent of e8d340d... version 3.2
            {
              String RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // literal ::= call_fun 
            {
              String RESULT =null;
		int cfleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String cf = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
