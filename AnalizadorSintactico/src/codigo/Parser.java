
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package codigo;

import java_cup.runtime.*;
import java.util.LinkedList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\242\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\003\000\002\003\003\000\002\013\003" +
    "\000\002\013\003\000\002\013\003\000\002\013\004\000" +
    "\002\013\004\000\002\013\005\000\002\013\005\000\002" +
    "\004\006\000\002\004\010\000\002\004\004\000\002\004" +
    "\006\000\002\004\007\000\002\007\003\000\002\007\003" +
    "\000\002\007\003\000\002\007\004\000\002\010\005\000" +
    "\002\010\003\000\002\010\007\000\002\010\005\000\002" +
    "\056\003\000\002\056\003\000\002\056\003\000\002\005" +
    "\006\000\002\006\011\000\002\006\010\000\002\006\007" +
    "\000\002\006\010\000\002\011\003\000\002\011\004\000" +
    "\002\014\005\000\002\014\003\000\002\016\004\000\002" +
    "\015\004\000\002\015\003\000\002\015\004\000\002\015" +
    "\003\000\002\015\004\000\002\015\003\000\002\015\005" +
    "\000\002\015\004\000\002\015\007\000\002\015\006\000" +
    "\002\015\010\000\002\015\007\000\002\015\005\000\002" +
    "\015\003\000\002\015\005\000\002\015\003\000\002\015" +
    "\004\000\002\015\003\000\002\015\004\000\002\015\003" +
    "\000\002\015\005\000\002\015\004\000\002\015\004\000" +
    "\002\015\003\000\002\015\004\000\002\015\003\000\002" +
    "\055\004\000\002\055\003\000\002\055\005\000\002\055" +
    "\004\000\002\055\007\000\002\055\006\000\002\055\010" +
    "\000\002\055\007\000\002\055\005\000\002\055\003\000" +
    "\002\055\005\000\002\055\003\000\002\055\004\000\002" +
    "\055\003\000\002\055\004\000\002\055\003\000\002\055" +
    "\005\000\002\055\004\000\002\055\004\000\002\055\003" +
    "\000\002\057\005\000\002\057\006\000\002\042\007\000" +
    "\002\042\005\000\002\061\007\000\002\060\005\000\002" +
    "\060\003\000\002\017\006\000\002\017\003\000\002\017" +
    "\003\000\002\020\006\000\002\020\006\000\002\021\003" +
    "\000\002\021\003\000\002\036\004\000\002\036\003\000" +
    "\002\037\011\000\002\040\006\000\002\031\011\000\002" +
    "\054\004\000\002\054\003\000\002\032\004\000\002\032" +
    "\003\000\002\053\006\000\002\053\005\000\002\053\007" +
    "\000\002\033\007\000\002\033\006\000\002\033\010\000" +
    "\002\033\006\000\002\033\007\000\002\033\005\000\002" +
    "\034\004\000\002\034\004\000\002\035\005\000\002\035" +
    "\004\000\002\026\003\000\002\026\003\000\002\023\005" +
    "\000\002\022\010\000\002\045\004\000\002\045\004\000" +
    "\002\025\003\000\002\025\003\000\002\025\003\000\002" +
    "\025\003\000\002\025\003\000\002\025\003\000\002\025" +
    "\003\000\002\025\003\000\002\024\003\000\002\024\003" +
    "\000\002\024\004\000\002\041\005\000\002\044\003\000" +
    "\002\044\003\000\002\044\003\000\002\044\003\000\002" +
    "\050\006\000\002\050\005\000\002\050\004\000\002\050" +
    "\003\000\002\047\005\000\002\047\004\000\002\047\005" +
    "\000\002\047\004\000\002\047\005\000\002\047\004\000" +
    "\002\047\005\000\002\047\004\000\002\047\005\000\002" +
    "\047\004\000\002\012\003\000\002\012\003\000\002\012" +
    "\003\000\002\012\003\000\002\012\003\000\002\012\003" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0119\000\022\003\022\047\016\050\017\057\012\060" +
    "\014\062\021\064\011\072\010\001\002\000\024\002\ufffe" +
    "\003\022\047\016\050\017\057\012\060\014\062\021\064" +
    "\011\072\010\001\002\000\004\014\150\001\002\000\024" +
    "\002\ufffa\003\ufffa\047\ufffa\050\ufffa\057\ufffa\060\ufffa\062" +
    "\ufffa\064\ufffa\072\ufffa\001\002\000\024\002\ufffc\003\ufffc" +
    "\047\ufffc\050\ufffc\057\ufffc\060\ufffc\062\ufffc\064\ufffc\072" +
    "\ufffc\001\002\000\012\016\136\017\142\020\141\021\137" +
    "\001\002\000\004\072\135\001\002\000\004\072\uffee\001" +
    "\002\000\004\002\134\001\002\000\004\072\uffef\001\002" +
    "\000\004\072\133\001\002\000\006\011\124\072\127\001" +
    "\002\000\012\047\123\057\012\060\014\062\021\001\002" +
    "\000\012\006\035\014\uffe0\070\034\071\033\001\002\000" +
    "\004\072\ufff0\001\002\000\010\015\030\023\026\070\027" +
    "\001\002\000\004\002\ufffd\001\002\000\004\002\000\001" +
    "\002\000\024\002\ufffb\003\ufffb\047\ufffb\050\ufffb\057\ufffb" +
    "\060\ufffb\062\ufffb\064\ufffb\072\ufffb\001\002\000\024\002" +
    "\ufff8\003\ufff8\047\ufff8\050\ufff8\057\ufff8\060\ufff8\062\ufff8" +
    "\064\ufff8\072\ufff8\001\002\000\024\002\ufff9\003\ufff9\047" +
    "\ufff9\050\ufff9\057\ufff9\060\ufff9\062\ufff9\064\ufff9\072\ufff9" +
    "\001\002\000\006\023\031\070\032\001\002\000\024\002" +
    "\ufff7\003\ufff7\047\ufff7\050\ufff7\057\ufff7\060\ufff7\062\ufff7" +
    "\064\ufff7\072\ufff7\001\002\000\024\002\ufff6\003\ufff6\047" +
    "\ufff6\050\ufff6\057\ufff6\060\ufff6\062\ufff6\064\ufff6\072\ufff6" +
    "\001\002\000\004\072\107\001\002\000\100\002\ufff3\003" +
    "\ufff3\004\ufff3\005\ufff3\007\ufff3\010\ufff3\011\ufff3\012\ufff3" +
    "\013\ufff3\014\ufff3\023\ufff3\041\ufff3\042\ufff3\043\ufff3\044" +
    "\ufff3\045\ufff3\047\ufff3\050\ufff3\051\ufff3\055\ufff3\056\ufff3" +
    "\057\ufff3\060\ufff3\061\ufff3\062\ufff3\063\ufff3\064\ufff3\065" +
    "\ufff3\066\ufff3\067\ufff3\072\ufff3\001\002\000\032\007\051" +
    "\010\052\011\056\012\053\013\043\014\050\035\040\041" +
    "\037\042\044\043\036\044\042\072\054\001\002\000\034" +
    "\007\uff62\010\uff62\011\uff62\012\uff62\013\uff62\015\uff62\023" +
    "\uff62\045\uff62\046\uff62\051\uff62\052\uff62\070\uff62\071\uff62" +
    "\001\002\000\034\007\uff63\010\uff63\011\uff63\012\uff63\013" +
    "\uff63\015\uff63\023\uff63\045\uff63\046\uff63\051\uff63\052\uff63" +
    "\070\uff63\071\uff63\001\002\000\010\015\uffe8\070\uffe8\071" +
    "\uffe8\001\002\000\006\070\106\071\105\001\002\000\034" +
    "\007\uff61\010\uff61\011\uff61\012\uff61\013\uff61\015\uff61\023" +
    "\uff61\045\uff61\046\uff61\051\uff61\052\uff61\070\uff61\071\uff61" +
    "\001\002\000\014\041\037\042\044\043\036\044\042\072" +
    "\054\001\002\000\034\007\uff65\010\uff65\011\uff65\012\uff65" +
    "\013\uff65\015\uff65\023\uff65\045\uff65\046\uff65\051\uff65\052" +
    "\uff65\070\uff65\071\uff65\001\002\000\022\015\uff70\023\uff70" +
    "\045\uff70\046\uff70\051\uff70\052\uff70\070\uff70\071\uff70\001" +
    "\002\000\034\007\uff60\010\uff60\011\uff60\012\uff60\013\uff60" +
    "\015\uff60\023\uff60\045\uff60\046\uff60\051\uff60\052\uff60\070" +
    "\uff60\071\uff60\001\002\000\010\015\uffe7\070\uffe7\071\uffe7" +
    "\001\002\000\030\007\051\010\052\011\056\012\053\013" +
    "\043\014\050\041\037\042\044\043\036\044\042\072\054" +
    "\001\002\000\014\041\037\042\044\043\036\044\042\072" +
    "\054\001\002\000\014\041\037\042\044\043\036\044\042" +
    "\072\054\001\002\000\014\041\037\042\044\043\036\044" +
    "\042\072\054\001\002\000\036\007\uff64\010\uff64\011\uff64" +
    "\012\uff64\013\uff64\014\062\015\uff64\023\uff64\045\uff64\046" +
    "\uff64\051\uff64\052\uff64\070\uff64\071\uff64\001\002\000\022" +
    "\007\051\010\052\011\056\012\053\013\043\015\uffe6\070" +
    "\uffe6\071\uffe6\001\002\000\014\041\037\042\044\043\036" +
    "\044\042\072\054\001\002\000\034\007\051\010\052\011" +
    "\056\012\053\013\043\015\uff6a\023\uff6a\045\uff6a\046\uff6a" +
    "\051\uff6a\052\uff6a\070\uff6a\071\uff6a\001\002\000\022\015" +
    "\uff6b\023\uff6b\045\uff6b\046\uff6b\051\uff6b\052\uff6b\070\uff6b" +
    "\071\uff6b\001\002\000\022\015\uff71\023\uff71\045\uff71\046" +
    "\uff71\051\uff71\052\uff71\070\uff71\071\uff71\001\002\000\034" +
    "\007\051\010\052\011\056\012\053\013\043\014\050\015" +
    "\063\035\040\041\037\042\044\043\036\044\042\072\054" +
    "\001\002\000\034\007\uffad\010\uffad\011\uffad\012\uffad\013" +
    "\uffad\015\uffad\023\uffad\045\uffad\046\uffad\051\uffad\052\uffad" +
    "\070\uffad\071\uffad\001\002\000\004\015\070\001\002\000" +
    "\006\015\uffa7\071\066\001\002\000\032\007\051\010\052" +
    "\011\056\012\053\013\043\014\050\035\040\041\037\042" +
    "\044\043\036\044\042\072\054\001\002\000\004\015\uffa8" +
    "\001\002\000\034\007\uffac\010\uffac\011\uffac\012\uffac\013" +
    "\uffac\015\uffac\023\uffac\045\uffac\046\uffac\051\uffac\052\uffac" +
    "\070\uffac\071\uffac\001\002\000\034\007\051\010\052\011" +
    "\056\012\053\013\043\015\uff68\023\uff68\045\uff68\046\uff68" +
    "\051\uff68\052\uff68\070\uff68\071\uff68\001\002\000\022\015" +
    "\uff69\023\uff69\045\uff69\046\uff69\051\uff69\052\uff69\070\uff69" +
    "\071\uff69\001\002\000\034\007\051\010\052\011\056\012" +
    "\053\013\043\015\uff6c\023\uff6c\045\uff6c\046\uff6c\051\uff6c" +
    "\052\uff6c\070\uff6c\071\uff6c\001\002\000\022\015\uff6d\023" +
    "\uff6d\045\uff6d\046\uff6d\051\uff6d\052\uff6d\070\uff6d\071\uff6d" +
    "\001\002\000\034\007\051\010\052\011\056\012\053\013" +
    "\043\015\uff6e\023\uff6e\045\uff6e\046\uff6e\051\uff6e\052\uff6e" +
    "\070\uff6e\071\uff6e\001\002\000\022\015\uff6f\023\uff6f\045" +
    "\uff6f\046\uff6f\051\uff6f\052\uff6f\070\uff6f\071\uff6f\001\002" +
    "\000\004\015\101\001\002\000\014\007\051\010\052\011" +
    "\056\012\053\013\043\001\002\000\050\007\051\010\052" +
    "\011\056\012\053\013\043\014\050\015\uff72\023\uff72\041" +
    "\037\042\044\043\036\044\042\045\uff72\046\uff72\051\uff72" +
    "\052\uff72\070\uff72\071\uff72\072\054\001\002\000\022\015" +
    "\uff73\023\uff73\045\uff73\046\uff73\051\uff73\052\uff73\070\uff73" +
    "\071\uff73\001\002\000\034\007\051\010\052\011\056\012" +
    "\053\013\043\015\uff66\023\uff66\045\uff66\046\uff66\051\uff66" +
    "\052\uff66\070\uff66\071\uff66\001\002\000\022\015\uff67\023" +
    "\uff67\045\uff67\046\uff67\051\uff67\052\uff67\070\uff67\071\uff67" +
    "\001\002\000\004\072\107\001\002\000\100\002\ufff2\003" +
    "\ufff2\004\ufff2\005\ufff2\007\ufff2\010\ufff2\011\ufff2\012\ufff2" +
    "\013\ufff2\014\ufff2\023\ufff2\041\ufff2\042\ufff2\043\ufff2\044" +
    "\ufff2\045\ufff2\047\ufff2\050\ufff2\051\ufff2\055\ufff2\056\ufff2" +
    "\057\ufff2\060\ufff2\061\ufff2\062\ufff2\063\ufff2\064\ufff2\065" +
    "\ufff2\066\ufff2\067\ufff2\072\ufff2\001\002\000\010\006\113" +
    "\070\uffeb\071\112\001\002\000\004\070\111\001\002\000" +
    "\100\002\ufff4\003\ufff4\004\ufff4\005\ufff4\007\ufff4\010\ufff4" +
    "\011\ufff4\012\ufff4\013\ufff4\014\ufff4\023\ufff4\041\ufff4\042" +
    "\ufff4\043\ufff4\044\ufff4\045\ufff4\047\ufff4\050\ufff4\051\ufff4" +
    "\055\ufff4\056\ufff4\057\ufff4\060\ufff4\061\ufff4\062\ufff4\063" +
    "\ufff4\064\ufff4\065\ufff4\066\ufff4\067\ufff4\072\ufff4\001\002" +
    "\000\004\072\107\001\002\000\032\007\051\010\052\011" +
    "\056\012\053\013\043\014\050\035\040\041\037\042\044" +
    "\043\036\044\042\072\054\001\002\000\006\070\uffec\071" +
    "\115\001\002\000\004\072\107\001\002\000\004\070\uffea" +
    "\001\002\000\004\070\uffe9\001\002\000\004\070\121\001" +
    "\002\000\100\002\ufff5\003\ufff5\004\ufff5\005\ufff5\007\ufff5" +
    "\010\ufff5\011\ufff5\012\ufff5\013\ufff5\014\ufff5\023\ufff5\041" +
    "\ufff5\042\ufff5\043\ufff5\044\ufff5\045\ufff5\047\ufff5\050\ufff5" +
    "\051\ufff5\055\ufff5\056\ufff5\057\ufff5\060\ufff5\061\ufff5\062" +
    "\ufff5\063\ufff5\064\ufff5\065\ufff5\066\ufff5\067\ufff5\072\ufff5" +
    "\001\002\000\004\072\107\001\002\000\004\011\124\001" +
    "\002\000\004\072\uffed\001\002\000\004\070\126\001\002" +
    "\000\100\002\uffe5\003\uffe5\004\uffe5\005\uffe5\007\uffe5\010" +
    "\uffe5\011\uffe5\012\uffe5\013\uffe5\014\uffe5\023\uffe5\041\uffe5" +
    "\042\uffe5\043\uffe5\044\uffe5\045\uffe5\047\uffe5\050\uffe5\051" +
    "\uffe5\055\uffe5\056\uffe5\057\uffe5\060\uffe5\061\uffe5\062\uffe5" +
    "\063\uffe5\064\uffe5\065\uffe5\066\uffe5\067\uffe5\072\uffe5\001" +
    "\002\000\004\006\130\001\002\000\004\040\131\001\002" +
    "\000\004\070\132\001\002\000\100\002\ufff1\003\ufff1\004" +
    "\ufff1\005\ufff1\007\ufff1\010\ufff1\011\ufff1\012\ufff1\013\ufff1" +
    "\014\ufff1\023\ufff1\041\ufff1\042\ufff1\043\ufff1\044\ufff1\045" +
    "\ufff1\047\ufff1\050\ufff1\051\ufff1\055\ufff1\056\ufff1\057\ufff1" +
    "\060\ufff1\061\ufff1\062\ufff1\063\ufff1\064\ufff1\065\ufff1\066" +
    "\ufff1\067\ufff1\072\ufff1\001\002\000\014\006\uffdc\014\uffdc" +
    "\015\uffdc\070\uffdc\071\uffdc\001\002\000\004\002\001\001" +
    "\002\000\004\014\uffdf\001\002\000\010\034\uff77\042\uff77" +
    "\072\uff77\001\002\000\010\034\uff74\042\uff74\072\uff74\001" +
    "\002\000\010\034\143\042\145\072\146\001\002\000\010" +
    "\034\uff75\042\uff75\072\uff75\001\002\000\010\034\uff76\042" +
    "\uff76\072\uff76\001\002\000\004\072\147\001\002\000\006" +
    "\002\uff78\070\uff78\001\002\000\030\002\uff7b\015\uff7b\024" +
    "\uff7b\025\uff7b\026\uff7b\027\uff7b\030\uff7b\031\uff7b\032\uff7b" +
    "\033\uff7b\070\uff7b\001\002\000\030\002\uff7a\015\uff7a\024" +
    "\uff7a\025\uff7a\026\uff7a\027\uff7a\030\uff7a\031\uff7a\032\uff7a" +
    "\033\uff7a\070\uff7a\001\002\000\030\002\uff79\015\uff79\024" +
    "\uff79\025\uff79\026\uff79\027\uff79\030\uff79\031\uff79\032\uff79" +
    "\033\uff79\070\uff79\001\002\000\014\015\152\047\123\057" +
    "\012\060\014\062\021\001\002\000\006\015\uffdd\071\u0119" +
    "\001\002\000\004\022\u0115\001\002\000\004\015\154\001" +
    "\002\000\004\022\155\001\002\000\072\004\164\005\163" +
    "\007\051\010\052\011\205\012\053\013\043\014\207\023" +
    "\202\041\037\042\044\043\036\044\042\045\214\047\016" +
    "\050\017\051\213\055\166\056\173\057\012\060\014\061" +
    "\175\062\021\063\206\065\216\066\174\067\200\072\217" +
    "\001\002\000\016\007\uff60\010\uff60\011\uff60\012\uff60\013" +
    "\uff60\070\u0113\001\002\000\076\004\uffa5\005\uffa5\007\uffa5" +
    "\010\uffa5\011\uffa5\012\uffa5\013\uffa5\014\uffa5\023\uffa5\041" +
    "\uffa5\042\uffa5\043\uffa5\044\uffa5\045\uffa5\046\uffa5\047\uffa5" +
    "\050\uffa5\051\uffa5\052\uffa5\055\uffa5\056\uffa5\057\uffa5\060" +
    "\uffa5\061\uffa5\062\uffa5\063\uffa5\065\uffa5\066\uffa5\067\uffa5" +
    "\072\uffa5\001\002\000\004\022\u0110\001\002\000\006\023" +
    "\uffcc\070\u010e\001\002\000\004\014\u0102\001\002\000\022" +
    "\015\uff88\023\uff88\045\uff88\046\uff88\051\uff88\052\uff88\070" +
    "\uff88\072\uff88\001\002\000\022\015\uff89\023\uff89\045\uff89" +
    "\046\uff89\051\uff89\052\uff89\070\uff89\072\uff89\001\002\000" +
    "\072\004\164\005\163\007\051\010\052\011\205\012\053" +
    "\013\043\014\207\023\uffd8\041\037\042\044\043\036\044" +
    "\042\045\214\047\016\050\017\051\213\055\166\056\173" +
    "\057\012\060\014\061\175\062\021\063\206\065\216\066" +
    "\174\067\200\072\217\001\002\000\004\014\uffa1\001\002" +
    "\000\006\023\uffce\070\377\001\002\000\076\004\uffa4\005" +
    "\uffa4\007\uffa4\010\uffa4\011\uffa4\012\uffa4\013\uffa4\014\uffa4" +
    "\023\uffa4\041\uffa4\042\uffa4\043\uffa4\044\uffa4\045\uffa4\046" +
    "\uffa4\047\uffa4\050\uffa4\051\uffa4\052\uffa4\055\uffa4\056\uffa4" +
    "\057\uffa4\060\uffa4\061\uffa4\062\uffa4\063\uffa4\065\uffa4\066" +
    "\uffa4\067\uffa4\072\uffa4\001\002\000\072\004\164\005\163" +
    "\007\051\010\052\011\205\012\053\013\043\014\207\023" +
    "\uffc8\041\037\042\044\043\036\044\042\045\214\047\016" +
    "\050\017\051\213\055\166\056\173\057\012\060\014\061" +
    "\175\062\021\063\206\065\216\066\174\067\200\072\217" +
    "\001\002\000\010\006\035\070\034\071\033\001\002\000" +
    "\004\014\355\001\002\000\004\014\351\001\002\000\012" +
    "\034\143\042\145\070\346\072\146\001\002\000\004\023" +
    "\345\001\002\000\072\004\164\005\163\007\051\010\052" +
    "\011\205\012\053\013\043\014\207\023\uffd6\041\037\042" +
    "\044\043\036\044\042\045\214\047\016\050\017\051\213" +
    "\055\166\056\173\057\012\060\014\061\175\062\021\063" +
    "\206\065\216\066\174\067\200\072\217\001\002\000\004" +
    "\014\340\001\002\000\072\004\164\005\163\007\051\010" +
    "\052\011\205\012\053\013\043\014\207\023\uffc2\041\037" +
    "\042\044\043\036\044\042\045\214\047\016\050\017\051" +
    "\213\055\166\056\173\057\012\060\014\061\175\062\021" +
    "\063\206\065\216\066\174\067\200\072\217\001\002\000" +
    "\024\002\uffe1\003\uffe1\047\uffe1\050\uffe1\057\uffe1\060\uffe1" +
    "\062\uffe1\064\uffe1\072\uffe1\001\002\000\100\004\uff9e\005" +
    "\uff9e\007\uff9e\010\uff9e\011\uff9e\012\uff9e\013\uff9e\014\uff9e" +
    "\023\uff9e\041\uff9e\042\uff9e\043\uff9e\044\uff9e\045\uff9e\046" +
    "\uff9e\047\uff9e\050\uff9e\051\uff9e\052\uff9e\054\333\055\uff9e" +
    "\056\uff9e\057\uff9e\060\uff9e\061\uff9e\062\uff9e\063\uff9e\065" +
    "\uff9e\066\uff9e\067\uff9e\072\uff9e\001\002\000\072\004\164" +
    "\005\163\007\051\010\052\011\205\012\053\013\043\014" +
    "\207\023\uffda\041\037\042\044\043\036\044\042\045\214" +
    "\047\016\050\017\051\213\055\166\056\173\057\012\060" +
    "\014\061\175\062\021\063\206\065\216\066\174\067\200" +
    "\072\217\001\002\000\014\041\037\042\044\043\036\044" +
    "\042\072\324\001\002\000\004\014\236\001\002\000\032" +
    "\007\051\010\052\011\056\012\053\013\043\014\050\015" +
    "\234\041\037\042\044\043\036\044\042\072\054\001\002" +
    "\000\072\004\164\005\163\007\051\010\052\011\205\012" +
    "\053\013\043\014\207\023\uffca\041\037\042\044\043\036" +
    "\044\042\045\214\047\016\050\017\051\213\055\166\056" +
    "\173\057\012\060\014\061\175\062\021\063\206\065\216" +
    "\066\174\067\200\072\217\001\002\000\004\072\232\001" +
    "\002\000\004\070\230\001\002\000\004\070\227\001\002" +
    "\000\004\070\226\001\002\000\072\004\164\005\163\007" +
    "\051\010\052\011\205\012\053\013\043\014\207\023\uffc4" +
    "\041\037\042\044\043\036\044\042\045\214\047\016\050" +
    "\017\051\213\055\166\056\173\057\012\060\014\061\175" +
    "\062\021\063\206\065\216\066\174\067\200\072\217\001" +
    "\002\000\004\014\uffa0\001\002\000\034\004\164\005\163" +
    "\006\221\007\uff64\010\uff64\011\uff64\012\uff64\013\uff64\014" +
    "\062\016\136\017\142\020\141\021\137\001\002\000\020" +
    "\015\uff85\023\uff85\045\uff85\046\uff85\051\uff85\052\uff85\070" +
    "\uff85\001\002\000\032\007\051\010\052\011\056\012\053" +
    "\013\043\014\050\035\040\041\037\042\044\043\036\044" +
    "\042\072\054\001\002\000\004\070\223\001\002\000\072" +
    "\004\164\005\163\007\051\010\052\011\205\012\053\013" +
    "\043\014\207\023\uffd2\041\037\042\044\043\036\044\042" +
    "\045\214\047\016\050\017\051\213\055\166\056\173\057" +
    "\012\060\014\061\175\062\021\063\206\065\216\066\174" +
    "\067\200\072\217\001\002\000\004\023\uffd3\001\002\000" +
    "\004\023\uffc5\001\002\000\076\004\uff8d\005\uff8d\007\uff8d" +
    "\010\uff8d\011\uff8d\012\uff8d\013\uff8d\014\uff8d\023\uff8d\041" +
    "\uff8d\042\uff8d\043\uff8d\044\uff8d\045\uff8d\046\uff8d\047\uff8d" +
    "\050\uff8d\051\uff8d\052\uff8d\055\uff8d\056\uff8d\057\uff8d\060" +
    "\uff8d\061\uff8d\062\uff8d\063\uff8d\065\uff8d\066\uff8d\067\uff8d" +
    "\072\uff8d\001\002\000\076\004\uff8c\005\uff8c\007\uff8c\010" +
    "\uff8c\011\uff8c\012\uff8c\013\uff8c\014\uff8c\023\uff8c\041\uff8c" +
    "\042\uff8c\043\uff8c\044\uff8c\045\uff8c\046\uff8c\047\uff8c\050" +
    "\uff8c\051\uff8c\052\uff8c\055\uff8c\056\uff8c\057\uff8c\060\uff8c" +
    "\061\uff8c\062\uff8c\063\uff8c\065\uff8c\066\uff8c\067\uff8c\072" +
    "\uff8c\001\002\000\072\004\164\005\163\007\051\010\052" +
    "\011\205\012\053\013\043\014\207\023\uffd4\041\037\042" +
    "\044\043\036\044\042\045\214\047\016\050\017\051\213" +
    "\055\166\056\173\057\012\060\014\061\175\062\021\063" +
    "\206\065\216\066\174\067\200\072\217\001\002\000\004" +
    "\023\uffd5\001\002\000\020\015\uff84\023\uff84\045\uff84\046" +
    "\uff84\051\uff84\052\uff84\070\uff84\001\002\000\004\023\uffcb" +
    "\001\002\000\004\070\235\001\002\000\076\004\uffaa\005" +
    "\uffaa\007\uffaa\010\uffaa\011\uffaa\012\uffaa\013\uffaa\014\uffaa" +
    "\023\uffaa\041\uffaa\042\uffaa\043\uffaa\044\uffaa\045\uffaa\046" +
    "\uffaa\047\uffaa\050\uffaa\051\uffaa\052\uffaa\055\uffaa\056\uffaa" +
    "\057\uffaa\060\uffaa\061\uffaa\062\uffaa\063\uffaa\065\uffaa\066" +
    "\uffaa\067\uffaa\072\uffaa\001\002\000\010\034\143\042\145" +
    "\072\146\001\002\000\004\015\240\001\002\000\004\022" +
    "\241\001\002\000\004\046\243\001\002\000\006\023\uff99" +
    "\052\316\001\002\000\004\042\250\001\002\000\004\023" +
    "\247\001\002\000\010\023\uff97\046\243\052\uff97\001\002" +
    "\000\006\023\uff98\052\uff98\001\002\000\076\004\uff9b\005" +
    "\uff9b\007\uff9b\010\uff9b\011\uff9b\012\uff9b\013\uff9b\014\uff9b" +
    "\023\uff9b\041\uff9b\042\uff9b\043\uff9b\044\uff9b\045\uff9b\046" +
    "\uff9b\047\uff9b\050\uff9b\051\uff9b\052\uff9b\055\uff9b\056\uff9b" +
    "\057\uff9b\060\uff9b\061\uff9b\062\uff9b\063\uff9b\065\uff9b\066" +
    "\uff9b\067\uff9b\072\uff9b\001\002\000\004\073\251\001\002" +
    "\000\064\004\164\005\163\007\051\010\052\011\260\012" +
    "\053\013\043\014\207\023\uff8e\041\037\042\044\043\036" +
    "\044\042\045\214\046\uff8e\051\213\052\uff8e\055\166\056" +
    "\173\061\175\063\206\065\216\066\174\067\200\072\265" +
    "\001\002\000\016\007\uff60\010\uff60\011\uff60\012\uff60\013" +
    "\uff60\070\314\001\002\000\016\023\uffb6\045\uffb6\046\uffb6" +
    "\051\uffb6\052\uffb6\070\312\001\002\000\016\023\uffb8\045" +
    "\uffb8\046\uffb8\051\uffb8\052\uffb8\070\310\001\002\000\064" +
    "\004\164\005\163\007\051\010\052\011\260\012\053\013" +
    "\043\014\207\023\uffb2\041\037\042\044\043\036\044\042" +
    "\045\uffb2\046\uffb2\051\uffb2\052\uffb2\055\166\056\173\061" +
    "\175\063\206\065\216\066\174\067\200\072\265\001\002" +
    "\000\064\004\164\005\163\007\051\010\052\011\260\012" +
    "\053\013\043\014\207\023\uffc0\041\037\042\044\043\036" +
    "\044\042\045\uffc0\046\uffc0\051\uffc0\052\uffc0\055\166\056" +
    "\173\061\175\063\206\065\216\066\174\067\200\072\265" +
    "\001\002\000\012\023\uff90\046\uff90\052\uff90\061\175\001" +
    "\002\000\014\041\037\042\044\043\036\044\042\072\300" +
    "\001\002\000\064\004\164\005\163\007\051\010\052\011" +
    "\260\012\053\013\043\014\207\023\uffb4\041\037\042\044" +
    "\043\036\044\042\045\uffb4\046\uffb4\051\uffb4\052\uffb4\055" +
    "\166\056\173\061\175\063\206\065\216\066\174\067\200" +
    "\072\265\001\002\000\004\070\275\001\002\000\064\004" +
    "\164\005\163\007\051\010\052\011\260\012\053\013\043" +
    "\014\207\023\uffae\041\037\042\044\043\036\044\042\045" +
    "\uffae\046\uffae\051\uffae\052\uffae\055\166\056\173\061\175" +
    "\063\206\065\216\066\174\067\200\072\265\001\002\000" +
    "\014\023\uff92\045\214\046\uff92\051\213\052\uff92\001\002" +
    "\000\034\004\164\005\163\006\266\007\uff64\010\uff64\011" +
    "\uff64\012\uff64\013\uff64\014\062\016\136\017\142\020\141" +
    "\021\137\001\002\000\032\007\051\010\052\011\056\012" +
    "\053\013\043\014\050\035\040\041\037\042\044\043\036" +
    "\044\042\072\054\001\002\000\004\070\270\001\002\000" +
    "\064\004\164\005\163\007\051\010\052\011\260\012\053" +
    "\013\043\014\207\023\uffbc\041\037\042\044\043\036\044" +
    "\042\045\uffbc\046\uffbc\051\uffbc\052\uffbc\055\166\056\173" +
    "\061\175\063\206\065\216\066\174\067\200\072\265\001" +
    "\002\000\014\023\uffbd\045\uffbd\046\uffbd\051\uffbd\052\uffbd" +
    "\001\002\000\012\023\uff93\046\uff93\052\uff93\061\175\001" +
    "\002\000\010\023\uff91\046\uff91\052\uff91\001\002\000\014" +
    "\023\uffaf\045\uffaf\046\uffaf\051\uffaf\052\uffaf\001\002\000" +
    "\064\004\164\005\163\007\051\010\052\011\260\012\053" +
    "\013\043\014\207\023\uffbe\041\037\042\044\043\036\044" +
    "\042\045\uffbe\046\uffbe\051\uffbe\052\uffbe\055\166\056\173" +
    "\061\175\063\206\065\216\066\174\067\200\072\265\001" +
    "\002\000\014\023\uffbf\045\uffbf\046\uffbf\051\uffbf\052\uffbf" +
    "\001\002\000\014\023\uffb5\045\uffb5\046\uffb5\051\uffb5\052" +
    "\uffb5\001\002\000\034\006\301\007\uff64\010\uff64\011\uff64" +
    "\012\uff64\013\uff64\014\062\023\uff64\045\uff64\046\uff64\051" +
    "\uff64\052\uff64\070\uff64\001\002\000\032\007\051\010\052" +
    "\011\056\012\053\013\043\014\050\035\040\041\037\042" +
    "\044\043\036\044\042\072\054\001\002\000\004\070\303" +
    "\001\002\000\064\004\164\005\163\007\051\010\052\011" +
    "\260\012\053\013\043\014\207\023\uffba\041\037\042\044" +
    "\043\036\044\042\045\uffba\046\uffba\051\uffba\052\uffba\055" +
    "\166\056\173\061\175\063\206\065\216\066\174\067\200" +
    "\072\265\001\002\000\014\023\uffbb\045\uffbb\046\uffbb\051" +
    "\uffbb\052\uffbb\001\002\000\010\023\uff8f\046\uff8f\052\uff8f" +
    "\001\002\000\014\023\uffc1\045\uffc1\046\uffc1\051\uffc1\052" +
    "\uffc1\001\002\000\014\023\uffb3\045\uffb3\046\uffb3\051\uffb3" +
    "\052\uffb3\001\002\000\052\004\164\005\163\007\051\010" +
    "\052\011\260\012\053\013\043\014\207\041\037\042\044" +
    "\043\036\044\042\055\166\056\173\061\175\063\206\065" +
    "\216\066\174\067\200\072\265\001\002\000\014\023\uffb9" +
    "\045\uffb9\046\uffb9\051\uffb9\052\uffb9\001\002\000\052\004" +
    "\164\005\163\007\051\010\052\011\260\012\053\013\043" +
    "\014\207\041\037\042\044\043\036\044\042\055\166\056" +
    "\173\061\175\063\206\065\216\066\174\067\200\072\265" +
    "\001\002\000\014\023\uffb7\045\uffb7\046\uffb7\051\uffb7\052" +
    "\uffb7\001\002\000\064\004\164\005\163\007\051\010\052" +
    "\011\260\012\053\013\043\014\207\023\uffb0\041\037\042" +
    "\044\043\036\044\042\045\uffb0\046\uffb0\051\uffb0\052\uffb0" +
    "\055\166\056\173\061\175\063\206\065\216\066\174\067" +
    "\200\072\265\001\002\000\014\023\uffb1\045\uffb1\046\uffb1" +
    "\051\uffb1\052\uffb1\001\002\000\004\073\320\001\002\000" +
    "\004\023\uff9a\001\002\000\052\004\164\005\163\007\051" +
    "\010\052\011\260\012\053\013\043\014\207\041\037\042" +
    "\044\043\036\044\042\055\166\056\173\061\175\063\206" +
    "\065\216\066\174\067\200\072\265\001\002\000\010\023" +
    "\uff95\045\214\051\213\001\002\000\006\023\uff96\061\175" +
    "\001\002\000\004\023\uff94\001\002\000\024\006\325\007" +
    "\uff64\010\uff64\011\uff64\012\uff64\013\uff64\014\062\023\uff64" +
    "\070\uff64\001\002\000\032\007\051\010\052\011\056\012" +
    "\053\013\043\014\050\035\040\041\037\042\044\043\036" +
    "\044\042\072\054\001\002\000\004\070\327\001\002\000" +
    "\072\004\164\005\163\007\051\010\052\011\205\012\053" +
    "\013\043\014\207\023\uffd0\041\037\042\044\043\036\044" +
    "\042\045\214\047\016\050\017\051\213\055\166\056\173" +
    "\057\012\060\014\061\175\062\021\063\206\065\216\066" +
    "\174\067\200\072\217\001\002\000\004\023\uffd1\001\002" +
    "\000\004\023\uffdb\001\002\000\076\004\uff9f\005\uff9f\007" +
    "\uff9f\010\uff9f\011\uff9f\012\uff9f\013\uff9f\014\uff9f\023\uff9f" +
    "\041\uff9f\042\uff9f\043\uff9f\044\uff9f\045\uff9f\046\uff9f\047" +
    "\uff9f\050\uff9f\051\uff9f\052\uff9f\055\uff9f\056\uff9f\057\uff9f" +
    "\060\uff9f\061\uff9f\062\uff9f\063\uff9f\065\uff9f\066\uff9f\067" +
    "\uff9f\072\uff9f\001\002\000\004\022\334\001\002\000\070" +
    "\004\164\005\163\007\051\010\052\011\205\012\053\013" +
    "\043\014\207\041\037\042\044\043\036\044\042\045\214" +
    "\047\016\050\017\051\213\055\166\056\173\057\012\060" +
    "\014\061\175\062\021\063\206\065\216\066\174\067\200" +
    "\072\217\001\002\000\004\023\336\001\002\000\076\004" +
    "\uff9c\005\uff9c\007\uff9c\010\uff9c\011\uff9c\012\uff9c\013\uff9c" +
    "\014\uff9c\023\uff9c\041\uff9c\042\uff9c\043\uff9c\044\uff9c\045" +
    "\uff9c\046\uff9c\047\uff9c\050\uff9c\051\uff9c\052\uff9c\055\uff9c" +
    "\056\uff9c\057\uff9c\060\uff9c\061\uff9c\062\uff9c\063\uff9c\065" +
    "\uff9c\066\uff9c\067\uff9c\072\uff9c\001\002\000\004\023\uffc3" +
    "\001\002\000\032\007\051\010\052\011\056\012\053\013" +
    "\043\014\050\035\040\041\037\042\044\043\036\044\042" +
    "\072\054\001\002\000\004\015\342\001\002\000\004\070" +
    "\343\001\002\000\076\004\uffa9\005\uffa9\007\uffa9\010\uffa9" +
    "\011\uffa9\012\uffa9\013\uffa9\014\uffa9\023\uffa9\041\uffa9\042" +
    "\uffa9\043\uffa9\044\uffa9\045\uffa9\046\uffa9\047\uffa9\050\uffa9" +
    "\051\uffa9\052\uffa9\055\uffa9\056\uffa9\057\uffa9\060\uffa9\061" +
    "\uffa9\062\uffa9\063\uffa9\065\uffa9\066\uffa9\067\uffa9\072\uffa9" +
    "\001\002\000\004\023\uffd7\001\002\000\024\002\uffe4\003" +
    "\uffe4\047\uffe4\050\uffe4\057\uffe4\060\uffe4\062\uffe4\064\uffe4" +
    "\072\uffe4\001\002\000\076\004\uff8a\005\uff8a\007\uff8a\010" +
    "\uff8a\011\uff8a\012\uff8a\013\uff8a\014\uff8a\023\uff8a\041\uff8a" +
    "\042\uff8a\043\uff8a\044\uff8a\045\uff8a\046\uff8a\047\uff8a\050" +
    "\uff8a\051\uff8a\052\uff8a\055\uff8a\056\uff8a\057\uff8a\060\uff8a" +
    "\061\uff8a\062\uff8a\063\uff8a\065\uff8a\066\uff8a\067\uff8a\072" +
    "\uff8a\001\002\000\004\070\350\001\002\000\076\004\uff8b" +
    "\005\uff8b\007\uff8b\010\uff8b\011\uff8b\012\uff8b\013\uff8b\014" +
    "\uff8b\023\uff8b\041\uff8b\042\uff8b\043\uff8b\044\uff8b\045\uff8b" +
    "\046\uff8b\047\uff8b\050\uff8b\051\uff8b\052\uff8b\055\uff8b\056" +
    "\uff8b\057\uff8b\060\uff8b\061\uff8b\062\uff8b\063\uff8b\065\uff8b" +
    "\066\uff8b\067\uff8b\072\uff8b\001\002\000\004\072\352\001" +
    "\002\000\004\015\353\001\002\000\004\070\354\001\002" +
    "\000\076\004\uffab\005\uffab\007\uffab\010\uffab\011\uffab\012" +
    "\uffab\013\uffab\014\uffab\023\uffab\041\uffab\042\uffab\043\uffab" +
    "\044\uffab\045\uffab\046\uffab\047\uffab\050\uffab\051\uffab\052" +
    "\uffab\055\uffab\056\uffab\057\uffab\060\uffab\061\uffab\062\uffab" +
    "\063\uffab\065\uffab\066\uffab\067\uffab\072\uffab\001\002\000" +
    "\010\034\143\042\145\072\146\001\002\000\022\024\365" +
    "\025\373\026\371\027\370\030\367\031\372\032\374\033" +
    "\366\001\002\000\004\015\360\001\002\000\004\022\361" +
    "\001\002\000\070\004\164\005\163\007\051\010\052\011" +
    "\205\012\053\013\043\014\207\041\037\042\044\043\036" +
    "\044\042\045\214\047\016\050\017\051\213\055\166\056" +
    "\173\057\012\060\014\061\175\062\021\063\206\065\216" +
    "\066\174\067\200\072\217\001\002\000\004\023\363\001" +
    "\002\000\100\004\uff9d\005\uff9d\007\uff9d\010\uff9d\011\uff9d" +
    "\012\uff9d\013\uff9d\014\uff9d\023\uff9d\041\uff9d\042\uff9d\043" +
    "\uff9d\044\uff9d\045\uff9d\046\uff9d\047\uff9d\050\uff9d\051\uff9d" +
    "\052\uff9d\054\uff9d\055\uff9d\056\uff9d\057\uff9d\060\uff9d\061" +
    "\uff9d\062\uff9d\063\uff9d\065\uff9d\066\uff9d\067\uff9d\072\uff9d" +
    "\001\002\000\010\034\143\042\145\072\146\001\002\000" +
    "\010\034\uff83\042\uff83\072\uff83\001\002\000\010\034\uff7d" +
    "\042\uff7d\072\uff7d\001\002\000\010\034\uff7f\042\uff7f\072" +
    "\uff7f\001\002\000\010\034\uff80\042\uff80\072\uff80\001\002" +
    "\000\010\034\uff81\042\uff81\072\uff81\001\002\000\010\034" +
    "\uff7e\042\uff7e\072\uff7e\001\002\000\010\034\uff82\042\uff82" +
    "\072\uff82\001\002\000\010\034\uff7c\042\uff7c\072\uff7c\001" +
    "\002\000\006\015\uff87\070\uff87\001\002\000\004\023\uffc9" +
    "\001\002\000\070\004\164\005\163\007\051\010\052\011" +
    "\205\012\053\013\043\014\207\041\037\042\044\043\036" +
    "\044\042\045\214\047\016\050\017\051\213\055\166\056" +
    "\173\057\012\060\014\061\175\062\021\063\206\065\216" +
    "\066\174\067\200\072\217\001\002\000\004\023\uffcf\001" +
    "\002\000\004\023\uffd9\001\002\000\020\034\143\042\145" +
    "\047\123\057\012\060\014\062\021\072\146\001\002\000" +
    "\004\015\u010d\001\002\000\004\015\u010c\001\002\000\004" +
    "\072\107\001\002\000\004\070\u0107\001\002\000\010\034" +
    "\143\042\145\072\146\001\002\000\004\070\u0109\001\002" +
    "\000\010\004\164\005\163\072\u010b\001\002\000\004\015" +
    "\uff86\001\002\000\006\004\164\005\163\001\002\000\004" +
    "\022\uffa3\001\002\000\004\022\uffa2\001\002\000\070\004" +
    "\164\005\163\007\051\010\052\011\205\012\053\013\043" +
    "\014\207\041\037\042\044\043\036\044\042\045\214\047" +
    "\016\050\017\051\213\055\166\056\173\057\012\060\014" +
    "\061\175\062\021\063\206\065\216\066\174\067\200\072" +
    "\217\001\002\000\004\023\uffcd\001\002\000\070\004\164" +
    "\005\163\007\051\010\052\011\205\012\053\013\043\014" +
    "\207\041\037\042\044\043\036\044\042\045\214\047\016" +
    "\050\017\051\213\055\166\056\173\057\012\060\014\061" +
    "\175\062\021\063\206\065\216\066\174\067\200\072\217" +
    "\001\002\000\004\023\u0112\001\002\000\076\004\uffa6\005" +
    "\uffa6\007\uffa6\010\uffa6\011\uffa6\012\uffa6\013\uffa6\014\uffa6" +
    "\023\uffa6\041\uffa6\042\uffa6\043\uffa6\044\uffa6\045\uffa6\046" +
    "\uffa6\047\uffa6\050\uffa6\051\uffa6\052\uffa6\055\uffa6\056\uffa6" +
    "\057\uffa6\060\uffa6\061\uffa6\062\uffa6\063\uffa6\065\uffa6\066" +
    "\uffa6\067\uffa6\072\uffa6\001\002\000\072\004\164\005\163" +
    "\007\051\010\052\011\205\012\053\013\043\014\207\023" +
    "\uffc6\041\037\042\044\043\036\044\042\045\214\047\016" +
    "\050\017\051\213\055\166\056\173\057\012\060\014\061" +
    "\175\062\021\063\206\065\216\066\174\067\200\072\217" +
    "\001\002\000\004\023\uffc7\001\002\000\072\004\164\005" +
    "\163\007\051\010\052\011\205\012\053\013\043\014\207" +
    "\023\u0117\041\037\042\044\043\036\044\042\045\214\047" +
    "\016\050\017\051\213\055\166\056\173\057\012\060\014" +
    "\061\175\062\021\063\206\065\216\066\174\067\200\072" +
    "\217\001\002\000\004\023\u0118\001\002\000\024\002\uffe2" +
    "\003\uffe2\047\uffe2\050\uffe2\057\uffe2\060\uffe2\062\uffe2\064" +
    "\uffe2\072\uffe2\001\002\000\024\002\uffe3\003\uffe3\047\uffe3" +
    "\050\uffe3\057\uffe3\060\uffe3\062\uffe3\064\uffe3\072\uffe3\001" +
    "\002\000\012\047\123\057\012\060\014\062\021\001\002" +
    "\000\004\015\uffde\001\002\000\004\002\uffff\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0119\000\026\002\012\003\023\004\006\005\024\006" +
    "\005\007\014\011\004\013\003\016\017\041\022\001\001" +
    "\000\024\003\u011a\004\006\005\024\006\005\007\014\011" +
    "\004\013\003\016\017\041\022\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\044\137\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\007\121\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\010" +
    "\117\001\001\000\002\001\001\000\014\012\054\047\044" +
    "\050\046\056\040\057\045\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\012\102\057\045\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\012\077\047\044\050\076\057\045\001\001\000" +
    "\006\012\074\057\045\001\001\000\006\012\072\057\045" +
    "\001\001\000\006\012\070\057\045\001\001\000\002\001" +
    "\001\000\004\047\060\001\001\000\006\012\056\057\045" +
    "\001\001\000\004\047\057\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\012\054\047\044\050\046\056\064" +
    "\057\045\060\063\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\012\054\047\044\050\046" +
    "\056\064\057\045\060\066\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\047\071\001\001\000\002\001\001" +
    "\000\004\047\073\001\001\000\002\001\001\000\004\047" +
    "\075\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\047\060\001\001\000\012\012\077\047\044\050\101\057" +
    "\045\001\001\000\002\001\001\000\004\047\103\001\001" +
    "\000\002\001\001\000\004\010\107\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\010\116\001\001\000\014\012\054\047\044\050" +
    "\046\056\113\057\045\001\001\000\002\001\001\000\004" +
    "\010\115\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\010\124\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\024\143\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\007\014\014" +
    "\152\016\150\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\056\004\164\005" +
    "\203\007\014\012\077\015\175\016\171\017\176\020\157" +
    "\021\161\026\210\031\156\034\200\035\214\036\167\037" +
    "\202\041\211\042\207\045\166\047\044\050\160\057\155" +
    "\061\170\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\056\004\164\005\203\007" +
    "\014\012\077\015\u0100\016\171\017\176\020\157\021\161" +
    "\026\210\031\156\034\200\035\214\036\167\037\202\041" +
    "\211\042\207\045\166\047\044\050\160\057\155\061\170" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\056\004\164\005\203\007\014\012\077\015\375" +
    "\016\171\017\176\020\157\021\161\026\210\031\156\034" +
    "\200\035\214\036\167\037\202\041\211\042\207\045\166" +
    "\047\044\050\160\057\155\061\170\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\024\346" +
    "\001\001\000\002\001\001\000\056\004\164\005\203\007" +
    "\014\012\077\015\343\016\171\017\176\020\157\021\161" +
    "\026\210\031\156\034\200\035\214\036\167\037\202\041" +
    "\211\042\207\045\166\047\044\050\160\057\155\061\170" +
    "\001\001\000\002\001\001\000\056\004\164\005\203\007" +
    "\014\012\077\015\336\016\171\017\176\020\157\021\161" +
    "\026\210\031\156\034\200\035\214\036\167\037\202\041" +
    "\211\042\207\045\166\047\044\050\160\057\155\061\170" +
    "\001\001\000\002\001\001\000\004\040\331\001\001\000" +
    "\056\004\164\005\203\007\014\012\077\015\330\016\171" +
    "\017\176\020\157\021\161\026\210\031\156\034\200\035" +
    "\214\036\167\037\202\041\211\042\207\045\166\047\044" +
    "\050\160\057\155\061\170\001\001\000\006\012\056\057" +
    "\045\001\001\000\002\001\001\000\012\012\077\047\044" +
    "\050\076\057\045\001\001\000\056\004\164\005\203\007" +
    "\014\012\077\015\232\016\171\017\176\020\157\021\161" +
    "\026\210\031\156\034\200\035\214\036\167\037\202\041" +
    "\211\042\207\045\166\047\044\050\160\057\155\061\170" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\056\004\164\005\203\007\014" +
    "\012\077\015\224\016\171\017\176\020\157\021\161\026" +
    "\210\031\156\034\200\035\214\036\167\037\202\041\211" +
    "\042\207\045\166\047\044\050\160\057\155\061\170\001" +
    "\001\000\002\001\001\000\006\026\217\044\137\001\001" +
    "\000\002\001\001\000\014\012\054\047\044\050\046\056" +
    "\221\057\045\001\001\000\002\001\001\000\056\004\164" +
    "\005\203\007\014\012\077\015\223\016\171\017\176\020" +
    "\157\021\161\026\210\031\156\034\200\035\214\036\167" +
    "\037\202\041\211\042\207\045\166\047\044\050\160\057" +
    "\155\061\170\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\056\004\164\005" +
    "\203\007\014\012\077\015\230\016\171\017\176\020\157" +
    "\021\161\026\210\031\156\034\200\035\214\036\167\037" +
    "\202\041\211\042\207\045\166\047\044\050\160\057\155" +
    "\061\170\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\024\236\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\032\241\033\244\054\243\001\001\000\004\053\316" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\032" +
    "\245\033\244\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\046\012\077\017\255\020\157\021" +
    "\161\026\210\031\156\034\256\035\262\036\167\037\202" +
    "\041\261\042\260\045\253\047\044\050\252\055\263\057" +
    "\251\061\254\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\044\012\077\017\255\020\157\021" +
    "\161\026\210\031\156\035\262\036\167\037\202\041\261" +
    "\042\260\045\253\047\044\050\252\055\306\057\251\061" +
    "\254\001\001\000\044\012\077\017\255\020\157\021\161" +
    "\026\210\031\156\035\262\036\167\037\202\041\261\042" +
    "\260\045\253\047\044\050\252\055\305\057\251\061\254" +
    "\001\001\000\004\035\304\001\001\000\006\012\056\057" +
    "\045\001\001\000\044\012\077\017\255\020\157\021\161" +
    "\026\210\031\156\035\262\036\167\037\202\041\261\042" +
    "\260\045\253\047\044\050\252\055\276\057\251\061\254" +
    "\001\001\000\002\001\001\000\044\012\077\017\255\020" +
    "\157\021\161\026\210\031\156\035\262\036\167\037\202" +
    "\041\261\042\260\045\253\047\044\050\252\055\273\057" +
    "\251\061\254\001\001\000\004\034\271\001\001\000\006" +
    "\026\217\044\137\001\001\000\014\012\054\047\044\050" +
    "\046\056\266\057\045\001\001\000\002\001\001\000\044" +
    "\012\077\017\255\020\157\021\161\026\210\031\156\035" +
    "\262\036\167\037\202\041\261\042\260\045\253\047\044" +
    "\050\252\055\270\057\251\061\254\001\001\000\002\001" +
    "\001\000\004\035\272\001\001\000\002\001\001\000\002" +
    "\001\001\000\044\012\077\017\255\020\157\021\161\026" +
    "\210\031\156\035\262\036\167\037\202\041\261\042\260" +
    "\045\253\047\044\050\252\055\275\057\251\061\254\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\012\054\047\044\050\046\056\301\057\045\001" +
    "\001\000\002\001\001\000\044\012\077\017\255\020\157" +
    "\021\161\026\210\031\156\035\262\036\167\037\202\041" +
    "\261\042\260\045\253\047\044\050\252\055\303\057\251" +
    "\061\254\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\044\012\077\017\255" +
    "\020\157\021\161\026\210\031\156\035\262\036\167\037" +
    "\202\041\261\042\260\045\253\047\044\050\252\055\310" +
    "\057\251\061\254\001\001\000\002\001\001\000\044\012" +
    "\077\017\255\020\157\021\161\026\210\031\156\035\262" +
    "\036\167\037\202\041\261\042\260\045\253\047\044\050" +
    "\252\055\312\057\251\061\254\001\001\000\002\001\001" +
    "\000\044\012\077\017\255\020\157\021\161\026\210\031" +
    "\156\035\262\036\167\037\202\041\261\042\260\045\253" +
    "\047\044\050\252\055\314\057\251\061\254\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\044" +
    "\012\077\017\255\020\157\021\161\026\210\031\156\035" +
    "\262\036\167\037\202\041\261\042\260\045\253\047\044" +
    "\050\252\055\320\057\251\061\254\001\001\000\004\034" +
    "\321\001\001\000\004\035\322\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\012\054\047\044\050\046\056" +
    "\325\057\045\001\001\000\002\001\001\000\056\004\164" +
    "\005\203\007\014\012\077\015\327\016\171\017\176\020" +
    "\157\021\161\026\210\031\156\034\200\035\214\036\167" +
    "\037\202\041\211\042\207\045\166\047\044\050\160\057" +
    "\155\061\170\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\056\004\164\005" +
    "\203\007\014\012\077\015\334\016\171\017\176\020\157" +
    "\021\161\026\210\031\156\034\200\035\214\036\167\037" +
    "\202\041\211\042\207\045\166\047\044\050\160\057\155" +
    "\061\170\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\012\054\047\044\050\046\056\064" +
    "\057\045\060\340\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\023\356\024\355\001\001\000\004\025" +
    "\363\001\001\000\002\001\001\000\002\001\001\000\056" +
    "\004\164\005\203\007\014\012\077\015\361\016\171\017" +
    "\176\020\157\021\161\026\210\031\156\034\200\035\214" +
    "\036\167\037\202\041\211\042\207\045\166\047\044\050" +
    "\160\057\155\061\170\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\024\374\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\056\004\164" +
    "\005\203\007\014\012\077\015\377\016\171\017\176\020" +
    "\157\021\161\026\210\031\156\034\200\035\214\036\167" +
    "\037\202\041\211\042\207\045\166\047\044\050\160\057" +
    "\155\061\170\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\007\u0104\022\u0102\023\u0103\024\355\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\010\u0105\001\001" +
    "\000\002\001\001\000\006\023\u0107\024\355\001\001\000" +
    "\002\001\001\000\006\026\210\045\u0109\001\001\000\002" +
    "\001\001\000\004\026\217\001\001\000\002\001\001\000" +
    "\002\001\001\000\056\004\164\005\203\007\014\012\077" +
    "\015\u010e\016\171\017\176\020\157\021\161\026\210\031" +
    "\156\034\200\035\214\036\167\037\202\041\211\042\207" +
    "\045\166\047\044\050\160\057\155\061\170\001\001\000" +
    "\002\001\001\000\056\004\164\005\203\007\014\012\077" +
    "\015\u0110\016\171\017\176\020\157\021\161\026\210\031" +
    "\156\034\200\035\214\036\167\037\202\041\211\042\207" +
    "\045\166\047\044\050\160\057\155\061\170\001\001\000" +
    "\002\001\001\000\002\001\001\000\056\004\164\005\203" +
    "\007\014\012\077\015\u0113\016\171\017\176\020\157\021" +
    "\161\026\210\031\156\034\200\035\214\036\167\037\202" +
    "\041\211\042\207\045\166\047\044\050\160\057\155\061" +
    "\170\001\001\000\002\001\001\000\056\004\164\005\203" +
    "\007\014\012\077\015\u0115\016\171\017\176\020\157\021" +
    "\161\026\210\031\156\034\200\035\214\036\167\037\202" +
    "\041\211\042\207\045\166\047\044\050\160\057\155\061" +
    "\170\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\007\014\014\u0119\016\150\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public LinkedList<ErrorMsg> errorList = new LinkedList<ErrorMsg>();
 
    public void syntax_error(Symbol s) 
    {
        String lexeme = s.value.toString();
        int row =  s.right + 1;
        int column = s.left + 1;
        System.out.println("Sintax error at: " + lexeme + " row: " + row + " column: " + column);
        ErrorMsg error =  new ErrorMsg(lexeme, "Syntax error", row, column);
        errorList.add(error);
    }

    public void unrecovered_syntax_error(Symbol s)
    {        
        String lexeme = s.value.toString();
        int row = s.right + 1;
        int column = s.left + 1;
        System.out.println("Unrecovered Sintax error: " + lexeme + " row: " + row + " column: " + column);
        ErrorMsg error =  new ErrorMsg(lexeme, "Syntax error", row, column);
        errorList.add(error);
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {



  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= decl_list 
            {
              String RESULT =null;
		int dlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String dl = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // decl_list ::= declaration decl_list 
            {
              String RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int dlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String dl = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decl_list",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // decl_list ::= declaration 
            {
              String RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decl_list",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // decl_list ::= asign_equal 
            {
              String RESULT =null;
		int aeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String ae = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decl_list",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // declaration ::= global_decl 
            {
              String RESULT =null;
		int glleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int glright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String gl = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // declaration ::= const_decl 
            {
              String RESULT =null;
		int clleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int clright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String cl = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // declaration ::= funct_decl 
            {
              String RESULT =null;
		int flleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int flright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String fl = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // declaration ::= error SEMICOLON 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // declaration ::= error CLOSE_KEY 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // declaration ::= error CLOSE_BRACKET CLOSE_KEY 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // declaration ::= error CLOSE_BRACKET SEMICOLON 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // global_decl ::= var_func_decl COMMA var_decl SEMICOLON 
            {
              String RESULT =null;
		int vdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String vd = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("global_decl",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // global_decl ::= var_func_decl EQUAL assigment_type COMMA var_decl SEMICOLON 
            {
              String RESULT =null;
		int atleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int atright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String at = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int vdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String vd = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("global_decl",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // global_decl ::= var_func_decl SEMICOLON 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("global_decl",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // global_decl ::= var_func_decl EQUAL assigment_type SEMICOLON 
            {
              String RESULT =null;
		int atleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int atright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String at = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("global_decl",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // global_decl ::= I_CHAR IDENTIFIER EQUAL LITERAL_CHAR SEMICOLON 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int i1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String i1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("global_decl",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // var_type ::= I_SHORT 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_type",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // var_type ::= I_LONG 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_type",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // var_type ::= I_INT 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_type",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // var_type ::= I_CHAR MUL 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String m = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_type",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // var_decl ::= IDENTIFIER EQUAL assigment_type 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int atleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int atright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String at = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_decl",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // var_decl ::= IDENTIFIER 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_decl",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // var_decl ::= IDENTIFIER EQUAL assigment_type COMMA var_decl 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int atleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int atright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String at = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int vdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String vd = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_decl",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // var_decl ::= IDENTIFIER COMMA var_decl 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int vdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String vd = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_decl",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // assigment_type ::= LITERAL_STR 
            {
              String RESULT =null;
		int lsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String ls = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assigment_type",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // assigment_type ::= expr_math 
            {
              String RESULT =null;
		int emleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int emright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String em = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assigment_type",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // assigment_type ::= literal 
            {
              String RESULT =null;
		int cfleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String cf = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assigment_type",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // const_decl ::= I_CONST var_type var_decl SEMICOLON 
            {
              String RESULT =null;
		int vtleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int vtright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String vt = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int vdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String vd = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("const_decl",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // funct_decl ::= functin_init OPEN_BRACKET var_func_decl_list CLOSE_BRACKET OPEN_KEY stmts CLOSE_KEY 
            {
              String RESULT =null;
		int fileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int firight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String fi = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int obleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int obright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String ob = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int vfdlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int vfdlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String vfdl = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int cbleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int cbright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String cb = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int okleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int okright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String ok = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ckleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ckright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String ck = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funct_decl",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // funct_decl ::= functin_init OPEN_BRACKET CLOSE_BRACKET OPEN_KEY stmts CLOSE_KEY 
            {
              String RESULT =null;
		int fileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int firight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String fi = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int obleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int obright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String ob = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int cbleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int cbright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String cb = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int okleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int okright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String ok = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ckleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ckright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String ck = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funct_decl",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // funct_decl ::= functin_init OPEN_BRACKET CLOSE_BRACKET OPEN_KEY CLOSE_KEY 
            {
              String RESULT =null;
		int fileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int firight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String fi = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int obleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int obright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String ob = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int cbleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cbright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String cb = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int okleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int okright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String ok = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ckleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ckright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String ck = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funct_decl",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // funct_decl ::= functin_init OPEN_BRACKET var_func_decl_list CLOSE_BRACKET OPEN_KEY CLOSE_KEY 
            {
              String RESULT =null;
		int fileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int firight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String fi = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int obleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int obright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String ob = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int vfdlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int vfdlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String vfdl = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int cbleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cbright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String cb = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int okleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int okright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String ok = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ckleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ckright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String ck = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funct_decl",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // functin_init ::= var_func_decl 
            {
              String RESULT =null;
		int cfdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cfdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String cfd = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("functin_init",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // functin_init ::= I_VOID IDENTIFIER 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("functin_init",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // var_func_decl_list ::= var_func_decl COMMA var_func_decl_list 
            {
              String RESULT =null;
		int vfdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int vfdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String vfd = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int vfdlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vfdlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String vfdl = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_func_decl_list",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // var_func_decl_list ::= var_func_decl 
            {
              String RESULT =null;
		int vfdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vfdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String vfd = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_func_decl_list",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // var_func_decl ::= var_type IDENTIFIER 
            {
              String RESULT =null;
		int vtleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vtright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String vt = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_func_decl",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // stmts ::= const_decl stmts 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmts",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // stmts ::= const_decl 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmts",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // stmts ::= global_decl stmts 
            {
              String RESULT =null;
		int glleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int glright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String gl = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmts",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // stmts ::= global_decl 
            {
              String RESULT =null;
		int glleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int glright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String gl = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmts",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // stmts ::= structs stmts 
            {
              String RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int stright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String st = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int smleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int smright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String sm = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmts",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // stmts ::= structs 
            {
              String RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String st = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmts",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // stmts ::= asign_equal SEMICOLON stmts 
            {
              String RESULT =null;
		int aeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String ae = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int scleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int scright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String sc = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int smleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int smright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String sm = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmts",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // stmts ::= asign_equal SEMICOLON 
            {
              String RESULT =null;
		int aeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String ae = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int scleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int scright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String sc = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmts",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // stmts ::= IDENTIFIER EQUAL assigment_type SEMICOLON stmts 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int atleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int atright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String at = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int smleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int smright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String sm = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmts",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // stmts ::= IDENTIFIER EQUAL assigment_type SEMICOLON 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int atleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int atright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String at = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmts",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // stmts ::= MUL IDENTIFIER EQUAL assigment_type SEMICOLON stmts 
            {
              String RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String m = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int atleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int atright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String at = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int smleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int smright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String sm = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmts",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // stmts ::= MUL IDENTIFIER EQUAL assigment_type SEMICOLON 
            {
              String RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String m = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int atleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int atright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String at = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmts",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // stmts ::= incr_decr SEMICOLON stmts 
            {
              String RESULT =null;
		int scleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int scright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String sc = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int smleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int smright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String sm = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmts",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // stmts ::= incr_decr 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmts",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // stmts ::= expr_math SEMICOLON stmts 
            {
              String RESULT =null;
		int scleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int scright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String sc = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int smleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int smright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String sm = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmts",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // stmts ::= expr_math 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmts",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // stmts ::= read_func stmts 
            {
              String RESULT =null;
		int rfleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int rfright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String rf = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmts",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // stmts ::= read_func 
            {
              String RESULT =null;
		int rfleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rfright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String rf = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmts",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // stmts ::= write_func stmts 
            {
              String RESULT =null;
		int wfleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int wfright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String wf = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmts",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // stmts ::= write_func 
            {
              String RESULT =null;
		int wfleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int wfright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String wf = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmts",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // stmts ::= call_fun SEMICOLON stmts 
            {
              String RESULT =null;
		int cfleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String cf = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int scleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int scright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String sc = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmts",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // stmts ::= call_fun SEMICOLON 
            {
              String RESULT =null;
		int cfleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String cf = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int scleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int scright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String sc = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmts",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // stmts ::= return stmts 
            {
              String RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmts",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // stmts ::= return 
            {
              String RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmts",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // stmts ::= case_fin stmts 
            {
              String RESULT =null;
		int cfleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String cf = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmts",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // stmts ::= case_fin 
            {
              String RESULT =null;
		int cfleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String cf = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmts",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // stmts_switch ::= structs stmts_switch 
            {
              String RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int stright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String st = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int swleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int swright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String sw = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmts_switch",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // stmts_switch ::= structs 
            {
              String RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String st = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmts_switch",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // stmts_switch ::= asign_equal SEMICOLON stmts_switch 
            {
              String RESULT =null;
		int aeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String ae = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int scleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int scright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String sc = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int swleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int swright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String sw = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmts_switch",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // stmts_switch ::= asign_equal SEMICOLON 
            {
              String RESULT =null;
		int aeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String ae = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int scleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int scright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String sc = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmts_switch",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // stmts_switch ::= IDENTIFIER EQUAL assigment_type SEMICOLON stmts_switch 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int atleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int atright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String at = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int swleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int swright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String sw = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmts_switch",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // stmts_switch ::= IDENTIFIER EQUAL assigment_type SEMICOLON 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int atleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int atright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String at = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmts_switch",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // stmts_switch ::= MUL IDENTIFIER EQUAL assigment_type SEMICOLON stmts_switch 
            {
              String RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String m = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int atleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int atright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String at = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int swleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int swright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String sw = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmts_switch",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // stmts_switch ::= MUL IDENTIFIER EQUAL assigment_type SEMICOLON 
            {
              String RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String m = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int atleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int atright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String at = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmts_switch",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // stmts_switch ::= incr_decr SEMICOLON stmts_switch 
            {
              String RESULT =null;
		int scleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int scright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String sc = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int swleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int swright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String sw = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmts_switch",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // stmts_switch ::= incr_decr 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmts_switch",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // stmts_switch ::= expr_math SEMICOLON stmts_switch 
            {
              String RESULT =null;
		int scleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int scright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String sc = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int swleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int swright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String sw = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmts_switch",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // stmts_switch ::= expr_math 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmts_switch",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // stmts_switch ::= read_func stmts_switch 
            {
              String RESULT =null;
		int rfleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int rfright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String rf = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ssleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String ss = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmts_switch",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // stmts_switch ::= read_func 
            {
              String RESULT =null;
		int rfleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rfright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String rf = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmts_switch",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // stmts_switch ::= write_func stmts_switch 
            {
              String RESULT =null;
		int wfleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int wfright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String wf = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ssleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String ss = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmts_switch",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // stmts_switch ::= write_func 
            {
              String RESULT =null;
		int wfleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int wfright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String wf = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmts_switch",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // stmts_switch ::= call_fun SEMICOLON stmts_switch 
            {
              String RESULT =null;
		int cfleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String cf = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int scleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int scright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String sc = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int swleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int swright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String sw = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmts_switch",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // stmts_switch ::= call_fun SEMICOLON 
            {
              String RESULT =null;
		int cfleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String cf = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int scleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int scright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String sc = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmts_switch",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // stmts_switch ::= return stmts_switch 
            {
              String RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmts_switch",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // stmts_switch ::= return 
            {
              String RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmts_switch",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // call_fun ::= IDENTIFIER OPEN_BRACKET CLOSE_BRACKET 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int obleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int obright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String ob = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cbleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cbright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String cb = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("call_fun",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // call_fun ::= IDENTIFIER OPEN_BRACKET var_list CLOSE_BRACKET 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int obleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int obright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String ob = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int vlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String vl = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cbleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cbright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String cb = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("call_fun",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // read_func ::= I_READ OPEN_BRACKET IDENTIFIER CLOSE_BRACKET SEMICOLON 
            {
              String RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int obleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int obright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String ob = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cbleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cbright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String cb = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("read_func",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // read_func ::= OPEN_BRACKET CLOSE_BRACKET SEMICOLON 
            {
              String RESULT =null;
		int obleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int obright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String ob = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cbleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cbright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String cb = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("read_func",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // write_func ::= I_WRITE OPEN_BRACKET var_list CLOSE_BRACKET SEMICOLON 
            {
              String RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String w = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int obleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int obright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String ob = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int vlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int vlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String vl = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cbleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cbright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String cb = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("write_func",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // var_list ::= assigment_type COMMA var_list 
            {
              String RESULT =null;
		int atleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int atright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String at = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int vlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String vl = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_list",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // var_list ::= assigment_type 
            {
              String RESULT =null;
		int atleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int atright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String at = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_list",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // structs ::= struct_decl OPEN_KEY stmts CLOSE_KEY 
            {
              String RESULT =null;
		int okleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int okright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String ok = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ckleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ckright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String ck = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("structs",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // structs ::= switch_sent 
            {
              String RESULT =null;
		int ssleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String ss = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("structs",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // structs ::= if_sent 
            {
              String RESULT =null;
		int isleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int isright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String is = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("structs",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // struct_decl ::= struct_type OPEN_BRACKET condition CLOSE_BRACKET 
            {
              String RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int stright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String st = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int obleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int obright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String ob = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cbleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cbright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String cb = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("struct_decl",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // struct_decl ::= struct_type OPEN_BRACKET condition_for CLOSE_BRACKET 
            {
              String RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int stright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String st = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int obleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int obright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String ob = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cfleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String cf = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cbleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cbright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String cb = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("struct_decl",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // struct_type ::= I_FOR 
            {
              String RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("struct_type",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // struct_type ::= I_WHILE 
            {
              String RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String w = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("struct_type",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // if_sent ::= if_inst else_inst 
            {
              String RESULT =null;
		int isleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int isright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String is = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int esleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int esright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String es = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_sent",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // if_sent ::= if_inst 
            {
              String RESULT =null;
		int isleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int isright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String is = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_sent",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // if_inst ::= I_IF OPEN_BRACKET condition CLOSE_BRACKET OPEN_KEY stmts CLOSE_KEY 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int obleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int obright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String ob = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int cbleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int cbright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String cb = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int okleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int okright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String ok = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ckleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ckright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String ck = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_inst",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // else_inst ::= I_ELSE OPEN_KEY stmts CLOSE_KEY 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int okleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int okright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String ok = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ckleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ckright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String ck = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("else_inst",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // switch_sent ::= I_SWITCH OPEN_BRACKET var CLOSE_BRACKET OPEN_KEY cases_switch CLOSE_KEY 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int okleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int okright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String ok = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int csleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int csright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String cs = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ckleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ckright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String ck = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("switch_sent",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // cases_switch ::= mult_case_stmt case_default 
            {
              String RESULT =null;
		int mcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int mcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String mc = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String cd = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cases_switch",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // cases_switch ::= mult_case_stmt 
            {
              String RESULT =null;
		int mcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int mcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String mc = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cases_switch",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // mult_case_stmt ::= case_stmt mult_case_stmt 
            {
              String RESULT =null;
		int csleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int csright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String cs = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int mcsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int mcsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String mcs = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("mult_case_stmt",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // mult_case_stmt ::= case_stmt 
            {
              String RESULT =null;
		int csleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int csright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String cs = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("mult_case_stmt",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // case_default ::= I_DEFAULT COLON stmts_switch case_fin 
            {
              String RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cfleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String cf = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("case_default",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // case_default ::= I_DEFAULT COLON stmts_switch 
            {
              String RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("case_default",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // case_default ::= I_DEFAULT COLON stmts_switch case_fin return 
            {
              String RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cfleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String cf = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("case_default",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // case_stmt ::= I_CASE NUMBER COLON stmts_switch case_fin 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cfleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String cf = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("case_stmt",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // case_stmt ::= I_CASE NUMBER COLON stmts_switch 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("case_stmt",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // case_stmt ::= I_CASE NUMBER COLON stmts_switch case_fin return 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cfleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String cf = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("case_stmt",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // case_stmt ::= I_CASE NUMBER COLON case_fin 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cfleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String cf = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("case_stmt",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // case_stmt ::= I_CASE NUMBER COLON case_fin return 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int cfleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String cf = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("case_stmt",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // case_stmt ::= I_CASE NUMBER COLON 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("case_stmt",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // case_fin ::= I_BREAK SEMICOLON 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("case_fin",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // case_fin ::= I_CONTINUE SEMICOLON 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("case_fin",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // return ::= I_RETURN var SEMICOLON 
            {
              String RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("return",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // return ::= I_RETURN SEMICOLON 
            {
              String RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("return",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // change_var ::= INCR 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("change_var",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // change_var ::= DECR 
            {
              String RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("change_var",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // condition ::= var comparator var 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condition",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // condition_for ::= var_type var_decl SEMICOLON condition SEMICOLON incr_decr 
            {
              String RESULT =null;
		int vtleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int vtright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String vt = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int vdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String vd = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int scleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int scright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String sc = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sc1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sc1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String sc1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condition_for",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // incr_decr ::= IDENTIFIER change_var 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cvleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cvright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String cv = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("incr_decr",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // incr_decr ::= change_var IDENTIFIER 
            {
              String RESULT =null;
		int cvleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cvright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String cv = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("incr_decr",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // comparator ::= EQUAL_TO 
            {
              String RESULT =null;
		int etleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int etright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String et = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparator",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // comparator ::= GREATER_EQUAL 
            {
              String RESULT =null;
		int geleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int geright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String ge = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparator",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // comparator ::= LESS 
            {
              String RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparator",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // comparator ::= LESS_EQUAL 
            {
              String RESULT =null;
		int leleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int leright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String le = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparator",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // comparator ::= GREATER 
            {
              String RESULT =null;
		int grleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int grright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String gr = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparator",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // comparator ::= NOT_EQUAL 
            {
              String RESULT =null;
		int neleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int neright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String ne = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparator",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // comparator ::= LOGICAL_AND 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparator",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // comparator ::= LOGICAL_OR 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparator",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // var ::= NUMBER 
            {
              String RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // var ::= IDENTIFIER 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // var ::= LOGICAL_NOT IDENTIFIER 
            {
              String RESULT =null;
		int lnleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lnright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String ln = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // asign_equal ::= IDENTIFIER equals var 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asign_equal",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // equals ::= ADD_EQUAL 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("equals",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // equals ::= SUB_EQUAL 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("equals",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // equals ::= MUL_EQUAL 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("equals",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // equals ::= DIV_EQUAL 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("equals",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // expr_math ::= OPEN_BRACKET expr_math CLOSE_BRACKET expr_math 
            {
              String RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int emleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int emright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String em = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int em1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int em1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String em1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_math",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // expr_math ::= OPEN_BRACKET expr_math CLOSE_BRACKET 
            {
              String RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int emleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int emright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String em = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_math",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // expr_math ::= literal expr_uni 
            {
              String RESULT =null;
		int uleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String u = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int euleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int euright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String eu = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_math",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // expr_math ::= expr_uni 
            {
              String RESULT =null;
		int euleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int euright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String eu = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_math",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // expr_uni ::= ADD literal expr_uni 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int euleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int euright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String eu = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_uni",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // expr_uni ::= ADD literal 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_uni",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // expr_uni ::= SUB literal expr_uni 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int euleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int euright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String eu = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_uni",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // expr_uni ::= SUB literal 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_uni",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // expr_uni ::= MUL literal expr_uni 
            {
              String RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String m = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int euleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int euright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String eu = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_uni",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // expr_uni ::= MUL literal 
            {
              String RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String m = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_uni",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // expr_uni ::= DIV literal expr_uni 
            {
              String RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int euleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int euright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String eu = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_uni",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // expr_uni ::= DIV literal 
            {
              String RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_uni",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // expr_uni ::= MOD literal expr_uni 
            {
              String RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int euleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int euright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String eu = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_uni",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // expr_uni ::= MOD literal 
            {
              String RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_uni",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // literal ::= NUMBER 
            {
              String RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // literal ::= IDENTIFIER 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // literal ::= OCTAL_NUMBER 
            {
              String RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // literal ::= HEXADECIMAL_NUMBER 
            {
              String RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // literal ::= BINARY_NUMBER 
            {
              String RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // literal ::= call_fun 
            {
              String RESULT =null;
		int cfleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String cf = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
