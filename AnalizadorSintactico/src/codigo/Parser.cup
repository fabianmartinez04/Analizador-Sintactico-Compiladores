package codigo;
import  java_cup.runtime.*;
import java.util.LinkedList;

/*Parser code*/
parser code
{:
    public LinkedList<ErrorMsg> errorList = new LinkedList<ErrorMsg>();
 
    public void syntax_error(Symbol s) 
    {
        String lexeme = s.value.toString();
        int row =  s.right + 1;
        int column = s.left + 1;
        System.out.println("Sintax error at: " + lexeme + " row: " + row + " column: " + column);
        ErrorMsg error =  new ErrorMsg(lexeme, "Syntax error", row, column);
        errorList.add(error);
    }

    public void unrecovered_syntax_error(Symbol s)
    {        
        String lexeme = s.value.toString();
        int row = s.right + 1;
        int column = s.left + 1;
        System.out.println("Unrecovered Sintax error: " + lexeme + " row: " + row + " column: " + column);
        ErrorMsg error =  new ErrorMsg(lexeme, "Syntax error", row, column);
        errorList.add(error);
    }
:}


/* Grammatical action code*/
action code 
{:
:}

/*Synmbol Terminal and No-terminal*/
/*TERMINALS*/
terminal String INCR,DECR,EQUAL,ADD,SUB,MUL,DIV,MOD,OPEN_BRACKET,CLOSE_BRACKET,ADD_EQUAL,SUB_EQUAL,MUL_EQUAL,DIV_EQUAL;
terminal String EQUAL_TO,GREATER_EQUAL,LESS,LESS_EQUAL,GREATER,NOT_EQUAL,LOGICAL_OR,LOGICAL_AND,LOGICAL_NOT;
terminal String LITERAL_STR,FLOAT_NUMBER,FLOAT_POINT_NUMBER;
terminal String OCTAL_NUMBER,NUMBER,HEXADECIMAL_NUMBER,BINARY_NUMBER;
terminal String I_BREAK,I_CASE,I_CHAR,I_CONST,I_CONTINUE,I_DEFAULT,I_DO,I_ELSE,I_FOR,I_IF,I_INT,I_LONG,I_RETURN,I_SHORT,I_SWITCH,I_VOID,I_WHILE;
terminal String SEMICOLON, COMMA, IDENTIFIER, OPEN_KEY, CLOSE_KEY;

/* NON TERMINALS */
non terminal String program, decl_list, global_decl, const_decl, funct_decl, var_type, var_decl;
non terminal String literal, declaration, type_function, var_func_decl_list, stmts, var_func_decl;

start with program;

program ::= decl_list:dl
;
decl_list ::= declaration:d decl_list:dl
    | declaration:d
;
declaration ::= global_decl:gl
    | const_decl:cl
    | funct_decl:fl
    | error SEMICOLON
    | error OPEN_KEY
    | error CLOSE_KEY
    | error OPEN_BRACKET
    | error CLOSE_BRACKET
    | error IDENTIFIER
;
global_decl ::= var_type:vt var_decl:vd SEMICOLON
;
var_decl   ::= IDENTIFIER:i EQUAL literal:l
    | IDENTIFIER:i
    | IDENTIFIER:i EQUAL literal:l COMMA var_decl:vd
    | IDENTIFIER:i COMMA var_decl:vd
;
var_type ::=  I_SHORT:i
    | I_LONG:i
    | I_CHAR:i
    | I_INT:i
;
literal	::= NUMBER:n
    | LITERAL_STR:s
    | OCTAL_NUMBER:n
    | HEXADECIMAL_NUMBER:n
    | BINARY_NUMBER:n
;
const_decl  ::= I_CONST var_type:vt var_decl:vd SEMICOLON
;
funct_decl ::= type_function:ft IDENTIFIER:i OPEN_BRACKET:ob var_func_decl_list:vfdl CLOSE_BRACKET:cb OPEN_KEY:ok stmts:s CLOSE_KEY:ck
;
function_type   ::= I_SHORT:i
    | I_LONG:i
    | I_CHAR:i
    | I_INT:i
    | I_VOID:i
;
var_func_decl_list   ::= var_func_decl:vfd COMMA var_func_decl_list:vfdl
    | var_func_decl:vfd
;
var_func_decl ::= var_type:vt IDENTIFIER:i
;
stmts    ::= var_type:vt var_decl:vd SEMICOLON stmts:s
    | var_type:vt var_decl:vd
;