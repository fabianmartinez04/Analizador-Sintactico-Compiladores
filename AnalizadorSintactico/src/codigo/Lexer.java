/* The following code was generated by JFlex 1.4.3 on 5/11/21, 11:15 AM */

package codigo;
import static codigo.TipoToken.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 5/11/21, 11:15 AM from the specification file
 * <tt>D:/Desktop/CI/Proyectos/Etapa 1/Analizador-Lexico-Compiladores/AnalizadorLexico/src/codigo/Lexer.flex</tt>
 */
class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\13\1\60\2\0\1\13\22\0\1\13\1\21\1\61\2\0"+
    "\1\25\1\22\1\30\1\14\1\14\1\23\1\15\1\14\1\5\1\26"+
    "\1\24\1\4\1\12\6\12\2\3\1\14\1\14\1\20\1\16\1\17"+
    "\1\14\1\27\4\10\1\62\1\10\21\1\1\7\2\1\1\14\1\2"+
    "\1\14\1\25\1\1\1\0\1\31\1\35\1\41\1\46\1\37\1\47"+
    "\1\52\1\43\1\45\1\1\1\40\1\50\1\51\1\44\1\34\1\56"+
    "\1\1\1\36\1\42\1\33\1\32\1\57\1\54\1\6\1\55\1\53"+
    "\1\14\1\11\1\14\1\14\42\0\1\27\11\0\1\27\23\0\1\27"+
    "\1\2\1\27\5\2\1\27\1\2\1\27\3\2\1\27\3\2\1\27"+
    "\1\2\1\27\6\2\1\27\1\2\1\27\4\2\1\27\5\2\1\27"+
    "\1\2\1\27\1\27\2\2\1\27\3\2\1\27\1\2\1\27\6\2"+
    "\1\27\5\2\u245d\0\1\27\udaa2\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\1\2\1\3\2\4\2\5\1\6\10\5\2\1"+
    "\17\3\1\2\1\3\1\1\1\0\1\1\1\4\1\0"+
    "\1\1\1\7\2\4\1\1\1\5\1\0\1\6\1\1"+
    "\1\0\1\1\1\10\17\3\2\11\6\3\1\0\1\10"+
    "\1\1\1\0\1\1\1\4\1\12\2\13\1\7\2\0"+
    "\2\10\1\1\30\3\1\0\2\1\2\13\1\14\16\3"+
    "\1\15\1\0\3\15\11\3";

  private static int [] zzUnpackAction() {
    int [] result = new int[148];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\63\0\146\0\231\0\314\0\377\0\u0132\0\u0165"+
    "\0\63\0\u0198\0\u01cb\0\u01fe\0\u0231\0\u0264\0\u0297\0\u02ca"+
    "\0\u02fd\0\u0330\0\u0363\0\u0396\0\u03c9\0\u03fc\0\u042f\0\u0462"+
    "\0\u0495\0\u04c8\0\u04fb\0\u052e\0\u0561\0\u0594\0\u05c7\0\u05fa"+
    "\0\u062d\0\u0660\0\u0693\0\u06c6\0\u06f9\0\u072c\0\u075f\0\u0792"+
    "\0\u07c5\0\u07f8\0\u082b\0\u085e\0\u0891\0\u06c6\0\u08c4\0\u08f7"+
    "\0\u092a\0\u095d\0\u0990\0\u0990\0\u09c3\0\u09f6\0\u0a29\0\u0a5c"+
    "\0\u0a8f\0\u0ac2\0\u0af5\0\u0b28\0\u0b5b\0\u0b8e\0\u0bc1\0\u0bf4"+
    "\0\u0c27\0\u0c5a\0\u0c8d\0\146\0\u0cc0\0\u0cf3\0\u0d26\0\u0d59"+
    "\0\u0d8c\0\u0dbf\0\u0df2\0\u0660\0\63\0\u0e25\0\u0e58\0\u0e8b"+
    "\0\u0ebe\0\u0ef1\0\u0f24\0\u0f57\0\u0f8a\0\u0fbd\0\u0ff0\0\u092a"+
    "\0\u095d\0\u1023\0\u1056\0\u1089\0\u10bc\0\u10ef\0\u1122\0\u1155"+
    "\0\u1188\0\u11bb\0\u11ee\0\u1221\0\u1254\0\u1287\0\u12ba\0\u12ed"+
    "\0\u1320\0\u1353\0\u1386\0\u13b9\0\u13ec\0\u141f\0\u1452\0\u1485"+
    "\0\u14b8\0\u14eb\0\u151e\0\u1551\0\u1584\0\u15b7\0\u0fbd\0\63"+
    "\0\u15ea\0\u161d\0\u1650\0\u1683\0\u16b6\0\u16e9\0\u171c\0\u174f"+
    "\0\u1782\0\u17b5\0\u17e8\0\u181b\0\u184e\0\u1881\0\u18b4\0\u18b4"+
    "\0\u18e7\0\u191a\0\u194d\0\u1980\0\u19b3\0\u19e6\0\u1a19\0\u1a4c"+
    "\0\u1a7f\0\u1ab2\0\u1ae5\0\u1b18";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[148];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\2\1\4\1\5\1\6\3\3\1\7"+
    "\1\4\1\10\1\11\1\12\1\13\1\14\1\15\1\13"+
    "\1\16\1\13\1\17\1\20\1\11\1\21\1\22\1\23"+
    "\1\24\1\25\1\3\1\26\1\27\1\30\1\3\1\31"+
    "\1\32\2\3\1\33\1\34\1\35\1\36\1\3\1\37"+
    "\1\3\1\40\2\3\1\41\1\10\1\42\1\3\64\0"+
    "\1\3\1\0\2\43\1\0\3\3\1\0\1\43\7\0"+
    "\1\44\1\0\2\44\1\0\2\44\27\3\2\0\1\3"+
    "\1\45\1\46\1\45\2\47\1\45\3\46\1\45\1\47"+
    "\7\45\1\46\1\45\2\46\1\50\31\46\1\0\1\45"+
    "\1\46\1\45\1\46\1\45\2\47\1\45\2\51\1\46"+
    "\1\45\1\52\7\45\1\46\1\45\2\46\1\50\31\46"+
    "\1\0\1\45\1\46\3\0\1\53\1\54\1\11\4\0"+
    "\1\53\3\0\2\11\54\0\1\11\4\0\1\11\57\0"+
    "\1\10\44\0\1\10\17\0\2\11\62\0\1\11\62\0"+
    "\1\11\1\13\61\0\1\11\1\0\1\13\43\0\1\55"+
    "\1\0\2\44\1\0\3\55\1\0\1\44\3\0\1\11"+
    "\3\0\1\56\1\0\2\44\1\0\2\44\27\55\2\0"+
    "\1\55\1\0\1\55\1\0\2\44\1\0\3\55\1\0"+
    "\1\44\3\0\1\11\3\0\1\44\1\57\1\60\1\44"+
    "\1\0\2\44\27\55\2\0\1\55\1\0\1\55\1\0"+
    "\2\44\1\0\3\55\1\0\1\44\3\0\1\11\3\0"+
    "\1\44\1\0\2\44\1\0\2\44\27\55\2\0\1\55"+
    "\1\0\1\55\1\0\2\44\1\0\3\55\1\0\1\44"+
    "\7\0\1\44\1\0\2\44\1\0\2\44\27\55\2\0"+
    "\1\55\1\0\1\61\1\62\2\63\1\0\3\61\1\0"+
    "\1\63\1\62\6\0\1\63\1\0\2\63\1\0\1\63"+
    "\1\64\27\61\2\0\1\61\1\0\1\3\1\0\2\43"+
    "\1\0\3\3\1\0\1\43\7\0\1\44\1\0\2\44"+
    "\1\0\2\44\1\3\1\65\25\3\2\0\1\3\1\0"+
    "\1\3\1\0\2\43\1\0\3\3\1\0\1\43\7\0"+
    "\1\44\1\0\2\44\1\0\2\44\13\3\1\66\13\3"+
    "\2\0\1\3\1\0\1\3\1\0\2\43\1\0\3\3"+
    "\1\0\1\43\7\0\1\44\1\0\2\44\1\0\2\44"+
    "\24\3\1\67\2\3\2\0\1\3\1\0\1\3\1\0"+
    "\2\43\1\0\3\3\1\0\1\43\7\0\1\44\1\0"+
    "\2\44\1\0\2\44\5\3\1\70\21\3\2\0\1\3"+
    "\1\0\1\3\1\0\2\43\1\0\3\3\1\0\1\43"+
    "\7\0\1\44\1\0\2\44\1\0\2\44\6\3\1\71"+
    "\20\3\2\0\1\3\1\0\1\3\1\0\2\43\1\0"+
    "\1\72\2\3\1\0\1\43\7\0\1\44\1\0\2\44"+
    "\1\0\2\44\13\3\1\73\3\3\1\74\7\3\2\0"+
    "\1\3\1\0\1\3\1\0\2\43\1\0\3\3\1\0"+
    "\1\43\7\0\1\44\1\0\2\44\1\0\2\44\1\74"+
    "\2\3\1\75\6\3\1\76\14\3\2\0\1\3\1\0"+
    "\1\3\1\0\2\43\1\0\3\3\1\0\1\43\7\0"+
    "\1\44\1\0\2\44\1\0\2\44\2\3\1\77\7\3"+
    "\1\100\1\3\1\101\6\3\1\102\3\3\2\0\1\3"+
    "\1\0\1\3\1\0\2\43\1\0\3\3\1\0\1\43"+
    "\7\0\1\44\1\0\2\44\1\0\2\44\13\3\1\103"+
    "\2\3\1\104\10\3\2\0\1\3\1\0\1\3\1\0"+
    "\2\43\1\0\3\3\1\0\1\43\7\0\1\44\1\0"+
    "\2\44\1\0\2\44\3\3\1\105\2\3\1\106\20\3"+
    "\2\0\1\3\1\0\1\3\1\0\2\43\1\0\3\3"+
    "\1\0\1\43\7\0\1\44\1\0\2\44\1\0\2\44"+
    "\3\3\1\107\13\3\1\110\7\3\2\0\1\3\1\0"+
    "\1\3\1\0\2\43\1\0\3\3\1\0\1\43\7\0"+
    "\1\44\1\0\2\44\1\0\2\44\3\3\1\111\23\3"+
    "\2\0\1\3\1\0\1\3\1\0\2\43\1\0\3\3"+
    "\1\0\1\43\7\0\1\44\1\0\2\44\1\0\2\44"+
    "\3\3\1\65\23\3\2\0\1\3\1\0\1\3\1\0"+
    "\2\43\1\0\3\3\1\0\1\43\7\0\1\44\1\0"+
    "\2\44\1\0\2\44\12\3\1\112\14\3\2\0\1\3"+
    "\1\0\1\3\1\0\2\43\1\0\3\3\1\0\1\43"+
    "\7\0\1\44\1\0\2\44\1\0\2\44\3\3\1\113"+
    "\23\3\2\0\1\3\1\0\4\114\1\0\3\114\1\0"+
    "\2\114\6\0\1\114\1\0\2\114\1\0\31\114\1\0"+
    "\1\115\1\114\1\0\1\43\1\0\2\43\1\0\3\43"+
    "\1\0\1\43\16\0\27\43\2\0\1\43\1\0\1\116"+
    "\1\0\2\44\1\0\3\116\1\0\1\44\7\0\1\44"+
    "\1\0\2\44\1\0\2\44\27\116\2\0\1\116\3\0"+
    "\2\117\5\0\1\117\51\0\1\55\1\0\2\120\1\0"+
    "\3\55\1\0\1\120\7\0\1\55\1\0\2\55\1\0"+
    "\31\55\2\0\1\55\1\45\1\46\1\45\2\121\1\45"+
    "\3\46\1\45\1\121\7\45\1\46\1\45\2\46\1\50"+
    "\31\46\1\0\1\45\1\46\3\0\2\122\5\0\1\122"+
    "\51\0\1\55\1\0\2\123\1\0\2\55\1\124\1\0"+
    "\1\123\7\0\1\55\1\0\2\55\1\0\2\55\1\124"+
    "\3\55\1\124\1\55\1\124\1\55\1\124\4\55\2\124"+
    "\10\55\2\0\1\124\1\45\1\46\1\45\2\121\1\45"+
    "\3\46\1\45\1\125\7\45\1\46\1\45\2\46\1\50"+
    "\31\46\1\0\1\45\1\46\3\0\2\53\5\0\1\53"+
    "\53\0\2\53\1\0\2\126\2\0\1\53\51\0\1\55"+
    "\1\0\2\55\1\0\3\55\1\0\1\55\7\0\1\55"+
    "\1\0\2\55\1\0\31\55\2\0\1\55\23\57\1\127"+
    "\37\57\60\60\1\0\2\60\1\0\1\61\1\62\2\61"+
    "\1\0\3\61\1\0\1\61\1\62\6\0\1\61\1\0"+
    "\2\61\1\0\1\61\1\130\27\61\2\0\1\61\1\0"+
    "\4\62\1\0\3\62\1\0\2\62\6\0\1\62\1\0"+
    "\2\62\1\0\1\62\1\131\27\62\2\0\1\62\1\0"+
    "\1\132\1\62\2\63\1\0\3\132\1\0\1\63\1\62"+
    "\6\0\1\63\1\0\2\63\1\0\1\63\1\64\27\132"+
    "\2\0\1\132\1\0\1\3\1\0\2\43\1\0\3\3"+
    "\1\0\1\43\7\0\1\44\1\0\2\44\1\0\2\44"+
    "\2\3\1\133\24\3\2\0\1\3\1\0\1\3\1\0"+
    "\2\43\1\0\3\3\1\0\1\43\7\0\1\44\1\0"+
    "\2\44\1\0\2\44\11\3\1\134\2\3\1\135\12\3"+
    "\2\0\1\3\1\0\1\3\1\0\2\43\1\0\3\3"+
    "\1\0\1\43\7\0\1\44\1\0\2\44\1\0\2\44"+
    "\25\3\1\136\1\3\2\0\1\3\1\0\1\3\1\0"+
    "\2\43\1\0\3\3\1\0\1\43\7\0\1\44\1\0"+
    "\2\44\1\0\2\44\6\3\1\137\20\3\2\0\1\3"+
    "\1\0\1\3\1\0\2\43\1\0\3\3\1\0\1\43"+
    "\7\0\1\44\1\0\2\44\1\0\2\44\2\3\1\140"+
    "\16\3\1\141\5\3\2\0\1\3\1\0\1\3\1\0"+
    "\2\43\1\0\3\3\1\0\1\43\7\0\1\44\1\0"+
    "\2\44\1\0\2\44\2\3\1\142\24\3\2\0\1\3"+
    "\1\0\1\3\1\0\2\43\1\0\3\3\1\0\1\43"+
    "\7\0\1\44\1\0\2\44\1\0\2\44\1\3\1\143"+
    "\25\3\2\0\1\3\1\0\1\3\1\0\2\43\1\0"+
    "\3\3\1\0\1\43\7\0\1\44\1\0\2\44\1\0"+
    "\2\44\11\3\1\144\15\3\2\0\1\3\1\0\1\3"+
    "\1\0\2\43\1\0\3\3\1\0\1\43\7\0\1\44"+
    "\1\0\2\44\1\0\2\44\13\3\1\145\13\3\2\0"+
    "\1\3\1\0\1\3\1\0\2\43\1\0\3\3\1\0"+
    "\1\43\7\0\1\44\1\0\2\44\1\0\2\44\1\107"+
    "\26\3\2\0\1\3\1\0\1\3\1\0\2\43\1\0"+
    "\3\3\1\0\1\43\7\0\1\44\1\0\2\44\1\0"+
    "\2\44\1\146\4\3\1\147\21\3\2\0\1\3\1\0"+
    "\1\3\1\0\2\43\1\0\3\3\1\0\1\43\7\0"+
    "\1\44\1\0\2\44\1\0\2\44\3\3\1\150\23\3"+
    "\2\0\1\3\1\0\1\3\1\0\2\43\1\0\3\3"+
    "\1\0\1\43\7\0\1\44\1\0\2\44\1\0\2\44"+
    "\21\3\1\151\1\152\4\3\2\0\1\3\1\0\1\3"+
    "\1\0\2\43\1\0\3\3\1\0\1\43\7\0\1\44"+
    "\1\0\2\44\1\0\2\44\14\3\1\153\12\3\2\0"+
    "\1\3\1\0\1\3\1\0\2\43\1\0\3\3\1\0"+
    "\1\43\7\0\1\44\1\0\2\44\1\0\2\44\2\3"+
    "\1\104\24\3\2\0\1\3\1\0\1\3\1\0\2\43"+
    "\1\0\3\3\1\0\1\43\7\0\1\44\1\0\2\44"+
    "\1\0\2\44\1\3\1\154\25\3\2\0\1\3\1\0"+
    "\1\3\1\0\2\43\1\0\3\3\1\0\1\43\7\0"+
    "\1\44\1\0\2\44\1\0\2\44\16\3\1\155\10\3"+
    "\2\0\1\3\1\0\1\3\1\0\2\43\1\0\3\3"+
    "\1\0\1\43\7\0\1\44\1\0\2\44\1\0\2\44"+
    "\5\3\1\104\21\3\2\0\1\3\1\0\1\3\1\0"+
    "\2\43\1\0\3\3\1\0\1\43\7\0\1\44\1\0"+
    "\2\44\1\0\2\44\3\3\1\156\23\3\2\0\1\3"+
    "\1\0\1\3\1\0\2\43\1\0\3\3\1\0\1\43"+
    "\7\0\1\44\1\0\2\44\1\0\2\44\13\3\1\157"+
    "\13\3\2\0\1\3\1\0\1\3\1\0\2\43\1\0"+
    "\3\3\1\0\1\43\7\0\1\44\1\0\2\44\1\0"+
    "\2\44\14\3\1\160\12\3\2\0\1\3\1\0\1\3"+
    "\1\0\2\43\1\0\3\3\1\0\1\43\7\0\1\44"+
    "\1\0\2\44\1\0\2\44\14\3\1\161\2\3\1\162"+
    "\7\3\2\0\1\3\1\0\1\116\4\0\3\116\11\0"+
    "\1\44\1\0\2\44\1\0\2\44\27\116\2\0\1\116"+
    "\3\0\2\117\5\0\1\117\24\0\1\163\22\0\1\163"+
    "\1\0\1\55\1\0\2\120\1\0\3\55\1\0\1\120"+
    "\7\0\1\55\1\0\2\55\1\0\10\55\1\164\20\55"+
    "\2\0\1\164\1\45\1\46\1\45\2\121\1\45\3\46"+
    "\1\45\1\121\7\45\1\46\1\45\2\46\1\50\10\46"+
    "\1\165\20\46\1\0\1\45\1\165\3\0\2\122\5\0"+
    "\1\122\24\0\1\163\22\0\1\163\1\0\1\55\1\0"+
    "\2\123\1\0\2\55\1\124\1\0\1\123\7\0\1\55"+
    "\1\0\2\55\1\0\2\55\1\124\3\55\1\124\1\55"+
    "\1\166\1\55\1\124\4\55\2\124\10\55\2\0\1\166"+
    "\1\0\1\55\1\0\2\124\1\0\2\55\1\124\1\0"+
    "\1\124\7\0\1\55\1\0\2\55\1\0\2\55\1\124"+
    "\3\55\1\124\1\55\1\124\1\55\1\124\4\55\2\124"+
    "\10\55\2\0\1\124\1\45\1\46\1\45\2\121\1\45"+
    "\3\46\1\45\1\125\7\45\1\46\1\45\2\46\1\50"+
    "\10\46\1\165\20\46\1\0\1\45\1\165\3\0\2\167"+
    "\3\0\1\167\1\0\1\167\16\0\1\167\3\0\1\167"+
    "\1\0\1\167\1\0\1\167\4\0\2\167\12\0\1\167"+
    "\23\57\1\127\1\170\36\57\1\0\1\132\3\62\1\0"+
    "\3\132\1\0\2\62\6\0\1\63\1\0\2\63\1\0"+
    "\1\63\1\64\27\132\2\0\1\132\1\0\1\3\1\0"+
    "\2\43\1\0\3\3\1\0\1\43\7\0\1\44\1\0"+
    "\2\44\1\0\2\44\3\3\1\104\23\3\2\0\1\3"+
    "\1\0\1\3\1\0\2\43\1\0\3\3\1\0\1\43"+
    "\7\0\1\44\1\0\2\44\1\0\2\44\14\3\1\171"+
    "\12\3\2\0\1\3\1\0\1\3\1\0\2\43\1\0"+
    "\3\3\1\0\1\43\7\0\1\44\1\0\2\44\1\0"+
    "\2\44\3\3\1\172\23\3\2\0\1\3\1\0\1\3"+
    "\1\0\2\43\1\0\3\3\1\0\1\43\7\0\1\44"+
    "\1\0\2\44\1\0\2\44\6\3\1\173\20\3\2\0"+
    "\1\3\1\0\1\3\1\0\2\43\1\0\3\3\1\0"+
    "\1\43\7\0\1\44\1\0\2\44\1\0\2\44\1\174"+
    "\26\3\2\0\1\3\1\0\1\3\1\0\2\43\1\0"+
    "\3\3\1\0\1\43\7\0\1\44\1\0\2\44\1\0"+
    "\2\44\1\3\1\175\25\3\2\0\1\3\1\0\1\3"+
    "\1\0\2\43\1\0\3\3\1\0\1\43\7\0\1\44"+
    "\1\0\2\44\1\0\2\44\14\3\1\176\12\3\2\0"+
    "\1\3\1\0\1\3\1\0\2\43\1\0\3\3\1\0"+
    "\1\43\7\0\1\44\1\0\2\44\1\0\2\44\6\3"+
    "\1\175\20\3\2\0\1\3\1\0\1\3\1\0\2\43"+
    "\1\0\3\3\1\0\1\43\7\0\1\44\1\0\2\44"+
    "\1\0\2\44\20\3\1\104\6\3\2\0\1\3\1\0"+
    "\1\3\1\0\2\43\1\0\3\3\1\0\1\43\7\0"+
    "\1\44\1\0\2\44\1\0\2\44\6\3\1\104\20\3"+
    "\2\0\1\3\1\0\1\3\1\0\2\43\1\0\3\3"+
    "\1\0\1\43\7\0\1\44\1\0\2\44\1\0\2\44"+
    "\2\3\1\177\6\3\1\103\15\3\2\0\1\3\1\0"+
    "\1\3\1\0\2\43\1\0\3\3\1\0\1\43\7\0"+
    "\1\44\1\0\2\44\1\0\2\44\2\3\1\200\24\3"+
    "\2\0\1\3\1\0\1\3\1\0\2\43\1\0\3\3"+
    "\1\0\1\43\7\0\1\44\1\0\2\44\1\0\2\44"+
    "\1\3\1\201\25\3\2\0\1\3\1\0\1\3\1\0"+
    "\2\43\1\0\3\3\1\0\1\43\7\0\1\44\1\0"+
    "\2\44\1\0\2\44\5\3\1\103\21\3\2\0\1\3"+
    "\1\0\1\3\1\0\2\43\1\0\3\3\1\0\1\43"+
    "\7\0\1\44\1\0\2\44\1\0\2\44\13\3\1\202"+
    "\13\3\2\0\1\3\1\0\1\3\1\0\2\43\1\0"+
    "\3\3\1\0\1\43\7\0\1\44\1\0\2\44\1\0"+
    "\2\44\6\3\1\203\20\3\2\0\1\3\1\0\1\3"+
    "\1\0\2\43\1\0\3\3\1\0\1\43\7\0\1\44"+
    "\1\0\2\44\1\0\2\44\2\3\1\204\24\3\2\0"+
    "\1\3\1\0\1\3\1\0\2\43\1\0\3\3\1\0"+
    "\1\43\7\0\1\44\1\0\2\44\1\0\2\44\4\3"+
    "\1\160\22\3\2\0\1\3\1\0\1\3\1\0\2\43"+
    "\1\0\3\3\1\0\1\43\7\0\1\44\1\0\2\44"+
    "\1\0\2\44\1\205\26\3\2\0\1\3\1\0\1\3"+
    "\1\0\2\43\1\0\3\3\1\0\1\43\7\0\1\44"+
    "\1\0\2\44\1\0\2\44\1\103\26\3\2\0\1\3"+
    "\1\0\1\3\1\0\2\43\1\0\3\3\1\0\1\43"+
    "\7\0\1\44\1\0\2\44\1\0\2\44\21\3\1\104"+
    "\5\3\2\0\1\3\1\0\1\3\1\0\2\43\1\0"+
    "\3\3\1\0\1\43\7\0\1\44\1\0\2\44\1\0"+
    "\2\44\17\3\1\144\7\3\2\0\1\3\1\0\1\3"+
    "\1\0\2\43\1\0\3\3\1\0\1\43\7\0\1\44"+
    "\1\0\2\44\1\0\2\44\15\3\1\104\11\3\2\0"+
    "\1\3\1\0\1\3\1\0\2\43\1\0\3\3\1\0"+
    "\1\43\7\0\1\44\1\0\2\44\1\0\2\44\1\206"+
    "\26\3\2\0\1\3\3\0\2\207\1\210\4\0\1\207"+
    "\51\0\1\55\1\0\2\211\1\210\3\55\1\0\1\211"+
    "\7\0\1\55\1\0\2\55\1\0\31\55\2\0\1\55"+
    "\1\0\1\55\1\0\2\212\1\210\3\55\1\0\1\212"+
    "\7\0\1\55\1\0\2\55\1\0\31\55\2\0\1\55"+
    "\1\0\1\55\1\0\2\213\1\210\2\55\1\124\1\0"+
    "\1\213\7\0\1\55\1\0\2\55\1\0\2\55\1\124"+
    "\3\55\1\124\1\55\1\124\1\55\1\124\4\55\2\124"+
    "\10\55\2\0\1\124\1\0\1\3\1\0\2\43\1\0"+
    "\3\3\1\0\1\43\7\0\1\44\1\0\2\44\1\0"+
    "\2\44\21\3\1\151\5\3\2\0\1\3\1\0\1\3"+
    "\1\0\2\43\1\0\3\3\1\0\1\43\7\0\1\44"+
    "\1\0\2\44\1\0\2\44\13\3\1\104\13\3\2\0"+
    "\1\3\1\0\1\3\1\0\2\43\1\0\3\3\1\0"+
    "\1\43\7\0\1\44\1\0\2\44\1\0\2\44\15\3"+
    "\1\214\11\3\2\0\1\3\1\0\1\3\1\0\2\43"+
    "\1\0\3\3\1\0\1\43\7\0\1\44\1\0\2\44"+
    "\1\0\2\44\7\3\1\104\17\3\2\0\1\3\1\0"+
    "\1\3\1\0\2\43\1\0\3\3\1\0\1\43\7\0"+
    "\1\44\1\0\2\44\1\0\2\44\5\3\1\172\21\3"+
    "\2\0\1\3\1\0\1\3\1\0\2\43\1\0\3\3"+
    "\1\0\1\43\7\0\1\44\1\0\2\44\1\0\2\44"+
    "\11\3\1\215\15\3\2\0\1\3\1\0\1\3\1\0"+
    "\2\43\1\0\3\3\1\0\1\43\7\0\1\44\1\0"+
    "\2\44\1\0\2\44\14\3\1\216\12\3\2\0\1\3"+
    "\1\0\1\3\1\0\2\43\1\0\3\3\1\0\1\43"+
    "\7\0\1\44\1\0\2\44\1\0\2\44\14\3\1\217"+
    "\12\3\2\0\1\3\1\0\1\3\1\0\2\43\1\0"+
    "\3\3\1\0\1\43\7\0\1\44\1\0\2\44\1\0"+
    "\2\44\10\3\1\103\16\3\2\0\1\3\1\0\1\3"+
    "\1\0\2\43\1\0\3\3\1\0\1\43\7\0\1\44"+
    "\1\0\2\44\1\0\2\44\6\3\1\161\20\3\2\0"+
    "\1\3\1\0\1\3\1\0\2\43\1\0\3\3\1\0"+
    "\1\43\7\0\1\44\1\0\2\44\1\0\2\44\3\3"+
    "\1\220\23\3\2\0\1\3\1\0\1\3\1\0\2\43"+
    "\1\0\3\3\1\0\1\43\7\0\1\44\1\0\2\44"+
    "\1\0\2\44\10\3\1\221\16\3\2\0\1\3\1\0"+
    "\1\3\1\0\2\43\1\0\3\3\1\0\1\43\7\0"+
    "\1\44\1\0\2\44\1\0\2\44\1\3\1\222\25\3"+
    "\2\0\1\3\1\0\1\3\1\0\2\43\1\0\3\3"+
    "\1\0\1\43\7\0\1\44\1\0\2\44\1\0\2\44"+
    "\2\3\1\112\24\3\2\0\1\3\3\0\2\207\5\0"+
    "\1\207\51\0\1\55\1\0\2\211\1\0\3\55\1\0"+
    "\1\211\7\0\1\55\1\0\2\55\1\0\31\55\2\0"+
    "\1\55\1\0\1\55\1\0\2\212\1\0\3\55\1\0"+
    "\1\212\7\0\1\55\1\0\2\55\1\0\10\55\1\164"+
    "\20\55\2\0\1\164\1\0\1\55\1\0\2\213\1\0"+
    "\2\55\1\124\1\0\1\213\7\0\1\55\1\0\2\55"+
    "\1\0\2\55\1\124\3\55\1\124\1\55\1\124\1\55"+
    "\1\124\4\55\2\124\10\55\2\0\1\124\1\0\1\3"+
    "\1\0\2\43\1\0\3\3\1\0\1\43\7\0\1\44"+
    "\1\0\2\44\1\0\2\44\6\3\1\220\20\3\2\0"+
    "\1\3\1\0\1\3\1\0\2\43\1\0\3\3\1\0"+
    "\1\43\7\0\1\44\1\0\2\44\1\0\2\44\2\3"+
    "\1\223\24\3\2\0\1\3\1\0\1\3\1\0\2\43"+
    "\1\0\3\3\1\0\1\43\7\0\1\44\1\0\2\44"+
    "\1\0\2\44\13\3\1\224\13\3\2\0\1\3\1\0"+
    "\1\3\1\0\2\43\1\0\3\3\1\0\1\43\7\0"+
    "\1\44\1\0\2\44\1\0\2\44\10\3\1\104\16\3"+
    "\2\0\1\3\1\0\1\3\1\0\2\43\1\0\3\3"+
    "\1\0\1\43\7\0\1\44\1\0\2\44\1\0\2\44"+
    "\16\3\1\104\10\3\2\0\1\3\1\0\1\3\1\0"+
    "\2\43\1\0\3\3\1\0\1\43\7\0\1\44\1\0"+
    "\2\44\1\0\2\44\12\3\1\104\14\3\2\0\1\3"+
    "\1\0\1\3\1\0\2\43\1\0\3\3\1\0\1\43"+
    "\7\0\1\44\1\0\2\44\1\0\2\44\17\3\1\103"+
    "\7\3\2\0\1\3\1\0\1\3\1\0\2\43\1\0"+
    "\3\3\1\0\1\43\7\0\1\44\1\0\2\44\1\0"+
    "\2\44\6\3\1\107\20\3\2\0\1\3\1\0\1\3"+
    "\1\0\2\43\1\0\3\3\1\0\1\43\7\0\1\44"+
    "\1\0\2\44\1\0\2\44\1\3\1\144\25\3\2\0"+
    "\1\3";

  private static int [] zzUnpackTrans() {
    int [] result = new int[6987];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\1\1\11\6\1\1\11\33\1\1\0\2\1\1\0"+
    "\6\1\1\0\2\1\1\0\31\1\1\0\1\11\1\1"+
    "\1\0\6\1\2\0\33\1\1\0\4\1\1\11\17\1"+
    "\1\0\14\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[148];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    public String lexeme;
    public Integer row;
    public Integer column;


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 230) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public TipoToken yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 9: 
          { lexeme = yytext(); row = yyline; column = yycolumn; return Keyword;
          }
        case 14: break;
        case 8: 
          { lexeme = yytext(); row = yyline; column = yycolumn; return LiteralString;
          }
        case 15: break;
        case 1: 
          { lexeme = yytext(); row = yyline; column = yycolumn; return Error;
          }
        case 16: break;
        case 5: 
          { lexeme = yytext(); row = yyline; column = yycolumn; return Operator;
          }
        case 17: break;
        case 12: 
          { /* Ignore */
          }
        case 18: break;
        case 3: 
          { lexeme = yytext(); row = yyline; column = yycolumn; return Identifier;
          }
        case 19: break;
        case 11: 
          { lexeme = yytext(); row = yyline; column = yycolumn; return HexadecimalNumber;
          }
        case 20: break;
        case 13: 
          { lexeme = yytext(); row = yyline; column = yycolumn; return PointFloatingNumber;
          }
        case 21: break;
        case 7: 
          { lexeme = yytext(); row = yyline; column = yycolumn; return OctalNumber;
          }
        case 22: break;
        case 2: 
          { lexeme = yytext(); row = yyline; column = yycolumn; return ERROR;
          }
        case 23: break;
        case 10: 
          { lexeme = yytext(); row = yyline; column = yycolumn; return FloatNumber;
          }
        case 24: break;
        case 6: 
          { /*Ignore*/
          }
        case 25: break;
        case 4: 
          { lexeme = yytext(); row = yyline; column = yycolumn; return Number;
          }
        case 26: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
