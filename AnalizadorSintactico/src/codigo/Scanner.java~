/* The following code was generated by JFlex 1.6.1 */

package codigo;
import java_cup.runtime.*;
/* User code */

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>Scanner.flex</tt>
 */
public class Scanner implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0,  9, 53, 55, 55, 54,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     9, 15, 56,  0,  0, 19, 16, 26, 20, 21, 17, 11,  0,  4, 22, 18, 
     3,  8,  8,  8,  8,  8,  8,  8,  2,  2,  0,  0, 14, 12, 13,  0, 
    23, 32, 36, 41, 48, 38,  6, 50, 44, 47,  1, 40, 49,  1, 45, 35, 
     1,  1, 37, 43, 34, 33, 52, 51,  5,  1,  1,  0, 10,  0, 23,  1, 
     0, 32, 36, 41, 48, 38,  6, 50, 44, 47,  1, 40, 49,  1, 45, 35, 
     1,  1, 37, 43, 34, 33, 52, 51,  5,  1,  1,  0,  7,  0,  0,  0, 
     0,  0,  0,  0,  0, 55,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0, 29,  0,  0,  0,  0,  0, 25,  0, 25, 25, 28,  0, 25,  0,  0, 
     0, 25,  0, 25,  0,  0,  0,  0,  0,  0, 25,  0,  0,  0,  0, 28, 
     0,  0, 27, 24,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0, 27, 24,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\1\1\2\2\3\1\4\1\2\1\1\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\1\1\13\1\14\1\15"+
    "\1\16\1\17\4\1\4\2\1\1\1\2\1\1\5\2"+
    "\1\1\1\2\1\1\3\0\1\1\1\3\3\0\1\1"+
    "\1\20\2\3\1\21\1\22\1\2\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\1\1\32\1\33\1\34"+
    "\1\0\1\5\2\1\2\0\1\35\2\0\6\2\2\0"+
    "\2\2\1\36\1\0\1\36\1\2\1\37\4\2\3\0"+
    "\1\35\1\1\2\0\1\1\2\0\1\3\1\40\1\0"+
    "\2\41\1\20\1\0\1\42\2\0\1\35\1\0\1\1"+
    "\1\0\1\35\2\0\2\2\1\0\1\2\1\0\3\2"+
    "\2\0\2\2\2\43\2\2\1\0\1\2\1\0\1\2"+
    "\2\0\2\1\2\41\1\44\2\0\2\2\2\45\2\46"+
    "\1\2\1\0\1\2\1\47\2\0\3\2\1\50\1\0"+
    "\1\2\2\51\1\52\1\0\3\52\2\53\1\2\1\0"+
    "\1\2\2\54\1\55\1\0\1\55\2\2\2\56\1\57"+
    "\1\0\1\2\2\60\1\2\1\0\1\2\1\61\2\62";

  private static int [] zzUnpackAction() {
    int [] result = new int[199];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\71\0\162\0\253\0\344\0\u011d\0\u0156\0\u018f"+
    "\0\u01c8\0\u0201\0\u023a\0\u0273\0\u02ac\0\u02e5\0\u031e\0\u0357"+
    "\0\u0390\0\u03c9\0\71\0\71\0\u03c9\0\u0402\0\u043b\0\u0474"+
    "\0\u04ad\0\u04e6\0\u051f\0\u0558\0\u0591\0\u05ca\0\u0603\0\u063c"+
    "\0\u0675\0\u06ae\0\u06e7\0\u0720\0\u0759\0\u0792\0\u07cb\0\u0804"+
    "\0\u083d\0\u0876\0\u08af\0\u08e8\0\u0921\0\u095a\0\u0993\0\u09cc"+
    "\0\u0a05\0\u0a3e\0\u0a77\0\71\0\71\0\u0ab0\0\71\0\71"+
    "\0\71\0\71\0\71\0\71\0\71\0\u0ae9\0\u07cb\0\71"+
    "\0\71\0\u0b22\0\u0b5b\0\u0b94\0\u0bcd\0\u0c06\0\u0c3f\0\u0bcd"+
    "\0\u0c78\0\u0cb1\0\u0cea\0\u0d23\0\u0d5c\0\u0d95\0\u0dce\0\u0e07"+
    "\0\u0e40\0\u0e79\0\u0eb2\0\u0eeb\0\71\0\u0f24\0\162\0\u0f5d"+
    "\0\162\0\u0f96\0\u0fcf\0\u1008\0\u1041\0\u0759\0\u107a\0\u10b3"+
    "\0\71\0\u10ec\0\u1125\0\u115e\0\u1197\0\u11d0\0\u1209\0\u1242"+
    "\0\u127b\0\u12b4\0\u12ed\0\u1326\0\u135f\0\u1398\0\162\0\u13d1"+
    "\0\u140a\0\u0b94\0\u1443\0\u147c\0\u14b5\0\u0c06\0\u14ee\0\u1527"+
    "\0\u1560\0\u1599\0\u15d2\0\u160b\0\u1644\0\u167d\0\u16b6\0\u16ef"+
    "\0\u1728\0\u1761\0\u179a\0\u17d3\0\71\0\162\0\u180c\0\u1845"+
    "\0\u187e\0\u18b7\0\u18f0\0\u1929\0\u1962\0\u199b\0\u19d4\0\u1a0d"+
    "\0\u1a46\0\u1398\0\71\0\u1a7f\0\u1ab8\0\u1af1\0\u1b2a\0\71"+
    "\0\162\0\71\0\162\0\u1b63\0\u1b9c\0\u1bd5\0\162\0\u1c0e"+
    "\0\u1c47\0\u1c80\0\u1cb9\0\u1cf2\0\162\0\u1d2b\0\u1d64\0\71"+
    "\0\162\0\u1d9d\0\u1d9d\0\u1dd6\0\u1e0f\0\u1e48\0\71\0\162"+
    "\0\u1e81\0\u1eba\0\u1ef3\0\71\0\162\0\71\0\u1f2c\0\162"+
    "\0\u1f65\0\u1f9e\0\71\0\162\0\162\0\u1fd7\0\u2010\0\71"+
    "\0\162\0\u2049\0\u2082\0\u20bb\0\162\0\71\0\162";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[199];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\3\1\7\1\10"+
    "\1\4\1\11\1\2\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\2\1\25"+
    "\1\26\1\2\1\27\1\30\4\2\4\3\1\31\1\32"+
    "\1\33\1\2\1\3\1\34\1\35\1\36\2\3\1\37"+
    "\1\40\1\41\1\42\1\3\1\43\1\44\2\11\1\0"+
    "\1\45\72\0\1\3\2\46\1\0\2\3\1\0\1\46"+
    "\7\0\1\47\1\0\2\47\3\0\1\47\1\50\1\0"+
    "\1\47\1\51\4\0\7\3\1\0\2\3\1\0\3\3"+
    "\1\0\6\3\4\0\1\52\1\53\2\54\1\52\2\53"+
    "\1\52\1\54\7\52\1\53\1\52\2\53\2\52\1\55"+
    "\1\53\1\56\1\52\1\53\1\57\4\52\7\53\1\52"+
    "\2\53\1\52\3\53\1\52\6\53\3\0\2\52\1\53"+
    "\2\54\1\52\1\60\1\53\1\52\1\61\7\52\1\53"+
    "\1\52\2\53\2\52\1\55\1\53\1\56\1\52\1\53"+
    "\1\57\4\52\7\53\1\52\2\53\1\52\3\53\1\52"+
    "\6\53\3\0\1\52\2\0\1\62\1\63\1\64\3\0"+
    "\1\62\3\0\1\65\55\0\1\3\2\46\1\0\2\3"+
    "\1\0\1\46\7\0\1\47\1\0\2\47\3\0\1\47"+
    "\1\50\1\0\1\47\1\51\4\0\3\3\1\66\3\3"+
    "\1\0\2\3\1\0\3\3\1\0\6\3\13\0\1\67"+
    "\72\0\1\11\53\0\2\11\15\0\1\70\1\71\70\0"+
    "\1\72\70\0\1\73\70\0\1\74\70\0\1\75\55\0"+
    "\1\76\2\47\1\0\2\76\1\0\1\47\7\0\1\77"+
    "\1\0\2\47\3\0\1\47\1\50\1\0\1\47\1\51"+
    "\4\0\7\76\1\0\2\76\1\0\3\76\1\0\6\76"+
    "\20\0\1\100\55\0\1\76\2\47\1\0\2\76\1\0"+
    "\1\47\3\0\1\101\3\0\1\47\1\102\1\103\1\47"+
    "\3\0\1\47\1\50\1\0\1\47\1\51\4\0\7\76"+
    "\1\0\2\76\1\0\3\76\1\0\6\76\5\0\1\76"+
    "\2\47\1\0\2\76\1\0\1\47\7\0\1\47\1\0"+
    "\2\47\3\0\1\47\1\50\1\0\1\47\1\51\4\0"+
    "\7\76\1\0\2\76\1\0\3\76\1\0\6\76\35\0"+
    "\1\25\3\0\1\25\1\0\1\25\32\0\1\104\2\105"+
    "\1\0\2\104\1\0\1\105\2\106\5\0\1\105\1\0"+
    "\2\105\3\0\1\105\1\107\1\0\1\110\1\111\4\0"+
    "\7\104\1\0\2\104\1\0\3\104\1\0\6\104\1\0"+
    "\1\106\36\0\2\25\1\112\33\0\1\3\2\46\1\0"+
    "\2\3\1\0\1\46\7\0\1\47\1\0\2\47\3\0"+
    "\1\47\1\50\1\0\1\47\1\51\4\0\5\3\1\113"+
    "\1\3\1\0\2\3\1\0\3\3\1\0\6\3\5\0"+
    "\1\3\2\46\1\0\2\3\1\0\1\46\7\0\1\47"+
    "\1\0\2\47\3\0\1\47\1\50\1\0\1\47\1\51"+
    "\4\0\6\3\1\114\1\0\2\3\1\0\3\3\1\0"+
    "\6\3\5\0\1\3\2\46\1\0\2\3\1\0\1\46"+
    "\7\0\1\47\1\0\2\47\3\0\1\47\1\50\1\0"+
    "\1\47\1\51\4\0\7\3\1\0\2\3\1\0\3\3"+
    "\1\0\2\3\1\115\3\3\5\0\1\3\2\46\1\0"+
    "\2\3\1\0\1\46\7\0\1\47\1\0\2\47\3\0"+
    "\1\47\1\50\1\0\1\47\1\51\4\0\1\116\2\3"+
    "\1\117\3\3\1\0\2\3\1\0\1\3\1\120\1\3"+
    "\1\0\6\3\60\0\1\121\6\0\1\122\6\0\1\3"+
    "\2\46\1\0\2\3\1\0\1\46\7\0\1\47\1\0"+
    "\2\47\3\0\1\47\1\50\1\0\1\47\1\51\4\0"+
    "\7\3\1\0\2\3\1\0\1\3\1\123\1\3\1\0"+
    "\4\3\1\124\1\3\12\0\1\125\46\0\1\126\14\0"+
    "\1\3\2\46\1\0\1\3\1\127\1\0\1\46\7\0"+
    "\1\47\1\0\2\47\3\0\1\47\1\50\1\0\1\47"+
    "\1\51\4\0\7\3\1\0\2\3\1\0\2\3\1\130"+
    "\1\0\6\3\5\0\1\3\2\46\1\0\2\3\1\0"+
    "\1\46\7\0\1\47\1\0\2\47\3\0\1\47\1\50"+
    "\1\0\1\47\1\51\4\0\3\3\1\131\2\3\1\132"+
    "\1\0\2\3\1\0\3\3\1\0\6\3\5\0\1\3"+
    "\2\46\1\0\2\3\1\0\1\46\7\0\1\47\1\0"+
    "\2\47\3\0\1\47\1\50\1\0\1\47\1\51\4\0"+
    "\3\3\1\133\3\3\1\0\2\3\1\0\3\3\1\0"+
    "\6\3\5\0\1\3\2\46\1\0\2\3\1\0\1\46"+
    "\7\0\1\47\1\0\2\47\3\0\1\47\1\50\1\0"+
    "\1\47\1\51\4\0\7\3\1\0\2\3\1\0\1\3"+
    "\1\134\1\3\1\0\6\3\5\0\1\3\2\46\1\0"+
    "\2\3\1\0\1\46\7\0\1\47\1\0\2\47\3\0"+
    "\1\47\1\50\1\0\1\47\1\51\4\0\3\3\1\135"+
    "\3\3\1\0\2\3\1\0\3\3\1\0\6\3\5\0"+
    "\3\136\1\0\2\136\1\0\3\136\5\0\1\136\1\0"+
    "\2\136\3\0\1\136\1\137\1\0\1\136\1\140\4\0"+
    "\7\136\1\0\2\136\1\0\3\136\1\0\6\136\1\0"+
    "\1\136\1\0\1\141\1\0\3\46\1\0\2\46\1\0"+
    "\1\46\27\0\7\46\1\0\2\46\1\0\3\46\1\0"+
    "\6\46\5\0\1\142\2\47\1\0\2\142\1\0\1\47"+
    "\7\0\1\47\1\0\2\47\3\0\1\47\1\50\1\0"+
    "\1\47\1\51\4\0\7\142\1\0\2\142\1\0\3\142"+
    "\1\0\6\142\35\0\1\47\3\0\1\47\1\0\1\47"+
    "\65\0\2\47\1\143\34\0\2\144\4\0\1\144\61\0"+
    "\1\76\2\145\1\0\2\76\1\0\1\145\7\0\1\76"+
    "\1\0\2\76\3\0\1\76\1\146\1\0\1\76\1\147"+
    "\4\0\7\76\1\0\2\76\1\0\3\76\1\0\6\76"+
    "\4\0\1\52\1\53\2\150\1\52\2\53\1\52\1\150"+
    "\7\52\1\53\1\52\2\53\2\52\1\55\1\53\1\56"+
    "\1\52\1\53\1\57\4\52\7\53\1\52\2\53\1\52"+
    "\3\53\1\52\6\53\3\0\1\52\2\0\2\151\4\0"+
    "\1\151\62\0\2\144\4\0\1\144\20\0\1\76\3\0"+
    "\1\76\1\0\1\76\33\0\2\144\4\0\1\144\23\0"+
    "\2\76\1\152\33\0\1\76\2\153\1\0\1\76\1\154"+
    "\1\0\1\153\7\0\1\76\1\0\2\76\3\0\1\76"+
    "\1\146\1\0\1\76\1\147\4\0\1\154\3\76\1\154"+
    "\1\76\1\154\1\0\1\76\1\154\1\0\3\76\1\0"+
    "\1\76\1\154\4\76\4\0\1\52\1\53\2\150\1\52"+
    "\2\53\1\52\1\155\7\52\1\53\1\52\2\53\2\52"+
    "\1\55\1\53\1\56\1\52\1\53\1\57\4\52\7\53"+
    "\1\52\2\53\1\52\3\53\1\52\6\53\3\0\1\52"+
    "\2\0\2\62\4\0\1\62\62\0\2\62\1\0\1\156"+
    "\2\0\1\62\61\0\1\3\2\46\1\0\2\3\1\0"+
    "\1\46\7\0\1\47\1\0\2\47\3\0\1\47\1\50"+
    "\1\0\1\47\1\51\4\0\5\3\1\157\1\3\1\0"+
    "\2\3\1\0\3\3\1\0\6\3\5\0\3\76\1\0"+
    "\2\76\1\0\1\76\7\0\1\76\1\0\2\76\3\0"+
    "\1\76\1\146\1\0\1\76\1\147\4\0\7\76\1\0"+
    "\2\76\1\0\3\76\1\0\6\76\4\0\21\102\1\160"+
    "\47\102\65\103\3\0\1\103\1\0\3\104\1\0\2\104"+
    "\1\0\1\104\2\106\5\0\1\104\1\0\2\104\3\0"+
    "\1\104\1\161\1\0\1\162\1\163\4\0\7\104\1\0"+
    "\2\104\1\0\3\104\1\0\6\104\1\0\1\106\3\0"+
    "\1\164\2\105\1\0\2\164\1\0\1\105\2\106\5\0"+
    "\1\105\1\0\2\105\3\0\1\105\1\107\1\0\1\110"+
    "\1\111\4\0\7\164\1\0\2\164\1\0\3\164\1\0"+
    "\6\164\1\0\1\106\3\0\3\106\1\0\2\106\1\0"+
    "\3\106\5\0\1\106\1\0\2\106\3\0\1\106\1\165"+
    "\1\0\1\166\1\167\4\0\7\106\1\0\2\106\1\0"+
    "\3\106\1\0\6\106\1\0\1\106\33\0\1\105\3\0"+
    "\1\105\1\0\1\105\65\0\2\105\1\170\71\0\1\25"+
    "\32\0\1\3\2\46\1\0\2\3\1\0\1\46\7\0"+
    "\1\47\1\0\2\47\3\0\1\47\1\50\1\0\1\47"+
    "\1\51\4\0\6\3\1\171\1\0\2\3\1\0\3\3"+
    "\1\0\6\3\5\0\1\3\2\46\1\0\2\3\1\0"+
    "\1\46\7\0\1\47\1\0\2\47\3\0\1\47\1\50"+
    "\1\0\1\47\1\51\4\0\2\3\1\172\4\3\1\0"+
    "\2\3\1\0\3\3\1\0\6\3\5\0\1\3\2\46"+
    "\1\0\2\3\1\0\1\46\7\0\1\47\1\0\2\47"+
    "\3\0\1\47\1\50\1\0\1\47\1\51\4\0\7\3"+
    "\1\0\2\3\1\173\1\174\2\3\1\0\6\3\5\0"+
    "\1\3\2\46\1\0\2\3\1\0\1\46\7\0\1\47"+
    "\1\0\2\47\3\0\1\47\1\50\1\0\1\47\1\51"+
    "\4\0\7\3\1\0\2\3\1\175\1\176\2\3\1\0"+
    "\6\3\5\0\1\3\2\46\1\0\2\3\1\0\1\46"+
    "\7\0\1\47\1\0\2\47\3\0\1\47\1\50\1\0"+
    "\1\47\1\51\4\0\7\3\1\0\2\3\1\0\2\3"+
    "\1\177\1\0\6\3\5\0\1\3\2\46\1\0\2\3"+
    "\1\0\1\46\7\0\1\47\1\0\2\47\3\0\1\47"+
    "\1\50\1\0\1\47\1\51\4\0\1\200\6\3\1\0"+
    "\2\3\1\0\3\3\1\0\6\3\47\0\1\201\103\0"+
    "\2\202\12\0\1\3\2\46\1\0\2\3\1\0\1\46"+
    "\7\0\1\47\1\0\2\47\3\0\1\47\1\50\1\0"+
    "\1\47\1\51\4\0\3\3\1\203\3\3\1\0\2\3"+
    "\1\0\3\3\1\0\6\3\5\0\1\3\2\46\1\0"+
    "\2\3\1\0\1\46\7\0\1\47\1\0\2\47\3\0"+
    "\1\47\1\50\1\0\1\47\1\51\4\0\7\3\1\0"+
    "\2\3\1\0\3\3\1\202\1\204\5\3\46\0\1\205"+
    "\27\0\1\3\2\46\1\0\2\3\1\0\1\46\7\0"+
    "\1\47\1\0\2\47\3\0\1\47\1\50\1\0\1\47"+
    "\1\51\4\0\2\3\1\206\4\3\1\0\2\3\1\0"+
    "\3\3\1\0\6\3\5\0\1\3\2\46\1\0\1\3"+
    "\1\207\1\0\1\46\7\0\1\47\1\0\2\47\3\0"+
    "\1\47\1\50\1\0\1\47\1\51\4\0\7\3\1\0"+
    "\2\3\1\0\3\3\1\0\6\3\5\0\1\3\2\46"+
    "\1\0\2\3\1\0\1\46\7\0\1\47\1\0\2\47"+
    "\3\0\1\47\1\50\1\0\1\47\1\51\4\0\7\3"+
    "\1\0\2\3\1\0\2\3\1\210\1\0\6\3\5\0"+
    "\1\3\2\46\1\0\2\3\1\0\1\46\7\0\1\47"+
    "\1\0\2\47\3\0\1\47\1\50\1\0\1\47\1\51"+
    "\4\0\7\3\1\0\2\3\1\0\3\3\1\211\1\212"+
    "\5\3\5\0\1\3\2\46\1\0\2\3\1\0\1\46"+
    "\7\0\1\47\1\0\2\47\3\0\1\47\1\50\1\0"+
    "\1\47\1\51\4\0\7\3\1\0\2\3\1\0\3\3"+
    "\1\213\1\214\5\3\35\0\1\136\3\0\1\136\1\0"+
    "\1\136\65\0\2\136\1\215\33\0\1\142\3\0\2\142"+
    "\11\0\1\47\1\0\2\47\3\0\1\47\1\50\1\0"+
    "\1\47\1\51\4\0\7\142\1\0\2\142\1\0\3\142"+
    "\1\0\6\142\43\0\1\47\33\0\2\144\4\0\1\144"+
    "\35\0\1\216\23\0\1\76\2\145\1\0\2\76\1\0"+
    "\1\145\7\0\1\76\1\0\2\76\3\0\1\76\1\146"+
    "\1\0\1\76\1\147\4\0\6\76\1\217\1\0\2\76"+
    "\1\0\3\76\1\0\6\76\35\0\1\76\3\0\1\76"+
    "\1\0\1\76\65\0\2\76\1\152\32\0\1\52\1\53"+
    "\2\150\1\52\2\53\1\52\1\150\7\52\1\53\1\52"+
    "\2\53\2\52\1\55\1\53\1\56\1\52\1\53\1\57"+
    "\4\52\6\53\1\220\1\52\2\53\1\52\3\53\1\52"+
    "\6\53\3\0\1\52\2\0\2\151\4\0\1\151\35\0"+
    "\1\216\61\0\1\76\32\0\1\76\2\153\1\0\1\76"+
    "\1\154\1\0\1\153\7\0\1\76\1\0\2\76\3\0"+
    "\1\76\1\146\1\0\1\76\1\147\4\0\1\154\3\76"+
    "\1\154\1\76\1\221\1\0\1\76\1\154\1\0\3\76"+
    "\1\0\1\76\1\154\4\76\5\0\1\76\2\154\1\0"+
    "\1\76\1\154\1\0\1\154\7\0\1\76\1\0\2\76"+
    "\3\0\1\76\1\146\1\0\1\76\1\147\4\0\1\154"+
    "\3\76\1\154\1\76\1\154\1\0\1\76\1\154\1\0"+
    "\3\76\1\0\1\76\1\154\4\76\4\0\1\52\1\53"+
    "\2\150\1\52\2\53\1\52\1\155\7\52\1\53\1\52"+
    "\2\53\2\52\1\55\1\53\1\56\1\52\1\53\1\57"+
    "\4\52\6\53\1\220\1\52\2\53\1\52\3\53\1\52"+
    "\6\53\3\0\1\52\2\0\2\222\2\0\1\222\1\0"+
    "\1\222\27\0\1\222\3\0\1\222\1\0\1\222\2\0"+
    "\1\222\6\0\1\222\10\0\21\102\1\160\1\223\46\102"+
    "\31\0\1\104\3\0\1\104\1\0\1\104\65\0\2\104"+
    "\1\224\33\0\1\164\2\106\1\0\2\164\1\0\3\106"+
    "\5\0\1\105\1\0\2\105\3\0\1\105\1\107\1\0"+
    "\1\110\1\111\4\0\7\164\1\0\2\164\1\0\3\164"+
    "\1\0\6\164\1\0\1\106\33\0\1\106\3\0\1\106"+
    "\1\0\1\106\65\0\2\106\1\225\71\0\1\105\32\0"+
    "\1\3\2\46\1\0\2\3\1\0\1\46\7\0\1\47"+
    "\1\0\2\47\3\0\1\47\1\50\1\0\1\47\1\51"+
    "\4\0\1\226\6\3\1\0\2\3\1\0\3\3\1\0"+
    "\6\3\5\0\1\3\2\46\1\0\2\3\1\0\1\46"+
    "\7\0\1\47\1\0\2\47\3\0\1\47\1\50\1\0"+
    "\1\47\1\51\4\0\1\3\1\227\5\3\1\0\2\3"+
    "\1\0\3\3\1\0\6\3\52\0\1\230\23\0\1\3"+
    "\2\46\1\0\2\3\1\0\1\46\7\0\1\47\1\0"+
    "\2\47\3\0\1\47\1\50\1\0\1\47\1\51\4\0"+
    "\6\3\1\231\1\0\2\3\1\0\3\3\1\0\6\3"+
    "\52\0\1\232\23\0\1\3\2\46\1\0\2\3\1\0"+
    "\1\46\7\0\1\47\1\0\2\47\3\0\1\47\1\50"+
    "\1\0\1\47\1\51\4\0\6\3\1\233\1\0\2\3"+
    "\1\0\3\3\1\0\6\3\5\0\1\3\2\46\1\0"+
    "\2\3\1\0\1\46\7\0\1\47\1\0\2\47\3\0"+
    "\1\47\1\50\1\0\1\47\1\51\4\0\2\3\1\234"+
    "\4\3\1\0\2\3\1\235\1\236\2\3\1\0\6\3"+
    "\5\0\1\3\2\46\1\0\2\3\1\0\1\46\7\0"+
    "\1\47\1\0\2\47\3\0\1\47\1\50\1\0\1\47"+
    "\1\51\4\0\5\3\1\237\1\3\1\0\2\3\1\0"+
    "\3\3\1\0\6\3\51\0\1\240\65\0\1\241\27\0"+
    "\1\3\2\46\1\0\2\3\1\0\1\46\7\0\1\47"+
    "\1\0\2\47\3\0\1\47\1\50\1\0\1\47\1\51"+
    "\4\0\5\3\1\242\1\3\1\0\2\3\1\0\3\3"+
    "\1\0\6\3\5\0\1\3\2\46\1\0\2\3\1\0"+
    "\1\46\7\0\1\47\1\0\2\47\3\0\1\47\1\50"+
    "\1\0\1\47\1\51\4\0\2\3\1\243\4\3\1\0"+
    "\2\3\1\0\3\3\1\0\6\3\5\0\1\3\2\46"+
    "\1\0\2\3\1\0\1\46\7\0\1\47\1\0\2\47"+
    "\3\0\1\47\1\50\1\0\1\47\1\51\4\0\1\244"+
    "\6\3\1\0\2\3\1\0\3\3\1\0\6\3\5\0"+
    "\1\3\2\46\1\0\2\3\1\0\1\46\7\0\1\47"+
    "\1\0\2\47\3\0\1\47\1\50\1\0\1\47\1\51"+
    "\4\0\7\3\1\0\2\3\1\0\3\3\1\0\3\3"+
    "\1\245\2\3\65\0\1\246\10\0\1\3\2\46\1\0"+
    "\2\3\1\0\1\46\7\0\1\47\1\0\2\47\3\0"+
    "\1\47\1\50\1\0\1\47\1\51\4\0\7\3\1\0"+
    "\2\3\1\0\3\3\1\0\2\3\1\247\3\3\64\0"+
    "\1\250\11\0\1\3\2\46\1\0\2\3\1\0\1\46"+
    "\7\0\1\47\1\0\2\47\3\0\1\47\1\50\1\0"+
    "\1\47\1\51\4\0\7\3\1\0\2\3\1\0\3\3"+
    "\1\0\1\3\1\251\4\3\43\0\1\136\33\0\2\252"+
    "\1\253\3\0\1\252\61\0\1\76\2\254\1\253\2\76"+
    "\1\0\1\254\7\0\1\76\1\0\2\76\3\0\1\76"+
    "\1\146\1\0\1\76\1\147\4\0\7\76\1\0\2\76"+
    "\1\0\3\76\1\0\6\76\5\0\1\76\2\255\1\253"+
    "\2\76\1\0\1\255\7\0\1\76\1\0\2\76\3\0"+
    "\1\76\1\146\1\0\1\76\1\147\4\0\7\76\1\0"+
    "\2\76\1\0\3\76\1\0\6\76\5\0\1\76\2\256"+
    "\1\253\1\76\1\154\1\0\1\256\7\0\1\76\1\0"+
    "\2\76\3\0\1\76\1\146\1\0\1\76\1\147\4\0"+
    "\1\154\3\76\1\154\1\76\1\154\1\0\1\76\1\154"+
    "\1\0\3\76\1\0\1\76\1\154\4\76\43\0\1\104"+
    "\70\0\1\106\32\0\1\3\2\46\1\0\2\3\1\0"+
    "\1\46\7\0\1\47\1\0\2\47\3\0\1\47\1\50"+
    "\1\0\1\47\1\51\4\0\7\3\1\257\1\260\1\3"+
    "\1\0\3\3\1\0\6\3\5\0\1\3\2\46\1\0"+
    "\2\3\1\0\1\46\7\0\1\47\1\0\2\47\3\0"+
    "\1\47\1\50\1\0\1\47\1\51\4\0\5\3\1\261"+
    "\1\3\1\0\2\3\1\0\3\3\1\0\6\3\5\0"+
    "\1\3\2\46\1\0\2\3\1\0\1\46\7\0\1\47"+
    "\1\0\2\47\3\0\1\47\1\50\1\0\1\47\1\51"+
    "\4\0\7\3\1\0\2\3\1\0\3\3\1\262\1\263"+
    "\5\3\46\0\1\264\27\0\1\3\2\46\1\0\2\3"+
    "\1\0\1\46\7\0\1\47\1\0\2\47\3\0\1\47"+
    "\1\50\1\0\1\47\1\51\4\0\2\3\1\265\4\3"+
    "\1\0\2\3\1\0\3\3\1\0\6\3\46\0\1\266"+
    "\77\0\1\267\20\0\1\3\2\46\1\0\2\3\1\0"+
    "\1\46\7\0\1\47\1\0\2\47\3\0\1\47\1\50"+
    "\1\0\1\47\1\51\4\0\2\3\1\270\4\3\1\0"+
    "\2\3\1\0\3\3\1\0\6\3\5\0\1\3\2\46"+
    "\1\0\2\3\1\0\1\46\7\0\1\47\1\0\2\47"+
    "\3\0\1\47\1\50\1\0\1\47\1\51\4\0\7\3"+
    "\1\0\1\3\1\271\1\0\3\3\1\0\6\3\5\0"+
    "\1\3\2\46\1\0\2\3\1\0\1\46\7\0\1\47"+
    "\1\0\2\47\3\0\1\47\1\50\1\0\1\47\1\51"+
    "\4\0\1\3\1\272\5\3\1\0\2\3\1\0\3\3"+
    "\1\0\6\3\52\0\1\273\23\0\1\3\2\46\1\0"+
    "\2\3\1\0\1\46\7\0\1\47\1\0\2\47\3\0"+
    "\1\47\1\50\1\0\1\47\1\51\4\0\6\3\1\274"+
    "\1\0\2\3\1\0\3\3\1\0\6\3\6\0\2\252"+
    "\4\0\1\252\61\0\1\76\2\254\1\0\2\76\1\0"+
    "\1\254\7\0\1\76\1\0\2\76\3\0\1\76\1\146"+
    "\1\0\1\76\1\147\4\0\7\76\1\0\2\76\1\0"+
    "\3\76\1\0\6\76\5\0\1\76\2\255\1\0\2\76"+
    "\1\0\1\255\7\0\1\76\1\0\2\76\3\0\1\76"+
    "\1\146\1\0\1\76\1\147\4\0\6\76\1\217\1\0"+
    "\2\76\1\0\3\76\1\0\6\76\5\0\1\76\2\256"+
    "\1\0\1\76\1\154\1\0\1\256\7\0\1\76\1\0"+
    "\2\76\3\0\1\76\1\146\1\0\1\76\1\147\4\0"+
    "\1\154\3\76\1\154\1\76\1\154\1\0\1\76\1\154"+
    "\1\0\3\76\1\0\1\76\1\154\4\76\5\0\1\3"+
    "\2\46\1\0\2\3\1\0\1\46\7\0\1\47\1\0"+
    "\2\47\3\0\1\47\1\50\1\0\1\47\1\51\4\0"+
    "\7\3\1\0\2\3\1\0\2\3\1\275\1\0\6\3"+
    "\61\0\1\276\14\0\1\3\2\46\1\0\2\3\1\0"+
    "\1\46\7\0\1\47\1\0\2\47\3\0\1\47\1\50"+
    "\1\0\1\47\1\51\4\0\7\3\1\0\2\3\1\0"+
    "\2\3\1\277\1\0\6\3\60\0\1\300\15\0\1\3"+
    "\2\46\1\0\2\3\1\0\1\46\7\0\1\47\1\0"+
    "\2\47\3\0\1\47\1\50\1\0\1\47\1\51\4\0"+
    "\7\3\1\0\2\3\1\0\1\3\1\301\1\3\1\0"+
    "\6\3\5\0\1\3\2\46\1\0\2\3\1\0\1\46"+
    "\7\0\1\47\1\0\2\47\3\0\1\47\1\50\1\0"+
    "\1\47\1\51\4\0\7\3\1\0\2\3\1\0\3\3"+
    "\1\0\2\3\1\302\3\3\45\0\1\303\30\0\1\3"+
    "\2\46\1\0\2\3\1\0\1\46\7\0\1\47\1\0"+
    "\2\47\3\0\1\47\1\50\1\0\1\47\1\51\4\0"+
    "\1\3\1\304\5\3\1\0\2\3\1\0\3\3\1\0"+
    "\6\3\5\0\1\3\2\46\1\0\2\3\1\0\1\46"+
    "\7\0\1\47\1\0\2\47\3\0\1\47\1\50\1\0"+
    "\1\47\1\51\4\0\2\3\1\305\4\3\1\0\2\3"+
    "\1\0\3\3\1\0\6\3\52\0\1\306\23\0\1\3"+
    "\2\46\1\0\2\3\1\0\1\46\7\0\1\47\1\0"+
    "\2\47\3\0\1\47\1\50\1\0\1\47\1\51\4\0"+
    "\6\3\1\307\1\0\2\3\1\0\3\3\1\0\6\3"+
    "\4\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[8436];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\1\1\11\20\1\2\11\23\1\3\0\2\1\3\0"+
    "\4\1\2\11\1\1\7\11\2\1\2\11\1\0\3\1"+
    "\2\0\1\1\2\0\6\1\2\0\2\1\1\11\1\0"+
    "\7\1\3\0\1\11\1\1\2\0\1\1\2\0\2\1"+
    "\1\0\3\1\1\0\1\1\2\0\1\1\1\0\1\1"+
    "\1\0\1\1\2\0\2\1\1\0\1\1\1\0\3\1"+
    "\2\0\2\1\1\11\3\1\1\0\1\1\1\0\1\1"+
    "\2\0\4\1\1\11\2\0\2\1\1\11\1\1\1\11"+
    "\2\1\1\0\2\1\2\0\4\1\1\0\1\1\1\11"+
    "\2\1\1\0\3\1\1\11\2\1\1\0\1\1\1\11"+
    "\1\1\1\11\1\0\3\1\1\11\2\1\1\0\1\1"+
    "\1\11\2\1\1\0\2\1\1\11\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[199];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Scanner(java.io.Reader in) {
    this.zzReader = in;
  }



  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(Sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return new Symbol(Sym.ERROR, yycolumn, yyline, yytext());
            }
          case 51: break;
          case 2: 
            { return new Symbol(Sym.identifier, yycolumn, yyline, yytext());
            }
          case 52: break;
          case 3: 
            { return new Symbol(Sym.number, yycolumn, yyline, yytext());
            }
          case 53: break;
          case 4: 
            { return new Symbol(Sym.sub, yycolumn, yyline, yytext());
            }
          case 54: break;
          case 5: 
            { /*Ignore*/
            }
          case 55: break;
          case 6: 
            { return new Symbol(Sym.add, yycolumn, yyline, yytext());
            }
          case 56: break;
          case 7: 
            { return new Symbol(Sym.equal, yycolumn, yyline, yytext());
            }
          case 57: break;
          case 8: 
            { return new Symbol(Sym.less, yycolumn, yyline, yytext());
            }
          case 58: break;
          case 9: 
            { return new Symbol(Sym.greater, yycolumn, yyline, yytext());
            }
          case 59: break;
          case 10: 
            { return new Symbol(Sym.logical_not, yycolumn, yyline, yytext());
            }
          case 60: break;
          case 11: 
            { return new Symbol(Sym.mul, yycolumn, yyline, yytext());
            }
          case 61: break;
          case 12: 
            { return new Symbol(Sym.div, yycolumn, yyline, yytext());
            }
          case 62: break;
          case 13: 
            { return new Symbol(Sym.mod, yycolumn, yyline, yytext());
            }
          case 63: break;
          case 14: 
            { return new Symbol(Sym.open_bracket, yycolumn, yyline, yytext());
            }
          case 64: break;
          case 15: 
            { return new Symbol(Sym.close_bracket, yycolumn, yyline, yytext());
            }
          case 65: break;
          case 16: 
            { return new Symbol(Sym.octal_number, yycolumn, yyline, yytext());
            }
          case 66: break;
          case 17: 
            { return new Symbol(Sym.decr, yycolumn, yyline, yytext());
            }
          case 67: break;
          case 18: 
            { return new Symbol(Sym.sub_equal, yycolumn, yyline, yytext());
            }
          case 68: break;
          case 19: 
            { return new Symbol(Sym.logical_or, yycolumn, yyline, yytext());
            }
          case 69: break;
          case 20: 
            { return new Symbol(Sym.incr, yycolumn, yyline, yytext());
            }
          case 70: break;
          case 21: 
            { return new Symbol(Sym.add_equal, yycolumn, yyline, yytext());
            }
          case 71: break;
          case 22: 
            { return new Symbol(Sym.equal_to, yycolumn, yyline, yytext());
            }
          case 72: break;
          case 23: 
            { return new Symbol(Sym.greater_equal, yycolumn, yyline, yytext());
            }
          case 73: break;
          case 24: 
            { return new Symbol(Sym.less_equal, yycolumn, yyline, yytext());
            }
          case 74: break;
          case 25: 
            { return new Symbol(Sym.not_equal, yycolumn, yyline, yytext());
            }
          case 75: break;
          case 26: 
            { return new Symbol(Sym.logical_and, yycolumn, yyline, yytext());
            }
          case 76: break;
          case 27: 
            { return new Symbol(Sym.mul_equal, yycolumn, yyline, yytext());
            }
          case 77: break;
          case 28: 
            { return new Symbol(Sym.div_equal, yycolumn, yyline, yytext());
            }
          case 78: break;
          case 29: 
            { return new Symbol(Sym.literal_str, yycolumn, yyline, yytext());
            }
          case 79: break;
          case 30: 
            { return new Symbol(Sym.if, yycolumn, yyline, yytext());
            }
          case 80: break;
          case 31: 
            { return new Symbol(Sym.do, yycolumn, yyline, yytext());
            }
          case 81: break;
          case 32: 
            { return new Symbol(Sym.float_number, yycolumn, yyline, yytext());
            }
          case 82: break;
          case 33: 
            { return new Symbol(Sym.hexadecimal_number, yycolumn, yyline, yytext());
            }
          case 83: break;
          case 34: 
            { return new Symbol(Sym.for, yycolumn, yyline, yytext());
            }
          case 84: break;
          case 35: 
            { return new Symbol(Sym.int, yycolumn, yyline, yytext());
            }
          case 85: break;
          case 36: 
            { /* Ignore */
            }
          case 86: break;
          case 37: 
            { return new Symbol(Sym.else, yycolumn, yyline, yytext());
            }
          case 87: break;
          case 38: 
            { return new Symbol(Sym.case., yycolumn, yyline, yytext());
            }
          case 88: break;
          case 39: 
            { return new Symbol(Sym.char, yycolumn, yyline, yytext());
            }
          case 89: break;
          case 40: 
            { return new Symbol(Sym.long, yycolumn, yyline, yytext());
            }
          case 90: break;
          case 41: 
            { return new Symbol(Sym.void, yycolumn, yyline, yytext());
            }
          case 91: break;
          case 42: 
            { return new Symbol(Sym.float_point_number, yycolumn, yyline, yytext());
            }
          case 92: break;
          case 43: 
            { return new Symbol(Sym.break, yycolumn, yyline, yytext());
            }
          case 93: break;
          case 44: 
            { return new Symbol(Sym.const, yycolumn, yyline, yytext());
            }
          case 94: break;
          case 45: 
            { return new Symbol(Sym.short, yycolumn, yyline, yytext());
            }
          case 95: break;
          case 46: 
            { return new Symbol(Sym.while, yycolumn, yyline, yytext());
            }
          case 96: break;
          case 47: 
            { return new Symbol(Sym.return, yycolumn, yyline, yytext());
            }
          case 97: break;
          case 48: 
            { return new Symbol(Sym.switch, yycolumn, yyline, yytext());
            }
          case 98: break;
          case 49: 
            { return new Symbol(Sym.default, yycolumn, yyline, yytext());
            }
          case 99: break;
          case 50: 
            { return new Symbol(Sym.continue, yycolumn, yyline, yytext());
            }
          case 100: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
