/* The following code was generated by JFlex 1.6.1 */

package codigo;
import java_cup.runtime.*;
/* User code */

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>Scanner.flex</tt>
 */
public class Scanner implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0,  9, 24, 26, 24, 25,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     9, 40, 41,  0,  0, 16, 14, 13, 37, 38, 23, 35,  0,  4, 43, 15, 
     3,  8,  8,  8,  8,  8,  8,  8,  2,  2,  0,  0, 39, 36, 34,  0, 
    17, 32, 44, 48, 54, 42,  6, 55, 51, 29,  1, 47, 33,  1, 30, 52, 
     1,  1, 45, 50, 31, 53, 57, 56,  5, 27,  1,  0, 10,  0, 17,  1, 
     0, 32, 44, 48, 54, 42,  6, 55, 51, 29,  1, 47, 33,  1, 30, 52, 
     1,  1, 45, 50, 31, 53, 57, 56,  5, 27,  1,  0,  7,  0,  0,  0, 
     0,  0,  0,  0,  0, 26,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0, 20,  0,  0,  0,  0,  0, 12,  0, 12, 12, 19,  0, 12,  0,  0, 
     0, 12,  0, 12,  0,  0,  0,  0,  0,  0, 12,  0,  0,  0,  0, 19, 
     0,  0, 18, 11,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0, 18, 11,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\1\2\1\3\2\4\1\2\1\5\1\2\3\1"+
    "\1\2\1\3\1\2\1\3\1\0\1\1\2\0\1\1"+
    "\1\4\3\0\1\1\1\6\2\4\2\1\2\0\1\7"+
    "\1\0\1\1\1\5\2\0\1\3\3\0\1\7\1\1"+
    "\2\0\1\1\2\0\1\4\1\0\1\10\2\11\1\6"+
    "\2\0\1\7\1\0\1\1\1\0\1\7\4\0\1\3"+
    "\2\0\2\1\2\11\2\0\1\12\1\0\1\3\1\13"+
    "\1\0\3\13\1\0\1\3\1\0\1\3\1\0\1\3"+
    "\1\0\1\3\1\0\1\3\1\0\1\14\3\0\1\15"+
    "\1\16\1\17\2\0\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\10\0\1\27\1\30\1\0\1\31\1\32"+
    "\1\33\1\34\1\35\2\0\1\36\1\37\1\40\1\41"+
    "\1\42\1\43\11\0\1\44\2\0\1\45\1\46\14\0"+
    "\1\47\1\50\2\0\1\51\1\52\6\0\1\53\1\54"+
    "\2\0\1\55\1\56\2\0\1\57\1\60\1\0\1\61"+
    "\2\0\1\62\1\63";

  private static int [] zzUnpackAction() {
    int [] result = new int[188];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\72\0\164\0\256\0\350\0\u0122\0\u015c\0\u0196"+
    "\0\u01d0\0\u020a\0\u0244\0\u027e\0\u02b8\0\u02f2\0\u032c\0\u0366"+
    "\0\u03a0\0\u03da\0\u0414\0\u044e\0\u0488\0\u04c2\0\u04fc\0\u0536"+
    "\0\u0570\0\u05aa\0\u05e4\0\u061e\0\u0658\0\u0692\0\u06cc\0\u0706"+
    "\0\u0692\0\u0740\0\u077a\0\u07b4\0\u07ee\0\u0828\0\u0862\0\u02f2"+
    "\0\u089c\0\u08d6\0\72\0\u0910\0\u094a\0\u0984\0\u09be\0\u09f8"+
    "\0\u0a32\0\u0a6c\0\u0aa6\0\u0ae0\0\u0b1a\0\u0b54\0\u0b8e\0\u0bc8"+
    "\0\u0c02\0\u0658\0\u0c3c\0\u0c76\0\u0cb0\0\u06cc\0\u0cea\0\u0d24"+
    "\0\u0d5e\0\u0d98\0\u0dd2\0\u0e0c\0\u0e46\0\u0e80\0\u0eba\0\u0ef4"+
    "\0\u0bc8\0\u0f2e\0\u0f68\0\72\0\u0fa2\0\u0fdc\0\u1016\0\u1016"+
    "\0\u1050\0\u108a\0\u10c4\0\u10fe\0\u1138\0\u1172\0\u11ac\0\u11e6"+
    "\0\u1220\0\u125a\0\u1294\0\u12ce\0\u1308\0\u1342\0\u137c\0\u13b6"+
    "\0\u13f0\0\u142a\0\u1464\0\72\0\u149e\0\u14d8\0\u1512\0\u154c"+
    "\0\u1586\0\u15c0\0\72\0\72\0\u15fa\0\u1634\0\u166e\0\u16a8"+
    "\0\u16e2\0\u171c\0\u1756\0\u1790\0\u17ca\0\u1804\0\72\0\72"+
    "\0\u183e\0\72\0\72\0\72\0\72\0\72\0\u1878\0\u18b2"+
    "\0\72\0\72\0\72\0\72\0\72\0\72\0\u18ec\0\u1926"+
    "\0\u1960\0\u199a\0\u19d4\0\u1a0e\0\u1a48\0\u1a82\0\u1abc\0\72"+
    "\0\u1af6\0\u1b30\0\72\0\72\0\u1b6a\0\u1ba4\0\u1bde\0\u1c18"+
    "\0\u1c52\0\u1c8c\0\u1cc6\0\u1d00\0\u1d3a\0\u1d74\0\u1dae\0\u1de8"+
    "\0\72\0\72\0\u1e22\0\u1e5c\0\72\0\72\0\u1e96\0\u1ed0"+
    "\0\u1f0a\0\u1f44\0\u1f7e\0\u1fb8\0\72\0\72\0\u1ff2\0\u202c"+
    "\0\72\0\72\0\u2066\0\u20a0\0\72\0\72\0\u20da\0\72"+
    "\0\u2114\0\u214e\0\72\0\72";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[188];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\2\3\1\2\1\4"+
    "\1\7\1\2\1\10\1\2\1\11\1\12\1\13\2\12"+
    "\1\14\4\2\1\0\2\7\1\2\1\15\1\2\5\3"+
    "\7\2\1\16\1\3\1\2\2\3\1\2\2\3\1\2"+
    "\10\3\73\0\1\3\2\17\1\0\2\3\1\0\1\17"+
    "\2\0\1\20\1\0\5\21\1\22\10\0\1\3\1\0"+
    "\5\3\10\0\1\3\1\0\2\3\1\0\2\3\1\0"+
    "\10\3\1\23\1\24\2\25\1\23\2\24\1\23\1\25"+
    "\2\23\1\26\1\23\5\24\1\27\5\23\3\0\1\24"+
    "\1\23\5\24\10\23\1\24\1\30\2\24\1\23\2\24"+
    "\1\23\10\24\1\23\1\24\2\25\1\23\1\31\1\24"+
    "\1\23\1\32\2\23\1\26\1\23\5\24\1\27\5\23"+
    "\3\0\1\24\1\23\5\24\10\23\1\24\1\30\2\24"+
    "\1\23\2\24\1\23\10\24\2\0\1\33\1\34\4\0"+
    "\1\33\72\0\1\7\16\0\2\7\54\0\1\12\7\0"+
    "\1\12\1\0\1\12\44\0\1\35\2\36\1\0\2\35"+
    "\1\0\1\36\2\37\1\40\1\0\1\41\4\36\1\42"+
    "\6\0\1\37\1\0\1\35\1\0\5\35\10\0\1\35"+
    "\1\0\2\35\1\0\2\35\1\0\10\35\1\0\1\43"+
    "\2\21\1\0\2\43\1\0\1\21\2\0\1\20\1\0"+
    "\5\21\1\22\10\0\1\43\1\0\5\43\10\0\1\43"+
    "\1\0\2\43\1\0\2\43\1\0\10\43\1\0\1\43"+
    "\2\21\1\0\2\43\1\0\1\21\2\0\1\20\1\0"+
    "\2\21\1\44\2\21\1\22\4\0\1\45\3\0\1\43"+
    "\1\0\5\43\10\0\1\43\1\0\2\43\1\0\2\43"+
    "\1\0\10\43\23\0\2\12\1\46\45\0\1\3\2\17"+
    "\1\0\2\3\1\0\1\17\2\0\1\20\1\0\5\21"+
    "\1\22\10\0\1\47\1\0\5\3\10\0\1\3\1\0"+
    "\2\3\1\0\2\3\1\0\10\3\1\0\3\50\1\0"+
    "\2\50\1\0\3\50\1\51\1\0\5\50\1\52\6\0"+
    "\1\50\1\0\1\50\1\0\5\50\7\0\1\53\1\50"+
    "\1\0\2\50\1\0\2\50\1\0\10\50\1\0\3\17"+
    "\1\0\2\17\1\0\1\17\22\0\1\17\1\0\5\17"+
    "\10\0\1\17\1\0\2\17\1\0\2\17\1\0\10\17"+
    "\14\0\1\21\7\0\1\21\1\0\1\21\44\0\1\54"+
    "\2\21\1\0\2\54\1\0\1\21\2\0\1\20\1\0"+
    "\5\21\1\22\10\0\1\54\1\0\5\54\10\0\1\54"+
    "\1\0\2\54\1\0\2\54\1\0\10\54\23\0\2\21"+
    "\1\55\46\0\2\56\4\0\1\56\62\0\1\43\2\57"+
    "\1\0\2\43\1\0\1\57\2\0\1\60\1\0\5\43"+
    "\1\61\10\0\1\43\1\0\5\43\10\0\1\43\1\0"+
    "\2\43\1\0\2\43\1\0\10\43\1\23\1\24\2\62"+
    "\1\23\2\24\1\23\1\62\2\23\1\26\1\23\5\24"+
    "\1\27\5\23\3\0\1\24\1\23\5\24\10\23\1\24"+
    "\1\30\2\24\1\23\2\24\1\23\10\24\2\0\2\56"+
    "\4\0\1\56\3\0\1\43\7\0\1\43\1\0\1\43"+
    "\45\0\2\56\4\0\1\56\12\0\2\43\1\63\46\0"+
    "\2\64\4\0\1\64\62\0\1\43\2\65\1\0\1\43"+
    "\1\66\1\0\1\65\2\0\1\60\1\0\5\43\1\61"+
    "\10\0\1\43\1\0\3\43\1\66\1\43\10\0\1\66"+
    "\1\0\1\66\1\43\1\0\1\43\1\66\1\0\4\43"+
    "\1\66\3\43\1\23\1\24\2\62\1\23\2\24\1\23"+
    "\1\67\2\23\1\26\1\23\5\24\1\27\5\23\3\0"+
    "\1\24\1\23\5\24\10\23\1\24\1\30\2\24\1\23"+
    "\2\24\1\23\10\24\2\0\2\33\4\0\1\33\63\0"+
    "\2\33\1\0\1\70\2\0\1\33\62\0\3\35\1\0"+
    "\2\35\1\0\1\35\2\37\1\71\1\0\1\72\4\35"+
    "\1\73\6\0\1\37\1\0\1\35\1\0\5\35\10\0"+
    "\1\35\1\0\2\35\1\0\2\35\1\0\10\35\1\0"+
    "\1\74\2\36\1\0\2\74\1\0\1\36\2\37\1\40"+
    "\1\0\1\41\4\36\1\42\6\0\1\37\1\0\1\74"+
    "\1\0\5\74\10\0\1\74\1\0\2\74\1\0\2\74"+
    "\1\0\10\74\1\0\3\37\1\0\2\37\1\0\3\37"+
    "\1\75\1\0\1\76\4\37\1\77\6\0\1\37\1\0"+
    "\1\37\1\0\5\37\10\0\1\37\1\0\2\37\1\0"+
    "\2\37\1\0\10\37\14\0\1\36\7\0\1\36\1\0"+
    "\1\36\66\0\2\36\1\100\45\0\3\43\1\0\2\43"+
    "\1\0\1\43\2\0\1\60\1\0\5\43\1\61\10\0"+
    "\1\43\1\0\5\43\10\0\1\43\1\0\2\43\1\0"+
    "\2\43\1\0\10\43\30\44\3\0\37\44\27\45\1\101"+
    "\42\45\26\0\1\12\44\0\1\3\2\17\1\0\2\3"+
    "\1\0\1\17\2\0\1\20\1\0\5\21\1\22\10\0"+
    "\1\3\1\102\1\103\4\3\10\0\1\3\1\0\2\3"+
    "\1\0\2\3\1\0\10\3\14\0\1\50\7\0\1\50"+
    "\1\0\1\50\66\0\2\50\1\104\45\0\1\54\3\0"+
    "\2\54\4\0\1\20\1\0\5\21\1\22\10\0\1\54"+
    "\1\0\5\54\10\0\1\54\1\0\2\54\1\0\2\54"+
    "\1\0\10\54\26\0\1\21\45\0\2\56\4\0\1\56"+
    "\41\0\1\105\20\0\1\43\2\57\1\0\2\43\1\0"+
    "\1\57\2\0\1\60\1\0\5\43\1\61\10\0\1\43"+
    "\1\0\5\43\10\0\1\106\1\0\2\43\1\0\2\43"+
    "\1\0\10\43\14\0\1\43\7\0\1\43\1\0\1\43"+
    "\66\0\2\43\1\63\44\0\1\23\1\24\2\62\1\23"+
    "\2\24\1\23\1\62\2\23\1\26\1\23\5\24\1\27"+
    "\5\23\3\0\1\24\1\23\5\24\10\23\1\107\1\30"+
    "\2\24\1\23\2\24\1\23\10\24\26\0\1\43\45\0"+
    "\2\64\4\0\1\64\41\0\1\105\20\0\1\43\2\65"+
    "\1\0\1\43\1\66\1\0\1\65\2\0\1\60\1\0"+
    "\5\43\1\61\10\0\1\43\1\0\3\43\1\66\1\43"+
    "\10\0\1\110\1\0\1\66\1\43\1\0\1\43\1\66"+
    "\1\0\4\43\1\66\3\43\1\0\1\43\2\66\1\0"+
    "\1\43\1\66\1\0\1\66\2\0\1\60\1\0\5\43"+
    "\1\61\10\0\1\43\1\0\3\43\1\66\1\43\10\0"+
    "\1\66\1\0\1\66\1\43\1\0\1\43\1\66\1\0"+
    "\4\43\1\66\3\43\1\23\1\24\2\62\1\23\2\24"+
    "\1\23\1\67\2\23\1\26\1\23\5\24\1\27\5\23"+
    "\3\0\1\24\1\23\5\24\10\23\1\107\1\30\2\24"+
    "\1\23\2\24\1\23\10\24\2\0\2\111\2\0\1\111"+
    "\1\0\1\111\27\0\1\111\11\0\1\111\1\0\1\111"+
    "\3\0\1\111\5\0\1\111\17\0\1\35\7\0\1\35"+
    "\1\0\1\35\66\0\2\35\1\112\45\0\1\74\2\37"+
    "\1\0\2\74\1\0\3\37\1\40\1\0\1\41\4\36"+
    "\1\42\6\0\1\37\1\0\1\74\1\0\5\74\10\0"+
    "\1\74\1\0\2\74\1\0\2\74\1\0\10\74\14\0"+
    "\1\37\7\0\1\37\1\0\1\37\66\0\2\37\1\113"+
    "\72\0\1\36\43\0\17\45\1\114\7\45\1\101\42\45"+
    "\36\0\1\115\34\0\1\3\2\17\1\0\2\3\1\0"+
    "\1\17\2\0\1\20\1\0\5\21\1\22\10\0\1\3"+
    "\1\0\1\3\1\116\3\3\10\0\1\3\1\0\2\3"+
    "\1\0\2\3\1\0\10\3\26\0\1\50\45\0\2\117"+
    "\1\120\3\0\1\117\62\0\1\43\2\121\1\120\2\43"+
    "\1\0\1\121\2\0\1\60\1\0\5\43\1\61\10\0"+
    "\1\43\1\0\5\43\10\0\1\43\1\0\2\43\1\0"+
    "\2\43\1\0\10\43\1\0\1\43\2\122\1\120\2\43"+
    "\1\0\1\122\2\0\1\60\1\0\5\43\1\61\10\0"+
    "\1\43\1\0\5\43\10\0\1\43\1\0\2\43\1\0"+
    "\2\43\1\0\10\43\1\0\1\43\2\123\1\120\1\43"+
    "\1\66\1\0\1\123\2\0\1\60\1\0\5\43\1\61"+
    "\10\0\1\43\1\0\3\43\1\66\1\43\10\0\1\66"+
    "\1\0\1\66\1\43\1\0\1\43\1\66\1\0\4\43"+
    "\1\66\3\43\26\0\1\35\71\0\1\37\77\0\2\124"+
    "\35\0\1\3\2\17\1\0\2\3\1\0\1\17\2\0"+
    "\1\20\1\0\5\21\1\22\10\0\1\3\1\124\1\125"+
    "\4\3\10\0\1\3\1\0\2\3\1\0\2\3\1\0"+
    "\10\3\2\0\2\117\4\0\1\117\62\0\1\43\2\121"+
    "\1\0\2\43\1\0\1\121\2\0\1\60\1\0\5\43"+
    "\1\61\10\0\1\43\1\0\5\43\10\0\1\43\1\0"+
    "\2\43\1\0\2\43\1\0\10\43\1\0\1\43\2\122"+
    "\1\0\2\43\1\0\1\122\2\0\1\60\1\0\5\43"+
    "\1\61\10\0\1\43\1\0\5\43\10\0\1\106\1\0"+
    "\2\43\1\0\2\43\1\0\10\43\1\0\1\43\2\123"+
    "\1\0\1\43\1\66\1\0\1\123\2\0\1\60\1\0"+
    "\5\43\1\61\10\0\1\43\1\0\3\43\1\66\1\43"+
    "\10\0\1\66\1\0\1\66\1\43\1\0\1\43\1\66"+
    "\1\0\4\43\1\66\3\43\37\0\1\126\33\0\1\3"+
    "\2\17\1\0\2\3\1\0\1\17\2\0\1\20\1\0"+
    "\5\21\1\22\10\0\1\3\1\0\2\3\1\127\2\3"+
    "\10\0\1\3\1\0\2\3\1\0\2\3\1\0\10\3"+
    "\34\0\2\130\35\0\1\3\2\17\1\0\2\3\1\0"+
    "\1\17\2\0\1\20\1\0\5\21\1\22\10\0\1\3"+
    "\1\130\1\131\4\3\10\0\1\3\1\0\2\3\1\0"+
    "\2\3\1\0\10\3\40\0\1\132\32\0\1\3\2\17"+
    "\1\0\2\3\1\0\1\17\2\0\1\20\1\0\5\21"+
    "\1\22\10\0\1\3\1\0\3\3\1\133\1\3\10\0"+
    "\1\3\1\0\2\3\1\0\2\3\1\0\10\3\41\0"+
    "\1\134\31\0\1\3\2\17\1\0\2\3\1\0\1\17"+
    "\2\0\1\20\1\0\5\21\1\22\10\0\1\3\1\0"+
    "\4\3\1\135\10\0\1\3\1\0\2\3\1\0\2\3"+
    "\1\0\10\3\42\0\1\136\30\0\1\3\2\17\1\0"+
    "\2\3\1\0\1\17\2\0\1\20\1\0\5\21\1\22"+
    "\10\0\1\3\1\0\5\3\1\136\7\0\1\3\1\0"+
    "\2\3\1\0\2\3\1\0\10\3\4\0\1\137\1\0"+
    "\1\140\1\141\6\0\1\142\1\143\1\144\6\0\1\145"+
    "\4\0\2\146\3\0\1\147\1\150\1\151\1\152\1\153"+
    "\1\154\1\155\1\156\1\0\1\157\1\0\1\160\1\161"+
    "\2\0\1\162\2\163\3\0\1\164\1\0\1\165\1\166"+
    "\4\0\1\167\37\0\1\170\111\0\1\171\14\0\1\172"+
    "\100\0\1\173\117\0\1\174\71\0\1\175\33\0\1\176"+
    "\27\0\1\177\117\0\1\200\51\0\1\201\70\0\1\202"+
    "\1\203\71\0\1\204\71\0\1\205\71\0\1\206\66\0"+
    "\1\207\105\0\1\210\66\0\1\211\57\0\1\212\22\0"+
    "\1\213\1\214\70\0\1\215\4\0\1\216\53\0\1\217"+
    "\11\0\1\220\70\0\1\221\72\0\1\222\62\0\1\223"+
    "\53\0\1\224\70\0\1\225\114\0\2\226\61\0\1\227"+
    "\56\0\1\230\113\0\2\231\47\0\1\232\67\0\1\233"+
    "\117\0\1\234\41\0\2\235\42\0\1\236\117\0\2\237"+
    "\70\0\2\240\123\0\1\241\54\0\1\242\57\0\1\243"+
    "\116\0\1\244\56\0\1\245\74\0\1\246\53\0\1\247"+
    "\21\0\2\250\64\0\1\251\53\0\1\252\72\0\1\253"+
    "\72\0\1\254\116\0\1\255\61\0\2\256\67\0\1\257"+
    "\50\0\2\260\73\0\1\261\71\0\1\262\112\0\1\263"+
    "\76\0\1\264\56\0\1\265\55\0\1\266\71\0\1\267"+
    "\116\0\1\270\47\0\1\271\115\0\1\272\43\0\1\273"+
    "\104\0\1\274\17\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[8584];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\1\1\11\15\1\1\0\1\1\2\0\2\1\3\0"+
    "\6\1\2\0\1\1\1\0\2\1\2\0\1\1\3\0"+
    "\1\11\1\1\2\0\1\1\2\0\1\1\1\0\4\1"+
    "\2\0\1\1\1\0\1\1\1\0\1\1\4\0\1\1"+
    "\2\0\4\1\2\0\1\11\1\0\2\1\1\0\3\1"+
    "\1\0\1\1\1\0\1\1\1\0\1\1\1\0\1\1"+
    "\1\0\1\1\1\0\1\1\3\0\1\1\1\11\1\1"+
    "\2\0\3\1\2\11\2\1\10\0\2\11\1\0\5\11"+
    "\2\0\6\11\11\0\1\11\2\0\2\11\14\0\2\11"+
    "\2\0\2\11\6\0\2\11\2\0\2\11\2\0\2\11"+
    "\1\0\1\11\2\0\2\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[188];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Scanner(java.io.Reader in) {
    this.zzReader = in;
  }



  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(Sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { System.out.println("ERROR: " + yytext() + " columna: " + yycolumn + " fila: " + yyline);
            }
          case 52: break;
          case 2: 
            { System.out.println("ERROR:" + yytext() + " columna: " + yycolumn + " fila: " + yyline);
            }
          case 53: break;
          case 3: 
            { return new Symbol(Sym.identifier, yycolumn, yyline, yytext());
            }
          case 54: break;
          case 4: 
            { return new Symbol(Sym.number, yycolumn, yyline, yytext());
            }
          case 55: break;
          case 5: 
            { /*Ignore*/
            }
          case 56: break;
          case 6: 
            { return new Symbol(Sym.octal_number, yycolumn, yyline, yytext());
            }
          case 57: break;
          case 7: 
            { return new Symbol(Sym.literal_str, yycolumn, yyline, yytext());
            }
          case 58: break;
          case 8: 
            { return new Symbol(Sym.float_number, yycolumn, yyline, yytext());
            }
          case 59: break;
          case 9: 
            { return new Symbol(Sym.hexadecimal_number, yycolumn, yyline, yytext());
            }
          case 60: break;
          case 10: 
            { /* Ignore */
            }
          case 61: break;
          case 11: 
            { return new Symbol(Sym.float_point_number, yycolumn, yyline, yytext());
            }
          case 62: break;
          case 12: 
            { return new Symbol(Sym.sub, yycolumn, yyline, yytext());
            }
          case 63: break;
          case 13: 
            { return new Symbol(Sym.div, yycolumn, yyline, yytext());
            }
          case 64: break;
          case 14: 
            { return new Symbol(Sym.mod, yycolumn, yyline, yytext());
            }
          case 65: break;
          case 15: 
            { return new Symbol(Sym.mul, yycolumn, yyline, yytext());
            }
          case 66: break;
          case 16: 
            { return new Symbol(Sym.less, yycolumn, yyline, yytext());
            }
          case 67: break;
          case 17: 
            { return new Symbol(Sym.add, yycolumn, yyline, yytext());
            }
          case 68: break;
          case 18: 
            { return new Symbol(Sym.equal, yycolumn, yyline, yytext());
            }
          case 69: break;
          case 19: 
            { return new Symbol(Sym.open_bracket, yycolumn, yyline, yytext());
            }
          case 70: break;
          case 20: 
            { return new Symbol(Sym.close_bracket, yycolumn, yyline, yytext());
            }
          case 71: break;
          case 21: 
            { return new Symbol(Sym.greater, yycolumn, yyline, yytext());
            }
          case 72: break;
          case 22: 
            { return new Symbol(Sym.logical_not, yycolumn, yyline, yytext());
            }
          case 73: break;
          case 23: 
            { return new Symbol(Sym.decr, yycolumn, yyline, yytext());
            }
          case 74: break;
          case 24: 
            { return new Symbol(Sym.sub_equal, yycolumn, yyline, yytext());
            }
          case 75: break;
          case 25: 
            { return new Symbol(Sym.logical_or, yycolumn, yyline, yytext());
            }
          case 76: break;
          case 26: 
            { return new Symbol(Sym.logical_and, yycolumn, yyline, yytext());
            }
          case 77: break;
          case 27: 
            { return new Symbol(Sym.div_equal, yycolumn, yyline, yytext());
            }
          case 78: break;
          case 28: 
            { return new Symbol(Sym.mul_equal, yycolumn, yyline, yytext());
            }
          case 79: break;
          case 29: 
            { return new Symbol(Sym.i_if, yycolumn, yyline, yytext());
            }
          case 80: break;
          case 30: 
            { return new Symbol(Sym.greater_equal, yycolumn, yyline, yytext());
            }
          case 81: break;
          case 31: 
            { return new Symbol(Sym.incr, yycolumn, yyline, yytext());
            }
          case 82: break;
          case 32: 
            { return new Symbol(Sym.add_equal, yycolumn, yyline, yytext());
            }
          case 83: break;
          case 33: 
            { return new Symbol(Sym.equal_to, yycolumn, yyline, yytext());
            }
          case 84: break;
          case 34: 
            { return new Symbol(Sym.less_equal, yycolumn, yyline, yytext());
            }
          case 85: break;
          case 35: 
            { return new Symbol(Sym.not_equal, yycolumn, yyline, yytext());
            }
          case 86: break;
          case 36: 
            { return new Symbol(Sym.i_do, yycolumn, yyline, yytext());
            }
          case 87: break;
          case 37: 
            { return new Symbol(Sym.i_for, yycolumn, yyline, yytext());
            }
          case 88: break;
          case 38: 
            { return new Symbol(Sym.i_int, yycolumn, yyline, yytext());
            }
          case 89: break;
          case 39: 
            { return new Symbol(Sym.i_long, yycolumn, yyline, yytext());
            }
          case 90: break;
          case 40: 
            { return new Symbol(Sym.i_else, yycolumn, yyline, yytext());
            }
          case 91: break;
          case 41: 
            { return new Symbol(Sym.i_case, yycolumn, yyline, yytext());
            }
          case 92: break;
          case 42: 
            { return new Symbol(Sym.i_char, yycolumn, yyline, yytext());
            }
          case 93: break;
          case 43: 
            { return new Symbol(Sym.i_void, yycolumn, yyline, yytext());
            }
          case 94: break;
          case 44: 
            { return new Symbol(Sym.i_break, yycolumn, yyline, yytext());
            }
          case 95: break;
          case 45: 
            { return new Symbol(Sym.i_const, yycolumn, yyline, yytext());
            }
          case 96: break;
          case 46: 
            { return new Symbol(Sym.i_short, yycolumn, yyline, yytext());
            }
          case 97: break;
          case 47: 
            { return new Symbol(Sym.i_while, yycolumn, yyline, yytext());
            }
          case 98: break;
          case 48: 
            { return new Symbol(Sym.i_return, yycolumn, yyline, yytext());
            }
          case 99: break;
          case 49: 
            { return new Symbol(Sym.i_switch, yycolumn, yyline, yytext());
            }
          case 100: break;
          case 50: 
            { return new Symbol(Sym.i_default, yycolumn, yyline, yytext());
            }
          case 101: break;
          case 51: 
            { return new Symbol(Sym.i_continue, yycolumn, yyline, yytext());
            }
          case 102: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
